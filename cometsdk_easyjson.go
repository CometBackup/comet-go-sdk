// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package cometsdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB7f3de24Decode(in *jlexer.Lexer, out *WindowsCodeSignProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "WindowsCodeSignMethod":
			out.WindowsCodeSignMethod = WindowsCodesignMethod(in.Int())
		case "WindowsCodeSignPKCS12FilePath":
			out.WindowsCodeSignPKCS12FilePath = string(in.String())
		case "WindowsCodeSignPKCS12PasswordFormat":
			out.WindowsCodeSignPKCS12PasswordFormat = uint64(in.Uint64())
		case "WindowsCodeSignPKCS12Password":
			out.WindowsCodeSignPKCS12Password = string(in.String())
		case "WindowsCodeSignPKCS11Engine":
			out.WindowsCodeSignPKCS11Engine = string(in.String())
		case "WindowsCodeSignPKCS11Module":
			out.WindowsCodeSignPKCS11Module = string(in.String())
		case "WindowsCodeSignPKCS11Certfile":
			out.WindowsCodeSignPKCS11Certfile = string(in.String())
		case "WindowsCodeSignPKCS11KeyID":
			out.WindowsCodeSignPKCS11KeyID = string(in.String())
		case "WindowsCodeSignPKCS11PasswordFormat":
			out.WindowsCodeSignPKCS11PasswordFormat = uint64(in.Uint64())
		case "WindowsCodeSignPKCS11Password":
			out.WindowsCodeSignPKCS11Password = string(in.String())
		case "WindowsCodeSignAzureVaultName":
			out.WindowsCodeSignAzureVaultName = string(in.String())
		case "WindowsCodeSignAzureCertName":
			out.WindowsCodeSignAzureCertName = string(in.String())
		case "WindowsCodeSignAzureAppID":
			out.WindowsCodeSignAzureAppID = string(in.String())
		case "WindowsCodeSignAzureAppSecretFormat":
			out.WindowsCodeSignAzureAppSecretFormat = uint64(in.Uint64())
		case "WindowsCodeSignAzureAppSecret":
			out.WindowsCodeSignAzureAppSecret = string(in.String())
		case "WindowsCodeSignAzureTenantID":
			out.WindowsCodeSignAzureTenantID = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode(out *jwriter.Writer, in WindowsCodeSignProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"WindowsCodeSignMethod\":"
		out.RawString(prefix[1:])
		out.Int(int(in.WindowsCodeSignMethod))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS12FilePath\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS12FilePath))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS12PasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WindowsCodeSignPKCS12PasswordFormat))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS12Password\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS12Password))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Engine\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Engine))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Module\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Module))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Certfile\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Certfile))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11KeyID\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11KeyID))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11PasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WindowsCodeSignPKCS11PasswordFormat))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Password\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Password))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureVaultName\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureVaultName))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureCertName\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureCertName))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureAppID\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureAppID))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureAppSecretFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WindowsCodeSignAzureAppSecretFormat))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureAppSecret\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureAppSecret))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureTenantID\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureTenantID))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WindowsCodeSignProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WindowsCodeSignProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WindowsCodeSignProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WindowsCodeSignProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode(l, v)
}
func easyjsonB7f3de24Decode1(in *jlexer.Lexer, out *WinSMBAuth) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SharePath":
			out.SharePath = string(in.String())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "PasswordFormat":
			out.PasswordFormat = uint64(in.Uint64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode1(out *jwriter.Writer, in WinSMBAuth) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SharePath\":"
		out.RawString(prefix[1:])
		out.String(string(in.SharePath))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"PasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.PasswordFormat))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WinSMBAuth) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WinSMBAuth) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WinSMBAuth) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WinSMBAuth) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode1(l, v)
}
func easyjsonB7f3de24Decode2(in *jlexer.Lexer, out *WebhookOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "URL":
			out.URL = string(in.String())
		case "CustomHeaders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.CustomHeaders = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.CustomHeaders)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Level":
			out.Level = StreamLevel(in.String())
		case "WhiteListedEventTypes":
			if in.IsNull() {
				in.Skip()
				out.WhiteListedEventTypes = nil
			} else {
				in.Delim('[')
				if out.WhiteListedEventTypes == nil {
					if !in.IsDelim(']') {
						out.WhiteListedEventTypes = make([]StreamableEventType, 0, 8)
					} else {
						out.WhiteListedEventTypes = []StreamableEventType{}
					}
				} else {
					out.WhiteListedEventTypes = (out.WhiteListedEventTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v2 StreamableEventType
					v2 = StreamableEventType(in.Int())
					out.WhiteListedEventTypes = append(out.WhiteListedEventTypes, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode2(out *jwriter.Writer, in WebhookOption) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"URL\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"CustomHeaders\":"
		out.RawString(prefix)
		if in.CustomHeaders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.CustomHeaders {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.String(string(v3Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Level\":"
		out.RawString(prefix)
		out.String(string(in.Level))
	}
	{
		const prefix string = ",\"WhiteListedEventTypes\":"
		out.RawString(prefix)
		if in.WhiteListedEventTypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.WhiteListedEventTypes {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v5))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebhookOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebhookOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebhookOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebhookOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode2(l, v)
}
func easyjsonB7f3de24Decode3(in *jlexer.Lexer, out *WebInterfaceBrandingProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BrandingStyleType":
			out.BrandingStyleType = int(in.Int())
		case "BrandName":
			out.BrandName = string(in.String())
		case "LogoImage":
			out.LogoImage = string(in.String())
		case "TopColor":
			out.TopColor = string(in.String())
		case "AccentColor":
			out.AccentColor = string(in.String())
		case "Favicon":
			out.Favicon = string(in.String())
		case "HideNewsArea":
			out.HideNewsArea = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode3(out *jwriter.Writer, in WebInterfaceBrandingProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BrandingStyleType\":"
		out.RawString(prefix[1:])
		out.Int(int(in.BrandingStyleType))
	}
	{
		const prefix string = ",\"BrandName\":"
		out.RawString(prefix)
		out.String(string(in.BrandName))
	}
	{
		const prefix string = ",\"LogoImage\":"
		out.RawString(prefix)
		out.String(string(in.LogoImage))
	}
	{
		const prefix string = ",\"TopColor\":"
		out.RawString(prefix)
		out.String(string(in.TopColor))
	}
	{
		const prefix string = ",\"AccentColor\":"
		out.RawString(prefix)
		out.String(string(in.AccentColor))
	}
	{
		const prefix string = ",\"Favicon\":"
		out.RawString(prefix)
		out.String(string(in.Favicon))
	}
	{
		const prefix string = ",\"HideNewsArea\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideNewsArea))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebInterfaceBrandingProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebInterfaceBrandingProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebInterfaceBrandingProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebInterfaceBrandingProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode3(l, v)
}
func easyjsonB7f3de24Decode4(in *jlexer.Lexer, out *WebDavDestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DavServer":
			out.DavServer = string(in.String())
		case "UserName":
			out.UserName = string(in.String())
		case "AccessKey":
			out.AccessKey = string(in.String())
		case "Path":
			out.Path = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode4(out *jwriter.Writer, in WebDavDestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DavServer != "" {
		const prefix string = ",\"DavServer\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DavServer))
	}
	if in.UserName != "" {
		const prefix string = ",\"UserName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	if in.AccessKey != "" {
		const prefix string = ",\"AccessKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessKey))
	}
	if in.Path != "" {
		const prefix string = ",\"Path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebDavDestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebDavDestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebDavDestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebDavDestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode4(l, v)
}
func easyjsonB7f3de24Decode5(in *jlexer.Lexer, out *WebAuthnUserEntity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "displayName":
			out.DisplayName = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				out.ID = in.Bytes()
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode5(out *jwriter.Writer, in WebAuthnUserEntity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Icon != "" {
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	if in.DisplayName != "" {
		const prefix string = ",\"displayName\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Base64Bytes(in.ID)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnUserEntity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnUserEntity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnUserEntity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnUserEntity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode5(l, v)
}
func easyjsonB7f3de24Decode6(in *jlexer.Lexer, out *WebAuthnSignResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ChallengeID":
			out.ChallengeID = string(in.String())
		case "CredentialJSON":
			out.CredentialJSON = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode6(out *jwriter.Writer, in WebAuthnSignResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ChallengeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChallengeID))
	}
	{
		const prefix string = ",\"CredentialJSON\":"
		out.RawString(prefix)
		out.String(string(in.CredentialJSON))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnSignResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnSignResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnSignResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnSignResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode6(l, v)
}
func easyjsonB7f3de24Decode7(in *jlexer.Lexer, out *WebAuthnSignRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ChallengeID":
			out.ChallengeID = string(in.String())
		case "Assertion":
			(out.Assertion).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode7(out *jwriter.Writer, in WebAuthnSignRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ChallengeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChallengeID))
	}
	{
		const prefix string = ",\"Assertion\":"
		out.RawString(prefix)
		(in.Assertion).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnSignRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnSignRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnSignRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnSignRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode7(l, v)
}
func easyjsonB7f3de24Decode8(in *jlexer.Lexer, out *WebAuthnRelyingPartyEntity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "id":
			out.ID = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode8(out *jwriter.Writer, in WebAuthnRelyingPartyEntity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Icon != "" {
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnRelyingPartyEntity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnRelyingPartyEntity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnRelyingPartyEntity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnRelyingPartyEntity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode8(l, v)
}
func easyjsonB7f3de24Decode9(in *jlexer.Lexer, out *WebAuthnRegistrationChallengeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "ChallengeID":
			out.ChallengeID = string(in.String())
		case "CredentialCreationOptions":
			(out.CredentialCreationOptions).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode9(out *jwriter.Writer, in WebAuthnRegistrationChallengeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ChallengeID\":"
		out.RawString(prefix)
		out.String(string(in.ChallengeID))
	}
	{
		const prefix string = ",\"CredentialCreationOptions\":"
		out.RawString(prefix)
		(in.CredentialCreationOptions).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnRegistrationChallengeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnRegistrationChallengeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnRegistrationChallengeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnRegistrationChallengeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode9(l, v)
}
func easyjsonB7f3de24Decode10(in *jlexer.Lexer, out *WebAuthnPublicKeyCredentialRequestOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "challenge":
			if in.IsNull() {
				in.Skip()
				out.Challenge = nil
			} else {
				out.Challenge = in.Bytes()
			}
		case "timeout":
			out.Timeout = int(in.Int())
		case "rpId":
			out.RelyingPartyID = string(in.String())
		case "allowCredentials":
			if in.IsNull() {
				in.Skip()
				out.AllowedCredentials = nil
			} else {
				in.Delim('[')
				if out.AllowedCredentials == nil {
					if !in.IsDelim(']') {
						out.AllowedCredentials = make([]WebAuthnCredentialDescriptor, 0, 0)
					} else {
						out.AllowedCredentials = []WebAuthnCredentialDescriptor{}
					}
				} else {
					out.AllowedCredentials = (out.AllowedCredentials)[:0]
				}
				for !in.IsDelim(']') {
					var v10 WebAuthnCredentialDescriptor
					(v10).UnmarshalEasyJSON(in)
					out.AllowedCredentials = append(out.AllowedCredentials, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "userVerification":
			out.UserVerification = string(in.String())
		case "extensions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Extensions = make(WebAuthnAuthenticationExtensions)
				} else {
					out.Extensions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 interface{}
					if m, ok := v11.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v11.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v11 = in.Interface()
					}
					(out.Extensions)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode10(out *jwriter.Writer, in WebAuthnPublicKeyCredentialRequestOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"challenge\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Challenge)
	}
	if in.Timeout != 0 {
		const prefix string = ",\"timeout\":"
		out.RawString(prefix)
		out.Int(int(in.Timeout))
	}
	if in.RelyingPartyID != "" {
		const prefix string = ",\"rpId\":"
		out.RawString(prefix)
		out.String(string(in.RelyingPartyID))
	}
	if len(in.AllowedCredentials) != 0 {
		const prefix string = ",\"allowCredentials\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.AllowedCredentials {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.UserVerification != "" {
		const prefix string = ",\"userVerification\":"
		out.RawString(prefix)
		out.String(string(in.UserVerification))
	}
	if len(in.Extensions) != 0 {
		const prefix string = ",\"extensions\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Extensions {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				if m, ok := v16Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v16Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v16Value))
				}
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnPublicKeyCredentialRequestOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnPublicKeyCredentialRequestOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnPublicKeyCredentialRequestOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnPublicKeyCredentialRequestOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode10(l, v)
}
func easyjsonB7f3de24Decode11(in *jlexer.Lexer, out *WebAuthnPublicKeyCredentialCreationOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "challenge":
			if in.IsNull() {
				in.Skip()
				out.Challenge = nil
			} else {
				out.Challenge = in.Bytes()
			}
		case "rp":
			(out.RelyingParty).UnmarshalEasyJSON(in)
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "pubKeyCredParams":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]WebAuthnCredentialParameter, 0, 2)
					} else {
						out.Parameters = []WebAuthnCredentialParameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v18 WebAuthnCredentialParameter
					(v18).UnmarshalEasyJSON(in)
					out.Parameters = append(out.Parameters, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "authenticatorSelection":
			(out.AuthenticatorSelection).UnmarshalEasyJSON(in)
		case "timeout":
			out.Timeout = int(in.Int())
		case "excludeCredentials":
			if in.IsNull() {
				in.Skip()
				out.CredentialExcludeList = nil
			} else {
				in.Delim('[')
				if out.CredentialExcludeList == nil {
					if !in.IsDelim(']') {
						out.CredentialExcludeList = make([]WebAuthnCredentialDescriptor, 0, 0)
					} else {
						out.CredentialExcludeList = []WebAuthnCredentialDescriptor{}
					}
				} else {
					out.CredentialExcludeList = (out.CredentialExcludeList)[:0]
				}
				for !in.IsDelim(']') {
					var v19 WebAuthnCredentialDescriptor
					(v19).UnmarshalEasyJSON(in)
					out.CredentialExcludeList = append(out.CredentialExcludeList, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "extensions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Extensions = make(WebAuthnAuthenticationExtensions)
				} else {
					out.Extensions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 interface{}
					if m, ok := v20.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v20.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v20 = in.Interface()
					}
					(out.Extensions)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		case "attestation":
			out.Attestation = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode11(out *jwriter.Writer, in WebAuthnPublicKeyCredentialCreationOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"challenge\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Challenge)
	}
	{
		const prefix string = ",\"rp\":"
		out.RawString(prefix)
		(in.RelyingParty).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	if len(in.Parameters) != 0 {
		const prefix string = ",\"pubKeyCredParams\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v23, v24 := range in.Parameters {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"authenticatorSelection\":"
		out.RawString(prefix)
		(in.AuthenticatorSelection).MarshalEasyJSON(out)
	}
	if in.Timeout != 0 {
		const prefix string = ",\"timeout\":"
		out.RawString(prefix)
		out.Int(int(in.Timeout))
	}
	if len(in.CredentialExcludeList) != 0 {
		const prefix string = ",\"excludeCredentials\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v25, v26 := range in.CredentialExcludeList {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Extensions) != 0 {
		const prefix string = ",\"extensions\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v27First := true
			for v27Name, v27Value := range in.Extensions {
				if v27First {
					v27First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v27Name))
				out.RawByte(':')
				if m, ok := v27Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v27Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v27Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Attestation != "" {
		const prefix string = ",\"attestation\":"
		out.RawString(prefix)
		out.String(string(in.Attestation))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnPublicKeyCredentialCreationOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnPublicKeyCredentialCreationOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnPublicKeyCredentialCreationOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnPublicKeyCredentialCreationOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode11(l, v)
}
func easyjsonB7f3de24Decode12(in *jlexer.Lexer, out *WebAuthnCredentialParameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "alg":
			out.Algorithm = int(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode12(out *jwriter.Writer, in WebAuthnCredentialParameter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"alg\":"
		out.RawString(prefix)
		out.Int(int(in.Algorithm))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnCredentialParameter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnCredentialParameter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnCredentialParameter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnCredentialParameter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode12(l, v)
}
func easyjsonB7f3de24Decode13(in *jlexer.Lexer, out *WebAuthnCredentialEntity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode13(out *jwriter.Writer, in WebAuthnCredentialEntity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Icon != "" {
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnCredentialEntity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnCredentialEntity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnCredentialEntity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnCredentialEntity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode13(l, v)
}
func easyjsonB7f3de24Decode14(in *jlexer.Lexer, out *WebAuthnCredentialDescriptor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.CredentialID = nil
			} else {
				out.CredentialID = in.Bytes()
			}
		case "transports":
			if in.IsNull() {
				in.Skip()
				out.Transport = nil
			} else {
				in.Delim('[')
				if out.Transport == nil {
					if !in.IsDelim(']') {
						out.Transport = make([]string, 0, 4)
					} else {
						out.Transport = []string{}
					}
				} else {
					out.Transport = (out.Transport)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.Transport = append(out.Transport, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode14(out *jwriter.Writer, in WebAuthnCredentialDescriptor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Base64Bytes(in.CredentialID)
	}
	if len(in.Transport) != 0 {
		const prefix string = ",\"transports\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v32, v33 := range in.Transport {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnCredentialDescriptor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnCredentialDescriptor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnCredentialDescriptor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnCredentialDescriptor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode14(l, v)
}
func easyjsonB7f3de24Decode15(in *jlexer.Lexer, out *WebAuthnCredentialAssertion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "publicKey":
			(out.Response).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode15(out *jwriter.Writer, in WebAuthnCredentialAssertion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"publicKey\":"
		out.RawString(prefix[1:])
		(in.Response).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnCredentialAssertion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnCredentialAssertion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnCredentialAssertion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnCredentialAssertion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode15(l, v)
}
func easyjsonB7f3de24Decode16(in *jlexer.Lexer, out *WebAuthnCredential) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PublicKey":
			if in.IsNull() {
				in.Skip()
				out.PublicKey = nil
			} else {
				out.PublicKey = in.Bytes()
			}
		case "AttestationType":
			out.AttestationType = string(in.String())
		case "AAGUID":
			if in.IsNull() {
				in.Skip()
				out.AAGUID = nil
			} else {
				out.AAGUID = in.Bytes()
			}
		case "SignCount":
			out.SignCount = uint32(in.Uint32())
		case "CloneWarning":
			out.CloneWarning = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode16(out *jwriter.Writer, in WebAuthnCredential) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PublicKey\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.PublicKey)
	}
	{
		const prefix string = ",\"AttestationType\":"
		out.RawString(prefix)
		out.String(string(in.AttestationType))
	}
	{
		const prefix string = ",\"AAGUID\":"
		out.RawString(prefix)
		out.Base64Bytes(in.AAGUID)
	}
	{
		const prefix string = ",\"SignCount\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.SignCount))
	}
	{
		const prefix string = ",\"CloneWarning\":"
		out.RawString(prefix)
		out.Bool(bool(in.CloneWarning))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnCredential) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnCredential) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnCredential) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnCredential) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode16(l, v)
}
func easyjsonB7f3de24Decode17(in *jlexer.Lexer, out *WebAuthnAuthenticatorSelection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "authenticatorAttachment":
			out.AuthenticatorAttachment = string(in.String())
		case "requireResidentKey":
			out.RequireResidentKey = bool(in.Bool())
		case "residentKey":
			out.ResidentKey = string(in.String())
		case "userVerification":
			out.UserVerification = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode17(out *jwriter.Writer, in WebAuthnAuthenticatorSelection) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AuthenticatorAttachment != "" {
		const prefix string = ",\"authenticatorAttachment\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.AuthenticatorAttachment))
	}
	if in.RequireResidentKey {
		const prefix string = ",\"requireResidentKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RequireResidentKey))
	}
	if in.ResidentKey != "" {
		const prefix string = ",\"residentKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResidentKey))
	}
	if in.UserVerification != "" {
		const prefix string = ",\"userVerification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserVerification))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebAuthnAuthenticatorSelection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebAuthnAuthenticatorSelection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebAuthnAuthenticatorSelection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebAuthnAuthenticatorSelection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode17(l, v)
}
func easyjsonB7f3de24Decode18(in *jlexer.Lexer, out *WasabiVirtualStorageRoleSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MasterBucket":
			out.MasterBucket = string(in.String())
		case "AccessKey":
			out.AccessKey = string(in.String())
		case "SecretKey":
			out.SecretKey = string(in.String())
		case "UseObjectLock":
			out.UseObjectLock_Legacy_DoNotUse = bool(in.Bool())
		case "ObjectLockMode":
			out.ObjectLockMode = uint8(in.Uint8())
		case "ObjectLockDays":
			out.ObjectLockDays = int(in.Int())
		case "RemoveDeleted":
			out.RemoveDeleted = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode18(out *jwriter.Writer, in WasabiVirtualStorageRoleSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MasterBucket\":"
		out.RawString(prefix[1:])
		out.String(string(in.MasterBucket))
	}
	{
		const prefix string = ",\"AccessKey\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"SecretKey\":"
		out.RawString(prefix)
		out.String(string(in.SecretKey))
	}
	{
		const prefix string = ",\"UseObjectLock\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseObjectLock_Legacy_DoNotUse))
	}
	{
		const prefix string = ",\"ObjectLockMode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ObjectLockMode))
	}
	{
		const prefix string = ",\"ObjectLockDays\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectLockDays))
	}
	{
		const prefix string = ",\"RemoveDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.RemoveDeleted))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WasabiVirtualStorageRoleSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WasabiVirtualStorageRoleSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WasabiVirtualStorageRoleSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WasabiVirtualStorageRoleSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode18(l, v)
}
func easyjsonB7f3de24Decode19(in *jlexer.Lexer, out *VaultSnapshot) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Snapshot":
			out.Snapshot = string(in.String())
		case "EngineType":
			out.EngineType = string(in.String())
		case "Source":
			out.Source = string(in.String())
		case "CreateTime":
			out.CreateTime = int64(in.Int64())
		case "HasOriginalPathInfo":
			out.HasOriginalPathInfo = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode19(out *jwriter.Writer, in VaultSnapshot) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Snapshot\":"
		out.RawString(prefix[1:])
		out.String(string(in.Snapshot))
	}
	{
		const prefix string = ",\"EngineType\":"
		out.RawString(prefix)
		out.String(string(in.EngineType))
	}
	{
		const prefix string = ",\"Source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"CreateTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateTime))
	}
	{
		const prefix string = ",\"HasOriginalPathInfo\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasOriginalPathInfo))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VaultSnapshot) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VaultSnapshot) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VaultSnapshot) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VaultSnapshot) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode19(l, v)
}
func easyjsonB7f3de24Decode20(in *jlexer.Lexer, out *VSphereConnection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Hostname":
			out.Hostname = string(in.String())
		case "Https":
			out.Https = bool(in.Bool())
		case "AllowInvalidCertificate":
			out.AllowInvalidCertificate = bool(in.Bool())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "ThumbPrint":
			out.ThumbPrint = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode20(out *jwriter.Writer, in VSphereConnection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Hostname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"Https\":"
		out.RawString(prefix)
		out.Bool(bool(in.Https))
	}
	{
		const prefix string = ",\"AllowInvalidCertificate\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowInvalidCertificate))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"ThumbPrint\":"
		out.RawString(prefix)
		out.String(string(in.ThumbPrint))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSphereConnection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSphereConnection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSphereConnection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSphereConnection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode20(l, v)
}
func easyjsonB7f3de24Decode21(in *jlexer.Lexer, out *VSSWriterInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DisplayName":
			out.DisplayName = string(in.String())
		case "Components":
			if in.IsNull() {
				in.Skip()
				out.Components = nil
			} else {
				in.Delim('[')
				if out.Components == nil {
					if !in.IsDelim(']') {
						out.Components = make([]VSSComponent, 0, 1)
					} else {
						out.Components = []VSSComponent{}
					}
				} else {
					out.Components = (out.Components)[:0]
				}
				for !in.IsDelim(']') {
					var v40 VSSComponent
					(v40).UnmarshalEasyJSON(in)
					out.Components = append(out.Components, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode21(out *jwriter.Writer, in VSSWriterInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DisplayName\":"
		out.RawString(prefix[1:])
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"Components\":"
		out.RawString(prefix)
		if in.Components == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Components {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSSWriterInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSSWriterInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSSWriterInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSSWriterInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode21(l, v)
}
func easyjsonB7f3de24Decode22(in *jlexer.Lexer, out *VSSComponent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Path":
			out.Path = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "CType":
			out.CType = string(in.String())
		case "Selectable":
			out.Selectable = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode22(out *jwriter.Writer, in VSSComponent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"CType\":"
		out.RawString(prefix)
		out.String(string(in.CType))
	}
	{
		const prefix string = ",\"Selectable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Selectable))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSSComponent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSSComponent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSSComponent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSSComponent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode22(l, v)
}
func easyjsonB7f3de24Decode23(in *jlexer.Lexer, out *VMwareRestoreTargetOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Datacenter":
			out.Datacenter = string(in.String())
		case "Host":
			out.Host = string(in.String())
		case "DatastorePath":
			out.DatastorePath = string(in.String())
		case "Network":
			out.Network = string(in.String())
		case "Connection":
			(out.Connection).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode23(out *jwriter.Writer, in VMwareRestoreTargetOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Datacenter\":"
		out.RawString(prefix[1:])
		out.String(string(in.Datacenter))
	}
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"DatastorePath\":"
		out.RawString(prefix)
		out.String(string(in.DatastorePath))
	}
	{
		const prefix string = ",\"Network\":"
		out.RawString(prefix)
		out.String(string(in.Network))
	}
	{
		const prefix string = ",\"Connection\":"
		out.RawString(prefix)
		(in.Connection).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMwareRestoreTargetOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMwareRestoreTargetOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMwareRestoreTargetOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMwareRestoreTargetOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode23(l, v)
}
func easyjsonB7f3de24Decode24(in *jlexer.Lexer, out *VMwareNetworkInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode24(out *jwriter.Writer, in VMwareNetworkInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMwareNetworkInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMwareNetworkInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMwareNetworkInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMwareNetworkInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode24(l, v)
}
func easyjsonB7f3de24Decode25(in *jlexer.Lexer, out *VMwareMachineInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode25(out *jwriter.Writer, in VMwareMachineInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMwareMachineInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMwareMachineInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMwareMachineInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMwareMachineInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode25(l, v)
}
func easyjsonB7f3de24Decode26(in *jlexer.Lexer, out *VMwareHostInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode26(out *jwriter.Writer, in VMwareHostInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMwareHostInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMwareHostInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMwareHostInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMwareHostInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode26(l, v)
}
func easyjsonB7f3de24Decode27(in *jlexer.Lexer, out *VMwareDatastoreInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode27(out *jwriter.Writer, in VMwareDatastoreInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMwareDatastoreInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMwareDatastoreInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMwareDatastoreInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMwareDatastoreInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode27(l, v)
}
func easyjsonB7f3de24Decode28(in *jlexer.Lexer, out *VMwareDatacenterInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode28(out *jwriter.Writer, in VMwareDatacenterInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMwareDatacenterInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMwareDatacenterInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMwareDatacenterInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMwareDatacenterInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode28(l, v)
}
func easyjsonB7f3de24Decode29(in *jlexer.Lexer, out *VMwareConnection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ConnectionType":
			out.ConnectionType = VMwareConnectionType(in.String())
		case "SSH":
			(out.SSH).UnmarshalEasyJSON(in)
		case "VSphere":
			(out.VSphere).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode29(out *jwriter.Writer, in VMwareConnection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ConnectionType\":"
		out.RawString(prefix[1:])
		out.String(string(in.ConnectionType))
	}
	{
		const prefix string = ",\"SSH\":"
		out.RawString(prefix)
		(in.SSH).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"VSphere\":"
		out.RawString(prefix)
		(in.VSphere).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMwareConnection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMwareConnection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMwareConnection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMwareConnection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode29(l, v)
}
func easyjsonB7f3de24Decode30(in *jlexer.Lexer, out *VMInfoList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VMs":
			if in.IsNull() {
				in.Skip()
				out.VMs = nil
			} else {
				in.Delim('[')
				if out.VMs == nil {
					if !in.IsDelim(']') {
						out.VMs = make([]VMInfo, 0, 0)
					} else {
						out.VMs = []VMInfo{}
					}
				} else {
					out.VMs = (out.VMs)[:0]
				}
				for !in.IsDelim(']') {
					var v43 VMInfo
					(v43).UnmarshalEasyJSON(in)
					out.VMs = append(out.VMs, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode30(out *jwriter.Writer, in VMInfoList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"VMs\":"
		out.RawString(prefix[1:])
		if in.VMs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.VMs {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMInfoList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMInfoList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMInfoList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMInfoList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode30(l, v)
}
func easyjsonB7f3de24Decode31(in *jlexer.Lexer, out *VMInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "CPUCores":
			out.CPUCores = int(in.Int())
		case "RamBytes":
			out.RamBytes = int64(in.Int64())
		case "FirmwareType":
			out.FirmwareType = string(in.String())
		case "ConfigPath":
			out.ConfigPath = string(in.String())
		case "Disks":
			if in.IsNull() {
				in.Skip()
				out.Disks = nil
			} else {
				in.Delim('[')
				if out.Disks == nil {
					if !in.IsDelim(']') {
						out.Disks = make([]VMDiskInfo, 0, 1)
					} else {
						out.Disks = []VMDiskInfo{}
					}
				} else {
					out.Disks = (out.Disks)[:0]
				}
				for !in.IsDelim(']') {
					var v46 VMDiskInfo
					(v46).UnmarshalEasyJSON(in)
					out.Disks = append(out.Disks, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode31(out *jwriter.Writer, in VMInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"CPUCores\":"
		out.RawString(prefix)
		out.Int(int(in.CPUCores))
	}
	{
		const prefix string = ",\"RamBytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.RamBytes))
	}
	{
		const prefix string = ",\"FirmwareType\":"
		out.RawString(prefix)
		out.String(string(in.FirmwareType))
	}
	{
		const prefix string = ",\"ConfigPath\":"
		out.RawString(prefix)
		out.String(string(in.ConfigPath))
	}
	{
		const prefix string = ",\"Disks\":"
		out.RawString(prefix)
		if in.Disks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Disks {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode31(l, v)
}
func easyjsonB7f3de24Decode32(in *jlexer.Lexer, out *VMDiskInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Path":
			out.Path = string(in.String())
		case "Size":
			out.Size = int64(in.Int64())
		case "Controller":
			out.Controller = int64(in.Int64())
		case "DeviceNum":
			out.DeviceNum = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode32(out *jwriter.Writer, in VMDiskInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"Controller\":"
		out.RawString(prefix)
		out.Int64(int64(in.Controller))
	}
	{
		const prefix string = ",\"DeviceNum\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeviceNum))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMDiskInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMDiskInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMDiskInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMDiskInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode32(l, v)
}
func easyjsonB7f3de24Decode33(in *jlexer.Lexer, out *VMDKSnapshotViewOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Enabled":
			out.Enabled = bool(in.Bool())
		case "PartitionGUID":
			out.PartitionGUID = string(in.String())
		case "ListPath":
			out.ListPath = string(in.String())
		case "PartitionName":
			out.PartitionName = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode33(out *jwriter.Writer, in VMDKSnapshotViewOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"PartitionGUID\":"
		out.RawString(prefix)
		out.String(string(in.PartitionGUID))
	}
	{
		const prefix string = ",\"ListPath\":"
		out.RawString(prefix)
		out.String(string(in.ListPath))
	}
	{
		const prefix string = ",\"PartitionName\":"
		out.RawString(prefix)
		out.String(string(in.PartitionName))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMDKSnapshotViewOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMDKSnapshotViewOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMDKSnapshotViewOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMDKSnapshotViewOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode33(l, v)
}
func easyjsonB7f3de24Decode34(in *jlexer.Lexer, out *UserServerConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RandomDelaySecs":
			out.RandomDelaySecs = uint64(in.Uint64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode34(out *jwriter.Writer, in UserServerConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RandomDelaySecs != 0 {
		const prefix string = ",\"RandomDelaySecs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.RandomDelaySecs))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserServerConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserServerConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserServerConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserServerConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode34(l, v)
}
func easyjsonB7f3de24Decode35(in *jlexer.Lexer, out *UserProfileFragment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode35(out *jwriter.Writer, in UserProfileFragment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserProfileFragment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserProfileFragment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserProfileFragment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserProfileFragment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode35(l, v)
}
func easyjsonB7f3de24Decode36(in *jlexer.Lexer, out *UserProfileConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "AccountName":
			out.AccountName = string(in.String())
		case "LocalTimezone":
			out.LocalTimezone = string(in.String())
		case "LanguageCode":
			out.LanguageCode = string(in.String())
		case "OrganizationID":
			out.OrganizationID = string(in.String())
		case "GroupID":
			out.GroupID = string(in.String())
		case "Emails":
			if in.IsNull() {
				in.Skip()
				out.Emails = nil
			} else {
				in.Delim('[')
				if out.Emails == nil {
					if !in.IsDelim(']') {
						out.Emails = make([]string, 0, 4)
					} else {
						out.Emails = []string{}
					}
				} else {
					out.Emails = (out.Emails)[:0]
				}
				for !in.IsDelim(']') {
					var v49 string
					v49 = string(in.String())
					out.Emails = append(out.Emails, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "OverrideEmailSettings":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.OverrideEmailSettings = make(map[string]UserCustomEmailSettings)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v50 UserCustomEmailSettings
					(v50).UnmarshalEasyJSON(in)
					(out.OverrideEmailSettings)[key] = v50
					in.WantComma()
				}
				in.Delim('}')
			}
		case "SendEmailReports":
			out.SendEmailReports = bool(in.Bool())
		case "Destinations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Destinations = make(map[string]DestinationConfig)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v51 DestinationConfig
					(v51).UnmarshalEasyJSON(in)
					(out.Destinations)[key] = v51
					in.WantComma()
				}
				in.Delim('}')
			}
		case "SupportsDeviceAssociations":
			out.SupportsDeviceAssociations = bool(in.Bool())
		case "Sources":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Sources = make(map[string]SourceConfig)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v52 SourceConfig
					(v52).UnmarshalEasyJSON(in)
					(out.Sources)[key] = v52
					in.WantComma()
				}
				in.Delim('}')
			}
		case "BackupRules":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.BackupRules = make(map[string]BackupRuleConfig)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v53 BackupRuleConfig
					(v53).UnmarshalEasyJSON(in)
					(out.BackupRules)[key] = v53
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Devices":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Devices = make(map[string]DeviceConfig)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v54 DeviceConfig
					(v54).UnmarshalEasyJSON(in)
					(out.Devices)[key] = v54
					in.WantComma()
				}
				in.Delim('}')
			}
		case "IsSuspended":
			out.IsSuspended = bool(in.Bool())
		case "LastSuspended":
			out.LastSuspended = int64(in.Int64())
		case "AllProtectedItemsQuotaEnabled":
			out.AllProtectedItemsQuotaEnabled = bool(in.Bool())
		case "AllProtectedItemsQuotaBytes":
			out.AllProtectedItemsQuotaBytes = int64(in.Int64())
		case "MaximumDevices":
			out.MaximumDevices = int64(in.Int64())
		case "QuotaOffice365ProtectedAccounts":
			out.QuotaOffice365ProtectedAccounts = int64(in.Int64())
		case "QuotaHyperVGuests":
			out.QuotaHyperVGuests = int64(in.Int64())
		case "QuotaVMwareGuests":
			out.QuotaVMwareGuests = int64(in.Int64())
		case "PolicyID":
			out.PolicyID = string(in.String())
		case "Policy":
			(out.Policy).UnmarshalEasyJSON(in)
		case "PasswordFormat":
			out.PasswordFormat = int(in.Int())
		case "PasswordHash":
			out.PasswordHash = string(in.String())
		case "PasswordRecovery":
			out.PasswordRecovery = string(in.String())
		case "AllowPasswordLogin":
			out.AllowPasswordLogin = bool(in.Bool())
		case "AllowPasswordAndTOTPLogin":
			out.AllowPasswordAndTOTPLogin = bool(in.Bool())
		case "TOTPKeyEncryptionFormat":
			out.TOTPKeyEncryptionFormat = int(in.Int())
		case "TOTPKey":
			out.TOTPKey = string(in.String())
		case "RequirePasswordChange":
			out.RequirePasswordChange = bool(in.Bool())
		case "CreateTime":
			out.CreateTime = int64(in.Int64())
		case "CreationGUID":
			out.CreationGUID = string(in.String())
		case "ServerConfig":
			(out.ServerConfig).UnmarshalEasyJSON(in)
		case "AutoStorageTemplateGUID":
			out.AutoStorageTemplateGUID = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode36(out *jwriter.Writer, in UserProfileConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"AccountName\":"
		out.RawString(prefix)
		out.String(string(in.AccountName))
	}
	{
		const prefix string = ",\"LocalTimezone\":"
		out.RawString(prefix)
		out.String(string(in.LocalTimezone))
	}
	{
		const prefix string = ",\"LanguageCode\":"
		out.RawString(prefix)
		out.String(string(in.LanguageCode))
	}
	if in.OrganizationID != "" {
		const prefix string = ",\"OrganizationID\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"GroupID\":"
		out.RawString(prefix)
		out.String(string(in.GroupID))
	}
	{
		const prefix string = ",\"Emails\":"
		out.RawString(prefix)
		if in.Emails == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v55, v56 := range in.Emails {
				if v55 > 0 {
					out.RawByte(',')
				}
				out.String(string(v56))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"OverrideEmailSettings\":"
		out.RawString(prefix)
		if in.OverrideEmailSettings == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v57First := true
			for v57Name, v57Value := range in.OverrideEmailSettings {
				if v57First {
					v57First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v57Name))
				out.RawByte(':')
				(v57Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"SendEmailReports\":"
		out.RawString(prefix)
		out.Bool(bool(in.SendEmailReports))
	}
	{
		const prefix string = ",\"Destinations\":"
		out.RawString(prefix)
		if in.Destinations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v58First := true
			for v58Name, v58Value := range in.Destinations {
				if v58First {
					v58First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v58Name))
				out.RawByte(':')
				(v58Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"SupportsDeviceAssociations\":"
		out.RawString(prefix)
		out.Bool(bool(in.SupportsDeviceAssociations))
	}
	{
		const prefix string = ",\"Sources\":"
		out.RawString(prefix)
		if in.Sources == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v59First := true
			for v59Name, v59Value := range in.Sources {
				if v59First {
					v59First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v59Name))
				out.RawByte(':')
				(v59Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"BackupRules\":"
		out.RawString(prefix)
		if in.BackupRules == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v60First := true
			for v60Name, v60Value := range in.BackupRules {
				if v60First {
					v60First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v60Name))
				out.RawByte(':')
				(v60Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Devices\":"
		out.RawString(prefix)
		if in.Devices == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v61First := true
			for v61Name, v61Value := range in.Devices {
				if v61First {
					v61First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v61Name))
				out.RawByte(':')
				(v61Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"IsSuspended\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSuspended))
	}
	if in.LastSuspended != 0 {
		const prefix string = ",\"LastSuspended\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastSuspended))
	}
	{
		const prefix string = ",\"AllProtectedItemsQuotaEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllProtectedItemsQuotaEnabled))
	}
	{
		const prefix string = ",\"AllProtectedItemsQuotaBytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.AllProtectedItemsQuotaBytes))
	}
	{
		const prefix string = ",\"MaximumDevices\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaximumDevices))
	}
	{
		const prefix string = ",\"QuotaOffice365ProtectedAccounts\":"
		out.RawString(prefix)
		out.Int64(int64(in.QuotaOffice365ProtectedAccounts))
	}
	{
		const prefix string = ",\"QuotaHyperVGuests\":"
		out.RawString(prefix)
		out.Int64(int64(in.QuotaHyperVGuests))
	}
	{
		const prefix string = ",\"QuotaVMwareGuests\":"
		out.RawString(prefix)
		out.Int64(int64(in.QuotaVMwareGuests))
	}
	{
		const prefix string = ",\"PolicyID\":"
		out.RawString(prefix)
		out.String(string(in.PolicyID))
	}
	{
		const prefix string = ",\"Policy\":"
		out.RawString(prefix)
		(in.Policy).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"PasswordFormat\":"
		out.RawString(prefix)
		out.Int(int(in.PasswordFormat))
	}
	{
		const prefix string = ",\"PasswordHash\":"
		out.RawString(prefix)
		out.String(string(in.PasswordHash))
	}
	if in.PasswordRecovery != "" {
		const prefix string = ",\"PasswordRecovery\":"
		out.RawString(prefix)
		out.String(string(in.PasswordRecovery))
	}
	{
		const prefix string = ",\"AllowPasswordLogin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowPasswordLogin))
	}
	{
		const prefix string = ",\"AllowPasswordAndTOTPLogin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowPasswordAndTOTPLogin))
	}
	{
		const prefix string = ",\"TOTPKeyEncryptionFormat\":"
		out.RawString(prefix)
		out.Int(int(in.TOTPKeyEncryptionFormat))
	}
	{
		const prefix string = ",\"TOTPKey\":"
		out.RawString(prefix)
		out.String(string(in.TOTPKey))
	}
	{
		const prefix string = ",\"RequirePasswordChange\":"
		out.RawString(prefix)
		out.Bool(bool(in.RequirePasswordChange))
	}
	{
		const prefix string = ",\"CreateTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateTime))
	}
	{
		const prefix string = ",\"CreationGUID\":"
		out.RawString(prefix)
		out.String(string(in.CreationGUID))
	}
	if true {
		const prefix string = ",\"ServerConfig\":"
		out.RawString(prefix)
		(in.ServerConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"AutoStorageTemplateGUID\":"
		out.RawString(prefix)
		out.String(string(in.AutoStorageTemplateGUID))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserProfileConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserProfileConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserProfileConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserProfileConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode36(l, v)
}
func easyjsonB7f3de24Decode37(in *jlexer.Lexer, out *UserPolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PreventRequestStorageVault":
			out.PreventRequestStorageVault = bool(in.Bool())
		case "PreventAddCustomStorageVault":
			out.PreventAddCustomStorageVault = bool(in.Bool())
		case "PreventEditStorageVault":
			out.PreventEditStorageVault = bool(in.Bool())
		case "HideCloudStorageBranding":
			out.HideCloudStorageBranding = bool(in.Bool())
		case "PreventDeleteStorageVault":
			out.PreventDeleteStorageVault = bool(in.Bool())
		case "StorageVaultProviders":
			(out.StorageVaultProviders).UnmarshalEasyJSON(in)
		case "DefaultNewStorageVault":
			out.DefaultNewStorageVault = string(in.String())
		case "PreventNewProtectedItem":
			out.PreventNewProtectedItem = bool(in.Bool())
		case "PreventEditProtectedItem":
			out.PreventEditProtectedItem = bool(in.Bool())
		case "PreventDeleteProtectedItem":
			out.PreventDeleteProtectedItem = bool(in.Bool())
		case "ProtectedItemEngineTypes":
			(out.ProtectedItemEngineTypes).UnmarshalEasyJSON(in)
		case "FileAndFolderMandatoryExclusions":
			if in.IsNull() {
				in.Skip()
				out.FileAndFolderMandatoryExclusions = nil
			} else {
				in.Delim('[')
				if out.FileAndFolderMandatoryExclusions == nil {
					if !in.IsDelim(']') {
						out.FileAndFolderMandatoryExclusions = make([]ExtraFileExclusion, 0, 1)
					} else {
						out.FileAndFolderMandatoryExclusions = []ExtraFileExclusion{}
					}
				} else {
					out.FileAndFolderMandatoryExclusions = (out.FileAndFolderMandatoryExclusions)[:0]
				}
				for !in.IsDelim(']') {
					var v62 ExtraFileExclusion
					(v62).UnmarshalEasyJSON(in)
					out.FileAndFolderMandatoryExclusions = append(out.FileAndFolderMandatoryExclusions, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ModeScheduleSkipAlreadyRunning":
			out.ModeScheduleSkipAlreadyRunning = DefaultSettingMode(in.Int())
		case "ModeScheduleLastJobFailDoRetry":
			out.ModeScheduleLastJobFailDoRetry = DefaultSettingMode(in.Int())
		case "ModeLastJobFailDoRetryTime":
			out.ModeLastJobFailDoRetryTime = uint64(in.Uint64())
		case "ModeLastJobFailDoRetryCount":
			out.ModeLastJobFailDoRetryCount = uint64(in.Uint64())
		case "ModeAdminResetPassword":
			out.ModeAdminResetPassword = DefaultSettingMode(in.Int())
		case "ModeAdminViewFilenames":
			out.ModeAdminViewFilenames = DefaultSettingMode(in.Int())
		case "ModeRequireUserResetPassword":
			out.ModeRequireUserResetPassword = DefaultSettingMode(in.Int())
		case "PreventDeleteSingleSnapshots":
			out.PreventDeleteSingleSnapshots = bool(in.Bool())
		case "PreventChangeAccountPassword":
			out.PreventChangeAccountPassword = bool(in.Bool())
		case "PreventChangeEmailSettings":
			out.PreventChangeEmailSettings = bool(in.Bool())
		case "PreventChangeAccountName":
			out.PreventChangeAccountName = bool(in.Bool())
		case "PreventOpenAppUI":
			out.PreventOpenAppUI = bool(in.Bool())
		case "RequirePasswordOpenAppUI":
			out.RequirePasswordOpenAppUI = bool(in.Bool())
		case "HideAppImport":
			out.HideAppImport = bool(in.Bool())
		case "HideAppVersion":
			out.HideAppVersion = bool(in.Bool())
		case "PreventOpenWebUI":
			out.PreventOpenWebUI = bool(in.Bool())
		case "PreventViewDeviceNames":
			out.PreventViewDeviceNames = bool(in.Bool())
		case "DefaultEmailReports":
			(out.DefaultEmailReports).UnmarshalEasyJSON(in)
		case "DefaultStorageVaultRetention":
			(out.DefaultStorageVaultRetention).UnmarshalEasyJSON(in)
		case "EnforceStorageVaultRetention":
			out.EnforceStorageVaultRetention = bool(in.Bool())
		case "PreventProtectedItemRetention":
			out.PreventProtectedItemRetention = bool(in.Bool())
		case "AllowEditObjectLockRetention":
			out.AllowEditObjectLockRetention = bool(in.Bool())
		case "DefaultSources":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.DefaultSources = make(map[string]SourceConfig)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v63 SourceConfig
					(v63).UnmarshalEasyJSON(in)
					(out.DefaultSources)[key] = v63
					in.WantComma()
				}
				in.Delim('}')
			}
		case "DefaultSourcesBackupRules":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.DefaultSourcesBackupRules = make(map[string]BackupRuleConfig)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v64 BackupRuleConfig
					(v64).UnmarshalEasyJSON(in)
					(out.DefaultSourcesBackupRules)[key] = v64
					in.WantComma()
				}
				in.Delim('}')
			}
		case "DefaultSourcesWithOSRestriction":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.DefaultSourcesWithOSRestriction = make(map[string]DefaultSourceWithOSRestriction)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v65 DefaultSourceWithOSRestriction
					(v65).UnmarshalEasyJSON(in)
					(out.DefaultSourcesWithOSRestriction)[key] = v65
					in.WantComma()
				}
				in.Delim('}')
			}
		case "DefaultBackupRules":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.DefaultBackupRules = make(map[string]BackupRuleConfig)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v66 BackupRuleConfig
					(v66).UnmarshalEasyJSON(in)
					(out.DefaultBackupRules)[key] = v66
					in.WantComma()
				}
				in.Delim('}')
			}
		case "RandomDelaySecs":
			out.RandomDelaySecs = uint64(in.Uint64())
		case "RotateStorageVaultKeysHours":
			out.RotateStorageVaultKeysHours = int(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode37(out *jwriter.Writer, in UserPolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PreventRequestStorageVault\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.PreventRequestStorageVault))
	}
	{
		const prefix string = ",\"PreventAddCustomStorageVault\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventAddCustomStorageVault))
	}
	{
		const prefix string = ",\"PreventEditStorageVault\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventEditStorageVault))
	}
	{
		const prefix string = ",\"HideCloudStorageBranding\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideCloudStorageBranding))
	}
	{
		const prefix string = ",\"PreventDeleteStorageVault\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventDeleteStorageVault))
	}
	{
		const prefix string = ",\"StorageVaultProviders\":"
		out.RawString(prefix)
		(in.StorageVaultProviders).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"DefaultNewStorageVault\":"
		out.RawString(prefix)
		out.String(string(in.DefaultNewStorageVault))
	}
	{
		const prefix string = ",\"PreventNewProtectedItem\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventNewProtectedItem))
	}
	{
		const prefix string = ",\"PreventEditProtectedItem\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventEditProtectedItem))
	}
	{
		const prefix string = ",\"PreventDeleteProtectedItem\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventDeleteProtectedItem))
	}
	{
		const prefix string = ",\"ProtectedItemEngineTypes\":"
		out.RawString(prefix)
		(in.ProtectedItemEngineTypes).MarshalEasyJSON(out)
	}
	if len(in.FileAndFolderMandatoryExclusions) != 0 {
		const prefix string = ",\"FileAndFolderMandatoryExclusions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v67, v68 := range in.FileAndFolderMandatoryExclusions {
				if v67 > 0 {
					out.RawByte(',')
				}
				(v68).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.ModeScheduleSkipAlreadyRunning != 0 {
		const prefix string = ",\"ModeScheduleSkipAlreadyRunning\":"
		out.RawString(prefix)
		out.Int(int(in.ModeScheduleSkipAlreadyRunning))
	}
	if in.ModeScheduleLastJobFailDoRetry != 0 {
		const prefix string = ",\"ModeScheduleLastJobFailDoRetry\":"
		out.RawString(prefix)
		out.Int(int(in.ModeScheduleLastJobFailDoRetry))
	}
	if in.ModeLastJobFailDoRetryTime != 0 {
		const prefix string = ",\"ModeLastJobFailDoRetryTime\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ModeLastJobFailDoRetryTime))
	}
	if in.ModeLastJobFailDoRetryCount != 0 {
		const prefix string = ",\"ModeLastJobFailDoRetryCount\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ModeLastJobFailDoRetryCount))
	}
	if in.ModeAdminResetPassword != 0 {
		const prefix string = ",\"ModeAdminResetPassword\":"
		out.RawString(prefix)
		out.Int(int(in.ModeAdminResetPassword))
	}
	if in.ModeAdminViewFilenames != 0 {
		const prefix string = ",\"ModeAdminViewFilenames\":"
		out.RawString(prefix)
		out.Int(int(in.ModeAdminViewFilenames))
	}
	if in.ModeRequireUserResetPassword != 0 {
		const prefix string = ",\"ModeRequireUserResetPassword\":"
		out.RawString(prefix)
		out.Int(int(in.ModeRequireUserResetPassword))
	}
	{
		const prefix string = ",\"PreventDeleteSingleSnapshots\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventDeleteSingleSnapshots))
	}
	{
		const prefix string = ",\"PreventChangeAccountPassword\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventChangeAccountPassword))
	}
	{
		const prefix string = ",\"PreventChangeEmailSettings\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventChangeEmailSettings))
	}
	{
		const prefix string = ",\"PreventChangeAccountName\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventChangeAccountName))
	}
	{
		const prefix string = ",\"PreventOpenAppUI\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventOpenAppUI))
	}
	{
		const prefix string = ",\"RequirePasswordOpenAppUI\":"
		out.RawString(prefix)
		out.Bool(bool(in.RequirePasswordOpenAppUI))
	}
	{
		const prefix string = ",\"HideAppImport\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideAppImport))
	}
	{
		const prefix string = ",\"HideAppVersion\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideAppVersion))
	}
	{
		const prefix string = ",\"PreventOpenWebUI\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventOpenWebUI))
	}
	{
		const prefix string = ",\"PreventViewDeviceNames\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventViewDeviceNames))
	}
	{
		const prefix string = ",\"DefaultEmailReports\":"
		out.RawString(prefix)
		(in.DefaultEmailReports).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"DefaultStorageVaultRetention\":"
		out.RawString(prefix)
		(in.DefaultStorageVaultRetention).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"EnforceStorageVaultRetention\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnforceStorageVaultRetention))
	}
	{
		const prefix string = ",\"PreventProtectedItemRetention\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreventProtectedItemRetention))
	}
	{
		const prefix string = ",\"AllowEditObjectLockRetention\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowEditObjectLockRetention))
	}
	{
		const prefix string = ",\"DefaultSources\":"
		out.RawString(prefix)
		if in.DefaultSources == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v69First := true
			for v69Name, v69Value := range in.DefaultSources {
				if v69First {
					v69First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v69Name))
				out.RawByte(':')
				(v69Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"DefaultSourcesBackupRules\":"
		out.RawString(prefix)
		if in.DefaultSourcesBackupRules == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v70First := true
			for v70Name, v70Value := range in.DefaultSourcesBackupRules {
				if v70First {
					v70First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v70Name))
				out.RawByte(':')
				(v70Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"DefaultSourcesWithOSRestriction\":"
		out.RawString(prefix)
		if in.DefaultSourcesWithOSRestriction == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v71First := true
			for v71Name, v71Value := range in.DefaultSourcesWithOSRestriction {
				if v71First {
					v71First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v71Name))
				out.RawByte(':')
				(v71Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"DefaultBackupRules\":"
		out.RawString(prefix)
		if in.DefaultBackupRules == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v72First := true
			for v72Name, v72Value := range in.DefaultBackupRules {
				if v72First {
					v72First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v72Name))
				out.RawByte(':')
				(v72Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if in.RandomDelaySecs != 0 {
		const prefix string = ",\"RandomDelaySecs\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.RandomDelaySecs))
	}
	{
		const prefix string = ",\"RotateStorageVaultKeysHours\":"
		out.RawString(prefix)
		out.Int(int(in.RotateStorageVaultKeysHours))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserPolicy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPolicy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPolicy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPolicy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode37(l, v)
}
func easyjsonB7f3de24Decode38(in *jlexer.Lexer, out *UserOnServer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ServerID":
			out.ServerID = int(in.Int())
		case "Username":
			out.Username = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode38(out *jwriter.Writer, in UserOnServer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ServerID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ServerID))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserOnServer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserOnServer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserOnServer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserOnServer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode38(l, v)
}
func easyjsonB7f3de24Decode39(in *jlexer.Lexer, out *UserGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CreatedAt":
			out.CreatedAt = int64(in.Int64())
		case "OrganizationID":
			out.OrganizationID = string(in.String())
		case "Name":
			out.Name = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode39(out *jwriter.Writer, in UserGroup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CreatedAt))
	}
	{
		const prefix string = ",\"OrganizationID\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode39(l, v)
}
func easyjsonB7f3de24Decode40(in *jlexer.Lexer, out *UserCustomEmailSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Reports":
			if in.IsNull() {
				in.Skip()
				out.Reports = nil
			} else {
				in.Delim('[')
				if out.Reports == nil {
					if !in.IsDelim(']') {
						out.Reports = make([]EmailReportConfig, 0, 0)
					} else {
						out.Reports = []EmailReportConfig{}
					}
				} else {
					out.Reports = (out.Reports)[:0]
				}
				for !in.IsDelim(']') {
					var v73 EmailReportConfig
					(v73).UnmarshalEasyJSON(in)
					out.Reports = append(out.Reports, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode40(out *jwriter.Writer, in UserCustomEmailSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Reports\":"
		out.RawString(prefix[1:])
		if in.Reports == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v74, v75 := range in.Reports {
				if v74 > 0 {
					out.RawByte(',')
				}
				(v75).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserCustomEmailSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserCustomEmailSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserCustomEmailSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserCustomEmailSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode40(l, v)
}
func easyjsonB7f3de24Decode41(in *jlexer.Lexer, out *UpdateCampaignStatusDeviceEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "DeviceID":
			out.DeviceID = string(in.String())
		case "Status":
			out.Status = UpdateStatus(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode41(out *jwriter.Writer, in UpdateCampaignStatusDeviceEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"DeviceID\":"
		out.RawString(prefix)
		out.String(string(in.DeviceID))
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateCampaignStatusDeviceEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateCampaignStatusDeviceEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateCampaignStatusDeviceEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateCampaignStatusDeviceEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode41(l, v)
}
func easyjsonB7f3de24Decode42(in *jlexer.Lexer, out *UpdateCampaignStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Active":
			out.Active = bool(in.Bool())
		case "UpgradeOlder":
			out.UpgradeOlder = bool(in.Bool())
		case "ReinstallCurrentVer":
			out.ReinstallCurrentVer = bool(in.Bool())
		case "DowngradeNewer":
			out.DowngradeNewer = bool(in.Bool())
		case "ForceUpgradeRunning":
			out.ForceUpgradeRunning = bool(in.Bool())
		case "ApplyDeviceFilter":
			out.ApplyDeviceFilter = bool(in.Bool())
		case "DeviceFilter":
			(out.DeviceFilter).UnmarshalEasyJSON(in)
		case "StartTime":
			out.StartTime = int64(in.Int64())
		case "TargetVersion":
			out.TargetVersion = string(in.String())
		case "Devices":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make([]UpdateCampaignStatusDeviceEntry, 0, 1)
					} else {
						out.Devices = []UpdateCampaignStatusDeviceEntry{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v76 UpdateCampaignStatusDeviceEntry
					(v76).UnmarshalEasyJSON(in)
					out.Devices = append(out.Devices, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode42(out *jwriter.Writer, in UpdateCampaignStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Active\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Active))
	}
	{
		const prefix string = ",\"UpgradeOlder\":"
		out.RawString(prefix)
		out.Bool(bool(in.UpgradeOlder))
	}
	{
		const prefix string = ",\"ReinstallCurrentVer\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReinstallCurrentVer))
	}
	{
		const prefix string = ",\"DowngradeNewer\":"
		out.RawString(prefix)
		out.Bool(bool(in.DowngradeNewer))
	}
	{
		const prefix string = ",\"ForceUpgradeRunning\":"
		out.RawString(prefix)
		out.Bool(bool(in.ForceUpgradeRunning))
	}
	{
		const prefix string = ",\"ApplyDeviceFilter\":"
		out.RawString(prefix)
		out.Bool(bool(in.ApplyDeviceFilter))
	}
	{
		const prefix string = ",\"DeviceFilter\":"
		out.RawString(prefix)
		(in.DeviceFilter).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"StartTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartTime))
	}
	{
		const prefix string = ",\"TargetVersion\":"
		out.RawString(prefix)
		out.String(string(in.TargetVersion))
	}
	{
		const prefix string = ",\"Devices\":"
		out.RawString(prefix)
		if in.Devices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v77, v78 := range in.Devices {
				if v77 > 0 {
					out.RawByte(',')
				}
				(v78).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateCampaignStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateCampaignStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateCampaignStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateCampaignStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode42(l, v)
}
func easyjsonB7f3de24Decode43(in *jlexer.Lexer, out *UpdateCampaignProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Active":
			out.Active = bool(in.Bool())
		case "UpgradeOlder":
			out.UpgradeOlder = bool(in.Bool())
		case "ReinstallCurrentVer":
			out.ReinstallCurrentVer = bool(in.Bool())
		case "DowngradeNewer":
			out.DowngradeNewer = bool(in.Bool())
		case "ForceUpgradeRunning":
			out.ForceUpgradeRunning = bool(in.Bool())
		case "ApplyDeviceFilter":
			out.ApplyDeviceFilter = bool(in.Bool())
		case "DeviceFilter":
			(out.DeviceFilter).UnmarshalEasyJSON(in)
		case "StartTime":
			out.StartTime = int64(in.Int64())
		case "TargetVersion":
			out.TargetVersion = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode43(out *jwriter.Writer, in UpdateCampaignProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Active\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Active))
	}
	{
		const prefix string = ",\"UpgradeOlder\":"
		out.RawString(prefix)
		out.Bool(bool(in.UpgradeOlder))
	}
	{
		const prefix string = ",\"ReinstallCurrentVer\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReinstallCurrentVer))
	}
	{
		const prefix string = ",\"DowngradeNewer\":"
		out.RawString(prefix)
		out.Bool(bool(in.DowngradeNewer))
	}
	{
		const prefix string = ",\"ForceUpgradeRunning\":"
		out.RawString(prefix)
		out.Bool(bool(in.ForceUpgradeRunning))
	}
	{
		const prefix string = ",\"ApplyDeviceFilter\":"
		out.RawString(prefix)
		out.Bool(bool(in.ApplyDeviceFilter))
	}
	{
		const prefix string = ",\"DeviceFilter\":"
		out.RawString(prefix)
		(in.DeviceFilter).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"StartTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartTime))
	}
	{
		const prefix string = ",\"TargetVersion\":"
		out.RawString(prefix)
		out.String(string(in.TargetVersion))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateCampaignProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateCampaignProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateCampaignProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateCampaignProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode43(l, v)
}
func easyjsonB7f3de24Decode44(in *jlexer.Lexer, out *UpdateCampaignOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Active":
			out.Active = bool(in.Bool())
		case "UpgradeOlder":
			out.UpgradeOlder = bool(in.Bool())
		case "ReinstallCurrentVer":
			out.ReinstallCurrentVer = bool(in.Bool())
		case "DowngradeNewer":
			out.DowngradeNewer = bool(in.Bool())
		case "ForceUpgradeRunning":
			out.ForceUpgradeRunning = bool(in.Bool())
		case "ApplyDeviceFilter":
			out.ApplyDeviceFilter = bool(in.Bool())
		case "DeviceFilter":
			(out.DeviceFilter).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode44(out *jwriter.Writer, in UpdateCampaignOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Active\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Active))
	}
	{
		const prefix string = ",\"UpgradeOlder\":"
		out.RawString(prefix)
		out.Bool(bool(in.UpgradeOlder))
	}
	{
		const prefix string = ",\"ReinstallCurrentVer\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReinstallCurrentVer))
	}
	{
		const prefix string = ",\"DowngradeNewer\":"
		out.RawString(prefix)
		out.Bool(bool(in.DowngradeNewer))
	}
	{
		const prefix string = ",\"ForceUpgradeRunning\":"
		out.RawString(prefix)
		out.Bool(bool(in.ForceUpgradeRunning))
	}
	{
		const prefix string = ",\"ApplyDeviceFilter\":"
		out.RawString(prefix)
		out.Bool(bool(in.ApplyDeviceFilter))
	}
	{
		const prefix string = ",\"DeviceFilter\":"
		out.RawString(prefix)
		(in.DeviceFilter).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateCampaignOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateCampaignOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateCampaignOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateCampaignOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode44(l, v)
}
func easyjsonB7f3de24Decode45(in *jlexer.Lexer, out *UpdateCampaignDeviceStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = UpdateStatus(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode45(out *jwriter.Writer, in UpdateCampaignDeviceStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateCampaignDeviceStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateCampaignDeviceStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateCampaignDeviceStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateCampaignDeviceStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode45(l, v)
}
func easyjsonB7f3de24Decode46(in *jlexer.Lexer, out *UninstallConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UninstallFlag":
			out.UninstallFlag = bool(in.Bool())
		case "RemoveConfigFile":
			out.RemoveConfigFile = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode46(out *jwriter.Writer, in UninstallConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UninstallFlag\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.UninstallFlag))
	}
	{
		const prefix string = ",\"RemoveConfigFile\":"
		out.RawString(prefix)
		out.Bool(bool(in.RemoveConfigFile))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UninstallConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UninstallConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UninstallConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UninstallConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode46(l, v)
}
func easyjsonB7f3de24Decode47(in *jlexer.Lexer, out *U2FSignResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ChallengeID":
			out.ChallengeID = string(in.String())
		case "KeyHandle":
			out.KeyHandle = string(in.String())
		case "Signature":
			out.Signature = string(in.String())
		case "ClientData":
			out.ClientData = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode47(out *jwriter.Writer, in U2FSignResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ChallengeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChallengeID))
	}
	{
		const prefix string = ",\"KeyHandle\":"
		out.RawString(prefix)
		out.String(string(in.KeyHandle))
	}
	{
		const prefix string = ",\"Signature\":"
		out.RawString(prefix)
		out.String(string(in.Signature))
	}
	{
		const prefix string = ",\"ClientData\":"
		out.RawString(prefix)
		out.String(string(in.ClientData))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v U2FSignResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v U2FSignResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *U2FSignResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *U2FSignResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode47(l, v)
}
func easyjsonB7f3de24Decode48(in *jlexer.Lexer, out *U2FSignRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ChallengeID":
			out.ChallengeID = string(in.String())
		case "ChallengeData":
			out.ChallengeData = string(in.String())
		case "AppID":
			out.AppID = string(in.String())
		case "RegisteredKeys":
			if in.IsNull() {
				in.Skip()
				out.RegisteredKeys = nil
			} else {
				in.Delim('[')
				if out.RegisteredKeys == nil {
					if !in.IsDelim(']') {
						out.RegisteredKeys = make([]U2FRegisteredKey, 0, 1)
					} else {
						out.RegisteredKeys = []U2FRegisteredKey{}
					}
				} else {
					out.RegisteredKeys = (out.RegisteredKeys)[:0]
				}
				for !in.IsDelim(']') {
					var v79 U2FRegisteredKey
					(v79).UnmarshalEasyJSON(in)
					out.RegisteredKeys = append(out.RegisteredKeys, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode48(out *jwriter.Writer, in U2FSignRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ChallengeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChallengeID))
	}
	{
		const prefix string = ",\"ChallengeData\":"
		out.RawString(prefix)
		out.String(string(in.ChallengeData))
	}
	{
		const prefix string = ",\"AppID\":"
		out.RawString(prefix)
		out.String(string(in.AppID))
	}
	{
		const prefix string = ",\"RegisteredKeys\":"
		out.RawString(prefix)
		if in.RegisteredKeys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v80, v81 := range in.RegisteredKeys {
				if v80 > 0 {
					out.RawByte(',')
				}
				(v81).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v U2FSignRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v U2FSignRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *U2FSignRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *U2FSignRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode48(l, v)
}
func easyjsonB7f3de24Decode49(in *jlexer.Lexer, out *U2FRegistrationChallengeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "ChallengeID":
			out.ChallengeID = string(in.String())
		case "AppID":
			out.AppID = string(in.String())
		case "RegisteredKeys":
			if in.IsNull() {
				in.Skip()
				out.RegisteredKeys = nil
			} else {
				in.Delim('[')
				if out.RegisteredKeys == nil {
					if !in.IsDelim(']') {
						out.RegisteredKeys = make([]U2FRegisteredKey, 0, 1)
					} else {
						out.RegisteredKeys = []U2FRegisteredKey{}
					}
				} else {
					out.RegisteredKeys = (out.RegisteredKeys)[:0]
				}
				for !in.IsDelim(']') {
					var v82 U2FRegisteredKey
					(v82).UnmarshalEasyJSON(in)
					out.RegisteredKeys = append(out.RegisteredKeys, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RegisterRequests":
			if in.IsNull() {
				in.Skip()
				out.RegisterRequests = nil
			} else {
				in.Delim('[')
				if out.RegisterRequests == nil {
					if !in.IsDelim(']') {
						out.RegisterRequests = make([]U2FRegisterRequest, 0, 1)
					} else {
						out.RegisterRequests = []U2FRegisterRequest{}
					}
				} else {
					out.RegisterRequests = (out.RegisterRequests)[:0]
				}
				for !in.IsDelim(']') {
					var v83 U2FRegisterRequest
					(v83).UnmarshalEasyJSON(in)
					out.RegisterRequests = append(out.RegisterRequests, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode49(out *jwriter.Writer, in U2FRegistrationChallengeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ChallengeID\":"
		out.RawString(prefix)
		out.String(string(in.ChallengeID))
	}
	{
		const prefix string = ",\"AppID\":"
		out.RawString(prefix)
		out.String(string(in.AppID))
	}
	{
		const prefix string = ",\"RegisteredKeys\":"
		out.RawString(prefix)
		if in.RegisteredKeys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v84, v85 := range in.RegisteredKeys {
				if v84 > 0 {
					out.RawByte(',')
				}
				(v85).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"RegisterRequests\":"
		out.RawString(prefix)
		if in.RegisterRequests == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v86, v87 := range in.RegisterRequests {
				if v86 > 0 {
					out.RawByte(',')
				}
				(v87).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v U2FRegistrationChallengeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v U2FRegistrationChallengeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *U2FRegistrationChallengeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *U2FRegistrationChallengeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode49(l, v)
}
func easyjsonB7f3de24Decode50(in *jlexer.Lexer, out *U2FRegisteredKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AppID":
			out.AppID = string(in.String())
		case "KeyHandle":
			out.KeyHandle = string(in.String())
		case "Version":
			out.Version = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode50(out *jwriter.Writer, in U2FRegisteredKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AppID\":"
		out.RawString(prefix[1:])
		out.String(string(in.AppID))
	}
	{
		const prefix string = ",\"KeyHandle\":"
		out.RawString(prefix)
		out.String(string(in.KeyHandle))
	}
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v U2FRegisteredKey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v U2FRegisteredKey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *U2FRegisteredKey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *U2FRegisteredKey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode50(l, v)
}
func easyjsonB7f3de24Decode51(in *jlexer.Lexer, out *U2FRegisterRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Challenge":
			out.Challenge = string(in.String())
		case "Version":
			out.Version = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode51(out *jwriter.Writer, in U2FRegisterRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Challenge\":"
		out.RawString(prefix[1:])
		out.String(string(in.Challenge))
	}
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v U2FRegisterRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v U2FRegisterRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *U2FRegisterRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *U2FRegisterRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode51(l, v)
}
func easyjsonB7f3de24Decode52(in *jlexer.Lexer, out *TotpRegeneratedResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Image":
			out.Image = string(in.String())
		case "URL":
			out.URL = string(in.String())
		case "ProfileHash":
			out.ProfileHash = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode52(out *jwriter.Writer, in TotpRegeneratedResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"URL\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"ProfileHash\":"
		out.RawString(prefix)
		out.String(string(in.ProfileHash))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TotpRegeneratedResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TotpRegeneratedResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TotpRegeneratedResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TotpRegeneratedResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode52(l, v)
}
func easyjsonB7f3de24Decode53(in *jlexer.Lexer, out *TimeSpan) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FrequencyType":
			out.FrequencyType = uint64(in.Uint64())
		case "Seconds":
			out.Seconds = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode53(out *jwriter.Writer, in TimeSpan) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FrequencyType\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.FrequencyType))
	}
	{
		const prefix string = ",\"Seconds\":"
		out.RawString(prefix)
		out.Int64(int64(in.Seconds))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TimeSpan) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TimeSpan) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TimeSpan) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TimeSpan) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode53(l, v)
}
func easyjsonB7f3de24Decode54(in *jlexer.Lexer, out *TestResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Exists":
			out.Exists = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode54(out *jwriter.Writer, in TestResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Exists\":"
		out.RawString(prefix)
		out.Bool(bool(in.Exists))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TestResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TestResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TestResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TestResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode54(l, v)
}
func easyjsonB7f3de24Decode55(in *jlexer.Lexer, out *SwiftDestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "APIKey":
			out.APIKey = string(in.String())
		case "Region":
			out.Region = string(in.String())
		case "AuthURL":
			out.AuthURL = string(in.String())
		case "Domain":
			out.Domain = string(in.String())
		case "Tenant":
			out.Tenant = string(in.String())
		case "TenantDomain":
			out.TenantDomain = string(in.String())
		case "TenantID":
			out.TenantID = string(in.String())
		case "TrustID":
			out.TrustID = string(in.String())
		case "AuthToken":
			out.AuthToken = string(in.String())
		case "Prefix":
			out.Prefix = string(in.String())
		case "Container":
			out.Container = string(in.String())
		case "DefaultContainerPolicy":
			out.DefaultContainerPolicy = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode55(out *jwriter.Writer, in SwiftDestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Username != "" {
		const prefix string = ",\"Username\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	if in.APIKey != "" {
		const prefix string = ",\"APIKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.APIKey))
	}
	if in.Region != "" {
		const prefix string = ",\"Region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Region))
	}
	if in.AuthURL != "" {
		const prefix string = ",\"AuthURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthURL))
	}
	if in.Domain != "" {
		const prefix string = ",\"Domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if in.Tenant != "" {
		const prefix string = ",\"Tenant\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tenant))
	}
	if in.TenantDomain != "" {
		const prefix string = ",\"TenantDomain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TenantDomain))
	}
	if in.TenantID != "" {
		const prefix string = ",\"TenantID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TenantID))
	}
	if in.TrustID != "" {
		const prefix string = ",\"TrustID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TrustID))
	}
	if in.AuthToken != "" {
		const prefix string = ",\"AuthToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthToken))
	}
	if in.Prefix != "" {
		const prefix string = ",\"Prefix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prefix))
	}
	if in.Container != "" {
		const prefix string = ",\"Container\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Container))
	}
	if in.DefaultContainerPolicy != "" {
		const prefix string = ",\"DefaultContainerPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultContainerPolicy))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SwiftDestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SwiftDestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SwiftDestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SwiftDestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode55(l, v)
}
func easyjsonB7f3de24Decode56(in *jlexer.Lexer, out *StreamableEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Actor":
			out.Actor = string(in.String())
		case "OwnerOrganizationID":
			out.OwnerOrganizationID = string(in.String())
		case "ResourceID":
			out.ResourceID = string(in.String())
		case "Type":
			out.Type = StreamableEventType(in.Int())
		case "Timestamp":
			out.Timestamp = int64(in.Int64())
		case "TypeString":
			out.TypeString = string(in.String())
		case "Data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode56(out *jwriter.Writer, in StreamableEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Actor\":"
		out.RawString(prefix[1:])
		out.String(string(in.Actor))
	}
	{
		const prefix string = ",\"OwnerOrganizationID\":"
		out.RawString(prefix)
		out.String(string(in.OwnerOrganizationID))
	}
	if in.ResourceID != "" {
		const prefix string = ",\"ResourceID\":"
		out.RawString(prefix)
		out.String(string(in.ResourceID))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	if in.Timestamp != 0 {
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	if in.TypeString != "" {
		const prefix string = ",\"TypeString\":"
		out.RawString(prefix)
		out.String(string(in.TypeString))
	}
	if in.Data != nil {
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StreamableEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StreamableEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StreamableEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StreamableEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode56(l, v)
}
func easyjsonB7f3de24Decode57(in *jlexer.Lexer, out *StorjVirtualStorageRoleSetting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SatelliteAddress":
			out.SatelliteAddress = string(in.String())
		case "APIKey":
			out.APIKey = string(in.String())
		case "Passphrase":
			out.Passphrase = string(in.String())
		case "Bucket":
			out.Bucket = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode57(out *jwriter.Writer, in StorjVirtualStorageRoleSetting) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SatelliteAddress\":"
		out.RawString(prefix[1:])
		out.String(string(in.SatelliteAddress))
	}
	{
		const prefix string = ",\"APIKey\":"
		out.RawString(prefix)
		out.String(string(in.APIKey))
	}
	{
		const prefix string = ",\"Passphrase\":"
		out.RawString(prefix)
		out.String(string(in.Passphrase))
	}
	{
		const prefix string = ",\"Bucket\":"
		out.RawString(prefix)
		out.String(string(in.Bucket))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StorjVirtualStorageRoleSetting) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StorjVirtualStorageRoleSetting) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StorjVirtualStorageRoleSetting) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StorjVirtualStorageRoleSetting) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode57(l, v)
}
func easyjsonB7f3de24Decode58(in *jlexer.Lexer, out *StorjDestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SatelliteAddress":
			out.SatelliteAddress = string(in.String())
		case "APIKey":
			out.APIKey = string(in.String())
		case "Passphrase":
			out.Passphrase = string(in.String())
		case "StorjBucket":
			out.StorjBucket = string(in.String())
		case "StorjBucketPrefix":
			out.StorjBucketPrefix = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode58(out *jwriter.Writer, in StorjDestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SatelliteAddress\":"
		out.RawString(prefix[1:])
		out.String(string(in.SatelliteAddress))
	}
	{
		const prefix string = ",\"APIKey\":"
		out.RawString(prefix)
		out.String(string(in.APIKey))
	}
	{
		const prefix string = ",\"Passphrase\":"
		out.RawString(prefix)
		out.String(string(in.Passphrase))
	}
	{
		const prefix string = ",\"StorjBucket\":"
		out.RawString(prefix)
		out.String(string(in.StorjBucket))
	}
	if in.StorjBucketPrefix != "" {
		const prefix string = ",\"StorjBucketPrefix\":"
		out.RawString(prefix)
		out.String(string(in.StorjBucketPrefix))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StorjDestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StorjDestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StorjDestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StorjDestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode58(l, v)
}
func easyjsonB7f3de24Decode59(in *jlexer.Lexer, out *StoredObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "mtime":
			out.ModifyTime = int64(in.Int64())
		case "type":
			out.Type = string(in.String())
		case "subtree":
			out.Subtree = string(in.String())
		case "size":
			out.Size = uint64(in.Uint64())
		case "dname":
			out.DisplayName = string(in.String())
		case "itemClass":
			out.ItemClass = string(in.String())
		case "from":
			out.From = string(in.String())
		case "to":
			out.To = string(in.String())
		case "rtime":
			out.ReceivedDateTime = int64(in.Int64())
		case "has_attachments":
			out.HasAttachments = bool(in.Bool())
		case "stime":
			out.StartTime = int64(in.Int64())
		case "etime":
			out.EndTime = int64(in.Int64())
		case "r":
			out.RecursiveCountKnown = bool(in.Bool())
		case "f":
			out.RecursiveFiles = uint64(in.Uint64())
		case "b":
			out.RecursiveBytes = uint64(in.Uint64())
		case "d":
			out.RecursiveFolders = uint64(in.Uint64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode59(out *jwriter.Writer, in StoredObject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"mtime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ModifyTime))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"subtree\":"
		out.RawString(prefix)
		out.String(string(in.Subtree))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Size))
	}
	if in.DisplayName != "" {
		const prefix string = ",\"dname\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	if in.ItemClass != "" {
		const prefix string = ",\"itemClass\":"
		out.RawString(prefix)
		out.String(string(in.ItemClass))
	}
	if in.From != "" {
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	if in.To != "" {
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	if in.ReceivedDateTime != 0 {
		const prefix string = ",\"rtime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ReceivedDateTime))
	}
	if in.HasAttachments {
		const prefix string = ",\"has_attachments\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasAttachments))
	}
	if in.StartTime != 0 {
		const prefix string = ",\"stime\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartTime))
	}
	if in.EndTime != 0 {
		const prefix string = ",\"etime\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndTime))
	}
	if in.RecursiveCountKnown {
		const prefix string = ",\"r\":"
		out.RawString(prefix)
		out.Bool(bool(in.RecursiveCountKnown))
	}
	if in.RecursiveFiles != 0 {
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.RecursiveFiles))
	}
	if in.RecursiveBytes != 0 {
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.RecursiveBytes))
	}
	if in.RecursiveFolders != 0 {
		const prefix string = ",\"d\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.RecursiveFolders))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StoredObject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StoredObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StoredObject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StoredObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode59(l, v)
}
func easyjsonB7f3de24Decode60(in *jlexer.Lexer, out *StorageVaultProviderPolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ShouldRestrictProviderList":
			out.ShouldRestrictProviderList = bool(in.Bool())
		case "AllowedProvidersWhenRestricted":
			if in.IsNull() {
				in.Skip()
				out.AllowedProvidersWhenRestricted = nil
			} else {
				in.Delim('[')
				if out.AllowedProvidersWhenRestricted == nil {
					if !in.IsDelim(']') {
						out.AllowedProvidersWhenRestricted = make([]uint64, 0, 8)
					} else {
						out.AllowedProvidersWhenRestricted = []uint64{}
					}
				} else {
					out.AllowedProvidersWhenRestricted = (out.AllowedProvidersWhenRestricted)[:0]
				}
				for !in.IsDelim(']') {
					var v88 uint64
					v88 = uint64(in.Uint64())
					out.AllowedProvidersWhenRestricted = append(out.AllowedProvidersWhenRestricted, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode60(out *jwriter.Writer, in StorageVaultProviderPolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ShouldRestrictProviderList\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.ShouldRestrictProviderList))
	}
	{
		const prefix string = ",\"AllowedProvidersWhenRestricted\":"
		out.RawString(prefix)
		if in.AllowedProvidersWhenRestricted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.AllowedProvidersWhenRestricted {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v90))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StorageVaultProviderPolicy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StorageVaultProviderPolicy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StorageVaultProviderPolicy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StorageVaultProviderPolicy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode60(l, v)
}
func easyjsonB7f3de24Decode61(in *jlexer.Lexer, out *StorageRoleOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RoleEnabled":
			out.RoleEnabled = bool(in.Bool())
		case "Storage":
			(out.Storage).UnmarshalEasyJSON(in)
		case "LocalStorage":
			if in.IsNull() {
				in.Skip()
				out.LocalStorage_Legacy = nil
			} else {
				in.Delim('[')
				if out.LocalStorage_Legacy == nil {
					if !in.IsDelim(']') {
						out.LocalStorage_Legacy = make([]LocalStorageDirectory, 0, 2)
					} else {
						out.LocalStorage_Legacy = []LocalStorageDirectory{}
					}
				} else {
					out.LocalStorage_Legacy = (out.LocalStorage_Legacy)[:0]
				}
				for !in.IsDelim(']') {
					var v91 LocalStorageDirectory
					(v91).UnmarshalEasyJSON(in)
					out.LocalStorage_Legacy = append(out.LocalStorage_Legacy, v91)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ReplicateTo":
			if in.IsNull() {
				in.Skip()
				out.ReplicateTo = nil
			} else {
				in.Delim('[')
				if out.ReplicateTo == nil {
					if !in.IsDelim(']') {
						out.ReplicateTo = make([]ReplicaServer, 0, 0)
					} else {
						out.ReplicateTo = []ReplicaServer{}
					}
				} else {
					out.ReplicateTo = (out.ReplicateTo)[:0]
				}
				for !in.IsDelim(']') {
					var v92 ReplicaServer
					(v92).UnmarshalEasyJSON(in)
					out.ReplicateTo = append(out.ReplicateTo, v92)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode61(out *jwriter.Writer, in StorageRoleOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"RoleEnabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.RoleEnabled))
	}
	{
		const prefix string = ",\"Storage\":"
		out.RawString(prefix)
		(in.Storage).MarshalEasyJSON(out)
	}
	if len(in.LocalStorage_Legacy) != 0 {
		const prefix string = ",\"LocalStorage\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v93, v94 := range in.LocalStorage_Legacy {
				if v93 > 0 {
					out.RawByte(',')
				}
				(v94).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ReplicateTo\":"
		out.RawString(prefix)
		if in.ReplicateTo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v95, v96 := range in.ReplicateTo {
				if v95 > 0 {
					out.RawByte(',')
				}
				(v96).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StorageRoleOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StorageRoleOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StorageRoleOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StorageRoleOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode61(l, v)
}
func easyjsonB7f3de24Decode62(in *jlexer.Lexer, out *StorageFreeSpaceInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Unlimited":
			out.Unlimited = bool(in.Bool())
		case "UsedPercent":
			out.UsedPercent = float32(in.Float32())
		case "AvailableBytes":
			out.AvailableBytes = uint64(in.Uint64())
		case "Spanned":
			(out.Spanned).UnmarshalEasyJSON(in)
		case "B2":
			(out.B2).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode62(out *jwriter.Writer, in StorageFreeSpaceInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Unlimited\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Unlimited))
	}
	{
		const prefix string = ",\"UsedPercent\":"
		out.RawString(prefix)
		out.Float32(float32(in.UsedPercent))
	}
	{
		const prefix string = ",\"AvailableBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AvailableBytes))
	}
	if true {
		const prefix string = ",\"Spanned\":"
		out.RawString(prefix)
		(in.Spanned).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"B2\":"
		out.RawString(prefix)
		(in.B2).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StorageFreeSpaceInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StorageFreeSpaceInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StorageFreeSpaceInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StorageFreeSpaceInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode62(l, v)
}
func easyjsonB7f3de24Decode63(in *jlexer.Lexer, out *StatResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Buckets":
			out.Buckets = int64(in.Int64())
		case "Users":
			out.Users = int64(in.Int64())
		case "Devices":
			out.Devices = int64(in.Int64())
		case "Boosters":
			out.Boosters = int64(in.Int64())
		case "NetworkDevices":
			out.NetworkDevices = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode63(out *jwriter.Writer, in StatResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Buckets\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Buckets))
	}
	{
		const prefix string = ",\"Users\":"
		out.RawString(prefix)
		out.Int64(int64(in.Users))
	}
	{
		const prefix string = ",\"Devices\":"
		out.RawString(prefix)
		out.Int64(int64(in.Devices))
	}
	{
		const prefix string = ",\"Boosters\":"
		out.RawString(prefix)
		out.Int64(int64(in.Boosters))
	}
	{
		const prefix string = ",\"NetworkDevices\":"
		out.RawString(prefix)
		out.Int64(int64(in.NetworkDevices))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode63(l, v)
}
func easyjsonB7f3de24Decode64(in *jlexer.Lexer, out *SpannedStorageExtraInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Targets":
			if in.IsNull() {
				in.Skip()
				out.Targets = nil
			} else {
				in.Delim('[')
				if out.Targets == nil {
					if !in.IsDelim(']') {
						out.Targets = make([]StorageFreeSpaceInfo, 0, 0)
					} else {
						out.Targets = []StorageFreeSpaceInfo{}
					}
				} else {
					out.Targets = (out.Targets)[:0]
				}
				for !in.IsDelim(']') {
					var v97 StorageFreeSpaceInfo
					(v97).UnmarshalEasyJSON(in)
					out.Targets = append(out.Targets, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode64(out *jwriter.Writer, in SpannedStorageExtraInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Targets\":"
		out.RawString(prefix[1:])
		if in.Targets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v98, v99 := range in.Targets {
				if v98 > 0 {
					out.RawByte(',')
				}
				(v99).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpannedStorageExtraInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpannedStorageExtraInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpannedStorageExtraInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpannedStorageExtraInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode64(l, v)
}
func easyjsonB7f3de24Decode65(in *jlexer.Lexer, out *SpannedDestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SpanTargets":
			if in.IsNull() {
				in.Skip()
				out.SpanTargets = nil
			} else {
				in.Delim('[')
				if out.SpanTargets == nil {
					if !in.IsDelim(']') {
						out.SpanTargets = make([]DestinationLocation, 0, 0)
					} else {
						out.SpanTargets = []DestinationLocation{}
					}
				} else {
					out.SpanTargets = (out.SpanTargets)[:0]
				}
				for !in.IsDelim(']') {
					var v100 DestinationLocation
					(v100).UnmarshalEasyJSON(in)
					out.SpanTargets = append(out.SpanTargets, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SpanUseStaticSlots":
			out.SpanUseStaticSlots = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode65(out *jwriter.Writer, in SpannedDestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SpanTargets\":"
		out.RawString(prefix[1:])
		if in.SpanTargets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v101, v102 := range in.SpanTargets {
				if v101 > 0 {
					out.RawByte(',')
				}
				(v102).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SpanUseStaticSlots\":"
		out.RawString(prefix)
		out.Bool(bool(in.SpanUseStaticSlots))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpannedDestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpannedDestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpannedDestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpannedDestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode65(l, v)
}
func easyjsonB7f3de24Decode66(in *jlexer.Lexer, out *SourceStatistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LastStartTime":
			out.LastStartTime = int64(in.Int64())
		case "LastBackupJob":
			(out.LastBackupJob).UnmarshalEasyJSON(in)
		case "LastSuccessfulBackupJob":
			(out.LastSuccessfulBackupJob).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode66(out *jwriter.Writer, in SourceStatistics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"LastStartTime\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.LastStartTime))
	}
	{
		const prefix string = ",\"LastBackupJob\":"
		out.RawString(prefix)
		(in.LastBackupJob).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"LastSuccessfulBackupJob\":"
		out.RawString(prefix)
		(in.LastSuccessfulBackupJob).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SourceStatistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SourceStatistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SourceStatistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SourceStatistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode66(l, v)
}
func easyjsonB7f3de24Decode67(in *jlexer.Lexer, out *SourceIncludePattern) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TopDirectory":
			out.TopDirectory = string(in.String())
		case "Value":
			out.Value = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode67(out *jwriter.Writer, in SourceIncludePattern) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TopDirectory\":"
		out.RawString(prefix[1:])
		out.String(string(in.TopDirectory))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SourceIncludePattern) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SourceIncludePattern) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SourceIncludePattern) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SourceIncludePattern) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode67(l, v)
}
func easyjsonB7f3de24Decode68(in *jlexer.Lexer, out *SourceConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Engine":
			out.Engine = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "OwnerDevice":
			out.OwnerDevice = string(in.String())
		case "CreateTime":
			out.CreateTime = int64(in.Int64())
		case "ModifyTime":
			out.ModifyTime = int64(in.Int64())
		case "PreExec":
			if in.IsNull() {
				in.Skip()
				out.PreExec = nil
			} else {
				in.Delim('[')
				if out.PreExec == nil {
					if !in.IsDelim(']') {
						out.PreExec = make([]string, 0, 4)
					} else {
						out.PreExec = []string{}
					}
				} else {
					out.PreExec = (out.PreExec)[:0]
				}
				for !in.IsDelim(']') {
					var v103 string
					v103 = string(in.String())
					out.PreExec = append(out.PreExec, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ThawExec":
			if in.IsNull() {
				in.Skip()
				out.ThawExec = nil
			} else {
				in.Delim('[')
				if out.ThawExec == nil {
					if !in.IsDelim(']') {
						out.ThawExec = make([]string, 0, 4)
					} else {
						out.ThawExec = []string{}
					}
				} else {
					out.ThawExec = (out.ThawExec)[:0]
				}
				for !in.IsDelim(']') {
					var v104 string
					v104 = string(in.String())
					out.ThawExec = append(out.ThawExec, v104)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PostExec":
			if in.IsNull() {
				in.Skip()
				out.PostExec = nil
			} else {
				in.Delim('[')
				if out.PostExec == nil {
					if !in.IsDelim(']') {
						out.PostExec = make([]string, 0, 4)
					} else {
						out.PostExec = []string{}
					}
				} else {
					out.PostExec = (out.PostExec)[:0]
				}
				for !in.IsDelim(']') {
					var v105 string
					v105 = string(in.String())
					out.PostExec = append(out.PostExec, v105)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EngineProps":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.EngineProps = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v106 string
					v106 = string(in.String())
					(out.EngineProps)[key] = v106
					in.WantComma()
				}
				in.Delim('}')
			}
		case "PolicySourceID":
			out.PolicySourceID = string(in.String())
		case "ExistingUserUpdate":
			out.ExistingUserUpdate = bool(in.Bool())
		case "OverrideDestinationRetention":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.OverrideDestinationRetention = make(map[string]RetentionPolicy)
				} else {
					out.OverrideDestinationRetention = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v107 RetentionPolicy
					(v107).UnmarshalEasyJSON(in)
					(out.OverrideDestinationRetention)[key] = v107
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Statistics":
			(out.Statistics).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode68(out *jwriter.Writer, in SourceConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Engine\":"
		out.RawString(prefix[1:])
		out.String(string(in.Engine))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"OwnerDevice\":"
		out.RawString(prefix)
		out.String(string(in.OwnerDevice))
	}
	{
		const prefix string = ",\"CreateTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateTime))
	}
	{
		const prefix string = ",\"ModifyTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ModifyTime))
	}
	{
		const prefix string = ",\"PreExec\":"
		out.RawString(prefix)
		if in.PreExec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v108, v109 := range in.PreExec {
				if v108 > 0 {
					out.RawByte(',')
				}
				out.String(string(v109))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ThawExec\":"
		out.RawString(prefix)
		if in.ThawExec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v110, v111 := range in.ThawExec {
				if v110 > 0 {
					out.RawByte(',')
				}
				out.String(string(v111))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PostExec\":"
		out.RawString(prefix)
		if in.PostExec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v112, v113 := range in.PostExec {
				if v112 > 0 {
					out.RawByte(',')
				}
				out.String(string(v113))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"EngineProps\":"
		out.RawString(prefix)
		if in.EngineProps == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v114First := true
			for v114Name, v114Value := range in.EngineProps {
				if v114First {
					v114First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v114Name))
				out.RawByte(':')
				out.String(string(v114Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"PolicySourceID\":"
		out.RawString(prefix)
		out.String(string(in.PolicySourceID))
	}
	{
		const prefix string = ",\"ExistingUserUpdate\":"
		out.RawString(prefix)
		out.Bool(bool(in.ExistingUserUpdate))
	}
	if len(in.OverrideDestinationRetention) != 0 {
		const prefix string = ",\"OverrideDestinationRetention\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v115First := true
			for v115Name, v115Value := range in.OverrideDestinationRetention {
				if v115First {
					v115First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v115Name))
				out.RawByte(':')
				(v115Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if true {
		const prefix string = ",\"Statistics\":"
		out.RawString(prefix)
		(in.Statistics).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SourceConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SourceConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SourceConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SourceConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode68(l, v)
}
func easyjsonB7f3de24Decode69(in *jlexer.Lexer, out *SourceBasicInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Engine":
			out.Engine = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "O365AccountCount":
			out.O365AccountCount = int64(in.Int64())
		case "TotalVmCount":
			out.TotalVmCount = int64(in.Int64())
		case "Size":
			out.Size = int64(in.Int64())
		case "OverrideDestinationRetention":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.OverrideDestinationRetention = make(map[string]RetentionPolicy)
				} else {
					out.OverrideDestinationRetention = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v116 RetentionPolicy
					(v116).UnmarshalEasyJSON(in)
					(out.OverrideDestinationRetention)[key] = v116
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode69(out *jwriter.Writer, in SourceBasicInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Engine\":"
		out.RawString(prefix[1:])
		out.String(string(in.Engine))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"O365AccountCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.O365AccountCount))
	}
	{
		const prefix string = ",\"TotalVmCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalVmCount))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	if len(in.OverrideDestinationRetention) != 0 {
		const prefix string = ",\"OverrideDestinationRetention\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v117First := true
			for v117Name, v117Value := range in.OverrideDestinationRetention {
				if v117First {
					v117First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v117Name))
				out.RawByte(':')
				(v117Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SourceBasicInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SourceBasicInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SourceBasicInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SourceBasicInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode69(l, v)
}
func easyjsonB7f3de24Decode70(in *jlexer.Lexer, out *SoftwareUpdateNewsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "latest_stable":
			out.LatestStable = string(in.String())
		case "latest_prerelease":
			out.LatestPrerelease = string(in.String())
		case "downloads_url":
			out.DownloadsURL = string(in.String())
		case "updates_info":
			if in.IsNull() {
				in.Skip()
				out.WhatsNew = nil
			} else {
				in.Delim('[')
				if out.WhatsNew == nil {
					if !in.IsDelim(']') {
						out.WhatsNew = make([]string, 0, 4)
					} else {
						out.WhatsNew = []string{}
					}
				} else {
					out.WhatsNew = (out.WhatsNew)[:0]
				}
				for !in.IsDelim(']') {
					var v118 string
					v118 = string(in.String())
					out.WhatsNew = append(out.WhatsNew, v118)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode70(out *jwriter.Writer, in SoftwareUpdateNewsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"latest_stable\":"
		out.RawString(prefix[1:])
		out.String(string(in.LatestStable))
	}
	{
		const prefix string = ",\"latest_prerelease\":"
		out.RawString(prefix)
		out.String(string(in.LatestPrerelease))
	}
	{
		const prefix string = ",\"downloads_url\":"
		out.RawString(prefix)
		out.String(string(in.DownloadsURL))
	}
	{
		const prefix string = ",\"updates_info\":"
		out.RawString(prefix)
		if in.WhatsNew == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v119, v120 := range in.WhatsNew {
				if v119 > 0 {
					out.RawByte(',')
				}
				out.String(string(v120))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SoftwareUpdateNewsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode70(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SoftwareUpdateNewsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode70(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SoftwareUpdateNewsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode70(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SoftwareUpdateNewsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode70(l, v)
}
func easyjsonB7f3de24Decode71(in *jlexer.Lexer, out *SoftwareBuildRoleOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RoleEnabled":
			out.RoleEnabled = bool(in.Bool())
		case "AllowUnauthenticatedDownloads":
			out.AllowUnauthenticatedDownloads = bool(in.Bool())
		case "MaxBuilders":
			out.MaxBuilders = int(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode71(out *jwriter.Writer, in SoftwareBuildRoleOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"RoleEnabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.RoleEnabled))
	}
	{
		const prefix string = ",\"AllowUnauthenticatedDownloads\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowUnauthenticatedDownloads))
	}
	{
		const prefix string = ",\"MaxBuilders\":"
		out.RawString(prefix)
		out.Int(int(in.MaxBuilders))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SoftwareBuildRoleOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode71(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SoftwareBuildRoleOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode71(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SoftwareBuildRoleOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode71(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SoftwareBuildRoleOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode71(l, v)
}
func easyjsonB7f3de24Decode72(in *jlexer.Lexer, out *SizeMeasurement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Size":
			out.Size = int64(in.Int64())
		case "MeasureStarted":
			out.MeasureStarted = int64(in.Int64())
		case "MeasureCompleted":
			out.MeasureCompleted = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode72(out *jwriter.Writer, in SizeMeasurement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"MeasureStarted\":"
		out.RawString(prefix)
		out.Int64(int64(in.MeasureStarted))
	}
	{
		const prefix string = ",\"MeasureCompleted\":"
		out.RawString(prefix)
		out.Int64(int64(in.MeasureCompleted))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SizeMeasurement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode72(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SizeMeasurement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode72(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SizeMeasurement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode72(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SizeMeasurement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode72(l, v)
}
func easyjsonB7f3de24Decode73(in *jlexer.Lexer, out *SingleFieldSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FieldName":
			out.FieldName = string(in.String())
		case "FieldType":
			out.FieldType = string(in.String())
		case "BoolVal":
			out.BoolVal = bool(in.Bool())
		case "IntVal":
			out.IntVal = int64(in.Int64())
		case "StrVal":
			out.StrVal = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode73(out *jwriter.Writer, in SingleFieldSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FieldName\":"
		out.RawString(prefix[1:])
		out.String(string(in.FieldName))
	}
	{
		const prefix string = ",\"FieldType\":"
		out.RawString(prefix)
		out.String(string(in.FieldType))
	}
	{
		const prefix string = ",\"BoolVal\":"
		out.RawString(prefix)
		out.Bool(bool(in.BoolVal))
	}
	{
		const prefix string = ",\"IntVal\":"
		out.RawString(prefix)
		out.Int64(int64(in.IntVal))
	}
	{
		const prefix string = ",\"StrVal\":"
		out.RawString(prefix)
		out.String(string(in.StrVal))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SingleFieldSource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode73(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SingleFieldSource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode73(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SingleFieldSource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode73(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SingleFieldSource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode73(l, v)
}
func easyjsonB7f3de24Decode74(in *jlexer.Lexer, out *SessionOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ExpiredInSeconds":
			out.ExpiredInSeconds = uint64(in.Uint64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode74(out *jwriter.Writer, in SessionOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ExpiredInSeconds\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ExpiredInSeconds))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SessionOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode74(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SessionOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode74(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SessionOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode74(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SessionOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode74(l, v)
}
func easyjsonB7f3de24Decode75(in *jlexer.Lexer, out *SessionKeyRegeneratedResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "SessionKey":
			out.SessionKey = string(in.String())
		case "SessionType":
			out.SessionType = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode75(out *jwriter.Writer, in SessionKeyRegeneratedResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"SessionKey\":"
		out.RawString(prefix)
		out.String(string(in.SessionKey))
	}
	{
		const prefix string = ",\"SessionType\":"
		out.RawString(prefix)
		out.String(string(in.SessionType))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SessionKeyRegeneratedResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode75(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SessionKeyRegeneratedResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode75(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SessionKeyRegeneratedResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode75(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SessionKeyRegeneratedResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode75(l, v)
}
func easyjsonB7f3de24Decode76(in *jlexer.Lexer, out *ServerMetaVersionInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Version":
			out.Version = string(in.String())
		case "VersionCodename":
			out.VersionCodename = string(in.String())
		case "StorageRole":
			out.StorageRole = bool(in.Bool())
		case "AuthenticationRole":
			out.AuthenticationRole = bool(in.Bool())
		case "SoftwareBuildRole":
			out.SoftwareBuildRole = bool(in.Bool())
		case "OverseerRole":
			out.ConstellationRole_Legacy = bool(in.Bool())
		case "ConstellationRole":
			out.ConstellationRole = bool(in.Bool())
		case "ExperimentalOptions":
			if in.IsNull() {
				in.Skip()
				out.ExperimentalOptions = nil
			} else {
				in.Delim('[')
				if out.ExperimentalOptions == nil {
					if !in.IsDelim(']') {
						out.ExperimentalOptions = make([]string, 0, 4)
					} else {
						out.ExperimentalOptions = []string{}
					}
				} else {
					out.ExperimentalOptions = (out.ExperimentalOptions)[:0]
				}
				for !in.IsDelim(']') {
					var v121 string
					v121 = string(in.String())
					out.ExperimentalOptions = append(out.ExperimentalOptions, v121)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ServerStartTime":
			out.ServerStartTime = int64(in.Int64())
		case "ServerStartHash":
			out.ServerStartHash = string(in.String())
		case "CurrentTime":
			out.CurrentTime = int64(in.Int64())
		case "ServerLicenseHash":
			out.ServerLicenseHash = string(in.String())
		case "ServerLicenseFeaturesAll":
			out.ServerLicenseFeaturesAll = bool(in.Bool())
		case "ServerLicenseFeatureSet":
			out.ServerLicenseFeatureSet = uint32(in.Uint32())
		case "ServerLicenseLimit":
			(out.ServerLicenseLimit).UnmarshalEasyJSON(in)
		case "ConfiguredDevices":
			out.ConfiguredDevices = int(in.Int())
		case "BoosterLimit":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.BoosterLimit = make(map[string]int)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v122 int
					v122 = int(in.Int())
					(out.BoosterLimit)[key] = v122
					in.WantComma()
				}
				in.Delim('}')
			}
		case "LicenseValidUntil":
			out.LicenseValidUntil = int64(in.Int64())
		case "EmailsSentSuccessfully":
			out.EmailsSentSuccessfully = int64(in.Int64())
		case "EmailsSentErrors":
			out.EmailsSentErrors = int64(in.Int64())
		case "EmailsWaitingInQueue":
			out.EmailsWaitingInQueue = int64(in.Int64())
		case "ScheduledEmailThreadCurrentState":
			out.ScheduledEmailThreadCurrentState = int64(in.Int64())
		case "ScheduledEmailThreadLastCalculateDurationNanos":
			out.ScheduledEmailThreadLastCalculateDurationNanos = int64(in.Int64())
		case "ScheduledEmailThreadWaitingUntil":
			out.ScheduledEmailThreadWaitingUntil = int64(in.Int64())
		case "ScheduledEmailThreadLastWakeTime":
			out.ScheduledEmailThreadLastWakeTime = int64(in.Int64())
		case "ScheduledEmailThreadLastWakeSentEmails":
			out.ScheduledEmailThreadLastWakeSentEmails = bool(in.Bool())
		case "SelfBackup":
			if in.IsNull() {
				in.Skip()
				out.SelfBackup = nil
			} else {
				in.Delim('[')
				if out.SelfBackup == nil {
					if !in.IsDelim(']') {
						out.SelfBackup = make([]SelfBackupStatistics, 0, 1)
					} else {
						out.SelfBackup = []SelfBackupStatistics{}
					}
				} else {
					out.SelfBackup = (out.SelfBackup)[:0]
				}
				for !in.IsDelim(']') {
					var v123 SelfBackupStatistics
					(v123).UnmarshalEasyJSON(in)
					out.SelfBackup = append(out.SelfBackup, v123)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode76(out *jwriter.Writer, in ServerMetaVersionInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"VersionCodename\":"
		out.RawString(prefix)
		out.String(string(in.VersionCodename))
	}
	{
		const prefix string = ",\"StorageRole\":"
		out.RawString(prefix)
		out.Bool(bool(in.StorageRole))
	}
	{
		const prefix string = ",\"AuthenticationRole\":"
		out.RawString(prefix)
		out.Bool(bool(in.AuthenticationRole))
	}
	{
		const prefix string = ",\"SoftwareBuildRole\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftwareBuildRole))
	}
	{
		const prefix string = ",\"OverseerRole\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConstellationRole_Legacy))
	}
	{
		const prefix string = ",\"ConstellationRole\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConstellationRole))
	}
	if len(in.ExperimentalOptions) != 0 {
		const prefix string = ",\"ExperimentalOptions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v124, v125 := range in.ExperimentalOptions {
				if v124 > 0 {
					out.RawByte(',')
				}
				out.String(string(v125))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ServerStartTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ServerStartTime))
	}
	{
		const prefix string = ",\"ServerStartHash\":"
		out.RawString(prefix)
		out.String(string(in.ServerStartHash))
	}
	{
		const prefix string = ",\"CurrentTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.CurrentTime))
	}
	{
		const prefix string = ",\"ServerLicenseHash\":"
		out.RawString(prefix)
		out.String(string(in.ServerLicenseHash))
	}
	{
		const prefix string = ",\"ServerLicenseFeaturesAll\":"
		out.RawString(prefix)
		out.Bool(bool(in.ServerLicenseFeaturesAll))
	}
	{
		const prefix string = ",\"ServerLicenseFeatureSet\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.ServerLicenseFeatureSet))
	}
	{
		const prefix string = ",\"ServerLicenseLimit\":"
		out.RawString(prefix)
		(in.ServerLicenseLimit).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ConfiguredDevices\":"
		out.RawString(prefix)
		out.Int(int(in.ConfiguredDevices))
	}
	{
		const prefix string = ",\"BoosterLimit\":"
		out.RawString(prefix)
		if in.BoosterLimit == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v126First := true
			for v126Name, v126Value := range in.BoosterLimit {
				if v126First {
					v126First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v126Name))
				out.RawByte(':')
				out.Int(int(v126Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"LicenseValidUntil\":"
		out.RawString(prefix)
		out.Int64(int64(in.LicenseValidUntil))
	}
	{
		const prefix string = ",\"EmailsSentSuccessfully\":"
		out.RawString(prefix)
		out.Int64(int64(in.EmailsSentSuccessfully))
	}
	{
		const prefix string = ",\"EmailsSentErrors\":"
		out.RawString(prefix)
		out.Int64(int64(in.EmailsSentErrors))
	}
	{
		const prefix string = ",\"EmailsWaitingInQueue\":"
		out.RawString(prefix)
		out.Int64(int64(in.EmailsWaitingInQueue))
	}
	{
		const prefix string = ",\"ScheduledEmailThreadCurrentState\":"
		out.RawString(prefix)
		out.Int64(int64(in.ScheduledEmailThreadCurrentState))
	}
	{
		const prefix string = ",\"ScheduledEmailThreadLastCalculateDurationNanos\":"
		out.RawString(prefix)
		out.Int64(int64(in.ScheduledEmailThreadLastCalculateDurationNanos))
	}
	{
		const prefix string = ",\"ScheduledEmailThreadWaitingUntil\":"
		out.RawString(prefix)
		out.Int64(int64(in.ScheduledEmailThreadWaitingUntil))
	}
	{
		const prefix string = ",\"ScheduledEmailThreadLastWakeTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ScheduledEmailThreadLastWakeTime))
	}
	{
		const prefix string = ",\"ScheduledEmailThreadLastWakeSentEmails\":"
		out.RawString(prefix)
		out.Bool(bool(in.ScheduledEmailThreadLastWakeSentEmails))
	}
	{
		const prefix string = ",\"SelfBackup\":"
		out.RawString(prefix)
		if in.SelfBackup == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v127, v128 := range in.SelfBackup {
				if v127 > 0 {
					out.RawByte(',')
				}
				(v128).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServerMetaVersionInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode76(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServerMetaVersionInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode76(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServerMetaVersionInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode76(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServerMetaVersionInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode76(l, v)
}
func easyjsonB7f3de24Decode77(in *jlexer.Lexer, out *ServerMetaBrandingProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BrandName":
			out.BrandName = string(in.String())
		case "ProductName":
			out.ProductName = string(in.String())
		case "HasImage":
			out.HasImage = bool(in.Bool())
		case "ImageEtag":
			out.ImageEtag = string(in.String())
		case "TopColor":
			out.TopColor = string(in.String())
		case "AccentColor":
			out.AccentColor = string(in.String())
		case "HideNewsArea":
			out.HideNewsArea = bool(in.Bool())
		case "AllowUnauthenticatedDownloads":
			out.AllowUnauthenticatedDownloads = bool(in.Bool())
		case "AllowAuthenticatedDownloads":
			out.AllowAuthenticatedDownloads = bool(in.Bool())
		case "PruneLogsAfterDays":
			out.PruneLogsAfterDays = int64(in.Int64())
		case "ExpiredInSeconds":
			out.ExpiredInSeconds = int64(in.Int64())
		case "ExternalAuthenticationSources":
			if in.IsNull() {
				in.Skip()
				out.ExternalAuthenticationSources = nil
			} else {
				in.Delim('[')
				if out.ExternalAuthenticationSources == nil {
					if !in.IsDelim(']') {
						out.ExternalAuthenticationSources = make([]ExternalAuthenticationSourceDisplay, 0, 1)
					} else {
						out.ExternalAuthenticationSources = []ExternalAuthenticationSourceDisplay{}
					}
				} else {
					out.ExternalAuthenticationSources = (out.ExternalAuthenticationSources)[:0]
				}
				for !in.IsDelim(']') {
					var v129 ExternalAuthenticationSourceDisplay
					(v129).UnmarshalEasyJSON(in)
					out.ExternalAuthenticationSources = append(out.ExternalAuthenticationSources, v129)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ServerIsEmpty":
			out.ServerIsEmpty = bool(in.Bool())
		case "CloudStorageName":
			out.CloudStorageName = string(in.String())
		case "AdminHidePreBuiltClientOption":
			out.AdminHidePreBuiltClientOption = bool(in.Bool())
		case "AdminHideBrandedCloudStorage":
			out.AdminHideBrandedCloudStorage = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode77(out *jwriter.Writer, in ServerMetaBrandingProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BrandName\":"
		out.RawString(prefix[1:])
		out.String(string(in.BrandName))
	}
	{
		const prefix string = ",\"ProductName\":"
		out.RawString(prefix)
		out.String(string(in.ProductName))
	}
	{
		const prefix string = ",\"HasImage\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasImage))
	}
	{
		const prefix string = ",\"ImageEtag\":"
		out.RawString(prefix)
		out.String(string(in.ImageEtag))
	}
	{
		const prefix string = ",\"TopColor\":"
		out.RawString(prefix)
		out.String(string(in.TopColor))
	}
	{
		const prefix string = ",\"AccentColor\":"
		out.RawString(prefix)
		out.String(string(in.AccentColor))
	}
	{
		const prefix string = ",\"HideNewsArea\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideNewsArea))
	}
	{
		const prefix string = ",\"AllowUnauthenticatedDownloads\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowUnauthenticatedDownloads))
	}
	{
		const prefix string = ",\"AllowAuthenticatedDownloads\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowAuthenticatedDownloads))
	}
	{
		const prefix string = ",\"PruneLogsAfterDays\":"
		out.RawString(prefix)
		out.Int64(int64(in.PruneLogsAfterDays))
	}
	{
		const prefix string = ",\"ExpiredInSeconds\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExpiredInSeconds))
	}
	if len(in.ExternalAuthenticationSources) != 0 {
		const prefix string = ",\"ExternalAuthenticationSources\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v130, v131 := range in.ExternalAuthenticationSources {
				if v130 > 0 {
					out.RawByte(',')
				}
				(v131).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ServerIsEmpty\":"
		out.RawString(prefix)
		out.Bool(bool(in.ServerIsEmpty))
	}
	{
		const prefix string = ",\"CloudStorageName\":"
		out.RawString(prefix)
		out.String(string(in.CloudStorageName))
	}
	{
		const prefix string = ",\"AdminHidePreBuiltClientOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.AdminHidePreBuiltClientOption))
	}
	{
		const prefix string = ",\"AdminHideBrandedCloudStorage\":"
		out.RawString(prefix)
		out.Bool(bool(in.AdminHideBrandedCloudStorage))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServerMetaBrandingProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode77(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServerMetaBrandingProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode77(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServerMetaBrandingProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode77(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServerMetaBrandingProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode77(l, v)
}
func easyjsonB7f3de24Decode78(in *jlexer.Lexer, out *ServerConfigOptionsSoftwareBuildRoleFragment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SoftwareBuildRole":
			(out.SoftwareBuildRole).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode78(out *jwriter.Writer, in ServerConfigOptionsSoftwareBuildRoleFragment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SoftwareBuildRole\":"
		out.RawString(prefix[1:])
		(in.SoftwareBuildRole).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServerConfigOptionsSoftwareBuildRoleFragment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode78(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServerConfigOptionsSoftwareBuildRoleFragment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode78(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServerConfigOptionsSoftwareBuildRoleFragment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode78(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServerConfigOptionsSoftwareBuildRoleFragment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode78(l, v)
}
func easyjsonB7f3de24Decode79(in *jlexer.Lexer, out *ServerConfigOptionsBrandingFragment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Branding":
			(out.Branding).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode79(out *jwriter.Writer, in ServerConfigOptionsBrandingFragment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Branding\":"
		out.RawString(prefix[1:])
		(in.Branding).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServerConfigOptionsBrandingFragment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode79(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServerConfigOptionsBrandingFragment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode79(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServerConfigOptionsBrandingFragment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode79(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServerConfigOptionsBrandingFragment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode79(l, v)
}
func easyjsonB7f3de24Decode80(in *jlexer.Lexer, out *ServerConfigOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AdminUsers":
			if in.IsNull() {
				in.Skip()
				out.AdminUsers = nil
			} else {
				in.Delim('[')
				if out.AdminUsers == nil {
					if !in.IsDelim(']') {
						out.AdminUsers = make([]AllowedAdminUser, 0, 0)
					} else {
						out.AdminUsers = []AllowedAdminUser{}
					}
				} else {
					out.AdminUsers = (out.AdminUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v132 AllowedAdminUser
					(v132).UnmarshalEasyJSON(in)
					out.AdminUsers = append(out.AdminUsers, v132)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AuthenticationRole":
			(out.AuthenticationRole).UnmarshalEasyJSON(in)
		case "Branding":
			(out.Branding).UnmarshalEasyJSON(in)
		case "ConstellationRole":
			(out.ConstellationRole).UnmarshalEasyJSON(in)
		case "OverseerRole":
			(out.ConstellationRole_Legacy).UnmarshalEasyJSON(in)
		case "Email":
			(out.Email).UnmarshalEasyJSON(in)
		case "ExperimentalOptions":
			if in.IsNull() {
				in.Skip()
				out.ExperimentalOptions = nil
			} else {
				in.Delim('[')
				if out.ExperimentalOptions == nil {
					if !in.IsDelim(']') {
						out.ExperimentalOptions = make([]string, 0, 4)
					} else {
						out.ExperimentalOptions = []string{}
					}
				} else {
					out.ExperimentalOptions = (out.ExperimentalOptions)[:0]
				}
				for !in.IsDelim(']') {
					var v133 string
					v133 = string(in.String())
					out.ExperimentalOptions = append(out.ExperimentalOptions, v133)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExternalAdminUserSources":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ExternalAdminUserSources = make(map[string]ExternalAuthenticationSource)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v134 ExternalAuthenticationSource
					(v134).UnmarshalEasyJSON(in)
					(out.ExternalAdminUserSources)[key] = v134
					in.WantComma()
				}
				in.Delim('}')
			}
		case "IPRateLimit":
			(out.IPRateLimit).UnmarshalEasyJSON(in)
		case "LoginProtection":
			(out.LoginProtection).UnmarshalEasyJSON(in)
		case "License":
			(out.License).UnmarshalEasyJSON(in)
		case "ListenAddresses":
			if in.IsNull() {
				in.Skip()
				out.ListenAddresses = nil
			} else {
				in.Delim('[')
				if out.ListenAddresses == nil {
					if !in.IsDelim(']') {
						out.ListenAddresses = make([]HTTPConnectorOptions, 0, 0)
					} else {
						out.ListenAddresses = []HTTPConnectorOptions{}
					}
				} else {
					out.ListenAddresses = (out.ListenAddresses)[:0]
				}
				for !in.IsDelim(']') {
					var v135 HTTPConnectorOptions
					(v135).UnmarshalEasyJSON(in)
					out.ListenAddresses = append(out.ListenAddresses, v135)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Organizations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Organizations = make(map[string]Organization)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v136 Organization
					(v136).UnmarshalEasyJSON(in)
					(out.Organizations)[key] = v136
					in.WantComma()
				}
				in.Delim('}')
			}
		case "PSAConfigs":
			if in.IsNull() {
				in.Skip()
				out.PSAConfigs = nil
			} else {
				in.Delim('[')
				if out.PSAConfigs == nil {
					if !in.IsDelim(']') {
						out.PSAConfigs = make([]PSAConfig, 0, 0)
					} else {
						out.PSAConfigs = []PSAConfig{}
					}
				} else {
					out.PSAConfigs = (out.PSAConfigs)[:0]
				}
				for !in.IsDelim(']') {
					var v137 PSAConfig
					(v137).UnmarshalEasyJSON(in)
					out.PSAConfigs = append(out.PSAConfigs, v137)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SelfBackup":
			(out.SelfBackup).UnmarshalEasyJSON(in)
		case "SessionSettings":
			(out.SessionSettings).UnmarshalEasyJSON(in)
		case "SoftwareBuildRole":
			(out.SoftwareBuildRole).UnmarshalEasyJSON(in)
		case "StorageRole":
			(out.StorageRole).UnmarshalEasyJSON(in)
		case "TrustXForwardedFor":
			out.TrustXForwardedFor = bool(in.Bool())
		case "WebhookOptions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.WebhookOptions = make(map[string]WebhookOption)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v138 WebhookOption
					(v138).UnmarshalEasyJSON(in)
					(out.WebhookOptions)[key] = v138
					in.WantComma()
				}
				in.Delim('}')
			}
		case "AuditFileOptions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.AuditFileOptions = make(map[string]FileOption)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v139 FileOption
					(v139).UnmarshalEasyJSON(in)
					(out.AuditFileOptions)[key] = v139
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode80(out *jwriter.Writer, in ServerConfigOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AdminUsers\":"
		out.RawString(prefix[1:])
		if in.AdminUsers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v140, v141 := range in.AdminUsers {
				if v140 > 0 {
					out.RawByte(',')
				}
				(v141).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AuthenticationRole\":"
		out.RawString(prefix)
		(in.AuthenticationRole).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Branding\":"
		out.RawString(prefix)
		(in.Branding).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ConstellationRole\":"
		out.RawString(prefix)
		(in.ConstellationRole).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"OverseerRole\":"
		out.RawString(prefix)
		(in.ConstellationRole_Legacy).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		(in.Email).MarshalEasyJSON(out)
	}
	if len(in.ExperimentalOptions) != 0 {
		const prefix string = ",\"ExperimentalOptions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v142, v143 := range in.ExperimentalOptions {
				if v142 > 0 {
					out.RawByte(',')
				}
				out.String(string(v143))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ExternalAdminUserSources\":"
		out.RawString(prefix)
		if in.ExternalAdminUserSources == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v144First := true
			for v144Name, v144Value := range in.ExternalAdminUserSources {
				if v144First {
					v144First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v144Name))
				out.RawByte(':')
				(v144Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"IPRateLimit\":"
		out.RawString(prefix)
		(in.IPRateLimit).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"LoginProtection\":"
		out.RawString(prefix)
		(in.LoginProtection).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"License\":"
		out.RawString(prefix)
		(in.License).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ListenAddresses\":"
		out.RawString(prefix)
		if in.ListenAddresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v145, v146 := range in.ListenAddresses {
				if v145 > 0 {
					out.RawByte(',')
				}
				(v146).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Organizations\":"
		out.RawString(prefix)
		if in.Organizations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v147First := true
			for v147Name, v147Value := range in.Organizations {
				if v147First {
					v147First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v147Name))
				out.RawByte(':')
				(v147Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"PSAConfigs\":"
		out.RawString(prefix)
		if in.PSAConfigs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v148, v149 := range in.PSAConfigs {
				if v148 > 0 {
					out.RawByte(',')
				}
				(v149).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SelfBackup\":"
		out.RawString(prefix)
		(in.SelfBackup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"SessionSettings\":"
		out.RawString(prefix)
		(in.SessionSettings).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"SoftwareBuildRole\":"
		out.RawString(prefix)
		(in.SoftwareBuildRole).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"StorageRole\":"
		out.RawString(prefix)
		(in.StorageRole).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"TrustXForwardedFor\":"
		out.RawString(prefix)
		out.Bool(bool(in.TrustXForwardedFor))
	}
	{
		const prefix string = ",\"WebhookOptions\":"
		out.RawString(prefix)
		if in.WebhookOptions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v150First := true
			for v150Name, v150Value := range in.WebhookOptions {
				if v150First {
					v150First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v150Name))
				out.RawByte(':')
				(v150Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"AuditFileOptions\":"
		out.RawString(prefix)
		if in.AuditFileOptions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v151First := true
			for v151Name, v151Value := range in.AuditFileOptions {
				if v151First {
					v151First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v151Name))
				out.RawByte(':')
				(v151Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServerConfigOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode80(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServerConfigOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode80(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServerConfigOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode80(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServerConfigOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode80(l, v)
}
func easyjsonB7f3de24Decode81(in *jlexer.Lexer, out *SelfBackupTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Schedule":
			if in.IsNull() {
				in.Skip()
				out.Schedule = nil
			} else {
				in.Delim('[')
				if out.Schedule == nil {
					if !in.IsDelim(']') {
						out.Schedule = make([]ScheduleConfig, 0, 0)
					} else {
						out.Schedule = []ScheduleConfig{}
					}
				} else {
					out.Schedule = (out.Schedule)[:0]
				}
				for !in.IsDelim(']') {
					var v152 ScheduleConfig
					(v152).UnmarshalEasyJSON(in)
					out.Schedule = append(out.Schedule, v152)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ScheduleTimezone":
			out.ScheduleTimezone = string(in.String())
		case "RetentionPolicy":
			(out.RetentionPolicy).UnmarshalEasyJSON(in)
		case "Location":
			(out.Location).UnmarshalEasyJSON(in)
		case "EncryptionKey":
			out.EncryptionKey = string(in.String())
		case "EncryptionKeyFormat":
			out.EncryptionKeyFormat = uint64(in.Uint64())
		case "Compression":
			out.Compression = CompressMode(in.Int())
		case "ExcludeJobsDB":
			out.ExcludeJobsDB = bool(in.Bool())
		case "IncludeServerLogs":
			out.IncludeServerLogs = bool(in.Bool())
		case "RestrictToSingleOrgID":
			out.RestrictToSingleOrgID = string(in.String())
		case "Index":
			out.Index = int(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode81(out *jwriter.Writer, in SelfBackupTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Schedule\":"
		out.RawString(prefix[1:])
		if in.Schedule == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v153, v154 := range in.Schedule {
				if v153 > 0 {
					out.RawByte(',')
				}
				(v154).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ScheduleTimezone\":"
		out.RawString(prefix)
		out.String(string(in.ScheduleTimezone))
	}
	{
		const prefix string = ",\"RetentionPolicy\":"
		out.RawString(prefix)
		(in.RetentionPolicy).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Location\":"
		out.RawString(prefix)
		(in.Location).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"EncryptionKey\":"
		out.RawString(prefix)
		out.String(string(in.EncryptionKey))
	}
	{
		const prefix string = ",\"EncryptionKeyFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.EncryptionKeyFormat))
	}
	{
		const prefix string = ",\"Compression\":"
		out.RawString(prefix)
		out.Int(int(in.Compression))
	}
	{
		const prefix string = ",\"ExcludeJobsDB\":"
		out.RawString(prefix)
		out.Bool(bool(in.ExcludeJobsDB))
	}
	{
		const prefix string = ",\"IncludeServerLogs\":"
		out.RawString(prefix)
		out.Bool(bool(in.IncludeServerLogs))
	}
	if in.RestrictToSingleOrgID != "" {
		const prefix string = ",\"RestrictToSingleOrgID\":"
		out.RawString(prefix)
		out.String(string(in.RestrictToSingleOrgID))
	}
	{
		const prefix string = ",\"Index\":"
		out.RawString(prefix)
		out.Int(int(in.Index))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SelfBackupTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode81(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SelfBackupTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode81(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SelfBackupTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode81(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SelfBackupTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode81(l, v)
}
func easyjsonB7f3de24Decode82(in *jlexer.Lexer, out *SelfBackupStatistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CurrentRunStart":
			out.CurrentRunStart = int64(in.Int64())
		case "LastRunStart":
			out.LastRunStart = int64(in.Int64())
		case "LastRunEnd":
			out.LastRunEnd = int64(in.Int64())
		case "LastRunSuccess":
			out.LastRunSuccess = bool(in.Bool())
		case "LastRunSize":
			out.LastRunSize = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode82(out *jwriter.Writer, in SelfBackupStatistics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CurrentRunStart\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CurrentRunStart))
	}
	{
		const prefix string = ",\"LastRunStart\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastRunStart))
	}
	{
		const prefix string = ",\"LastRunEnd\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastRunEnd))
	}
	{
		const prefix string = ",\"LastRunSuccess\":"
		out.RawString(prefix)
		out.Bool(bool(in.LastRunSuccess))
	}
	{
		const prefix string = ",\"LastRunSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastRunSize))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SelfBackupStatistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode82(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SelfBackupStatistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode82(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SelfBackupStatistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode82(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SelfBackupStatistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode82(l, v)
}
func easyjsonB7f3de24Decode83(in *jlexer.Lexer, out *SelfBackupOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Targets":
			if in.IsNull() {
				in.Skip()
				out.Targets = nil
			} else {
				in.Delim('[')
				if out.Targets == nil {
					if !in.IsDelim(']') {
						out.Targets = make([]SelfBackupTarget, 0, 0)
					} else {
						out.Targets = []SelfBackupTarget{}
					}
				} else {
					out.Targets = (out.Targets)[:0]
				}
				for !in.IsDelim(']') {
					var v155 SelfBackupTarget
					(v155).UnmarshalEasyJSON(in)
					out.Targets = append(out.Targets, v155)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode83(out *jwriter.Writer, in SelfBackupOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Targets\":"
		out.RawString(prefix[1:])
		if in.Targets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v156, v157 := range in.Targets {
				if v156 > 0 {
					out.RawByte(',')
				}
				(v157).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SelfBackupOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode83(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SelfBackupOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode83(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SelfBackupOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode83(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SelfBackupOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode83(l, v)
}
func easyjsonB7f3de24Decode84(in *jlexer.Lexer, out *SelfBackupExportOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Location":
			(out.Location).UnmarshalEasyJSON(in)
		case "EncryptionKey":
			out.EncryptionKey = string(in.String())
		case "EncryptionKeyFormat":
			out.EncryptionKeyFormat = uint64(in.Uint64())
		case "Compression":
			out.Compression = CompressMode(in.Int())
		case "ExcludeJobsDB":
			out.ExcludeJobsDB = bool(in.Bool())
		case "IncludeServerLogs":
			out.IncludeServerLogs = bool(in.Bool())
		case "RestrictToSingleOrgID":
			out.RestrictToSingleOrgID = string(in.String())
		case "Index":
			out.Index = int(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode84(out *jwriter.Writer, in SelfBackupExportOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Location\":"
		out.RawString(prefix[1:])
		(in.Location).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"EncryptionKey\":"
		out.RawString(prefix)
		out.String(string(in.EncryptionKey))
	}
	{
		const prefix string = ",\"EncryptionKeyFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.EncryptionKeyFormat))
	}
	{
		const prefix string = ",\"Compression\":"
		out.RawString(prefix)
		out.Int(int(in.Compression))
	}
	{
		const prefix string = ",\"ExcludeJobsDB\":"
		out.RawString(prefix)
		out.Bool(bool(in.ExcludeJobsDB))
	}
	{
		const prefix string = ",\"IncludeServerLogs\":"
		out.RawString(prefix)
		out.Bool(bool(in.IncludeServerLogs))
	}
	if in.RestrictToSingleOrgID != "" {
		const prefix string = ",\"RestrictToSingleOrgID\":"
		out.RawString(prefix)
		out.String(string(in.RestrictToSingleOrgID))
	}
	{
		const prefix string = ",\"Index\":"
		out.RawString(prefix)
		out.Int(int(in.Index))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SelfBackupExportOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode84(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SelfBackupExportOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode84(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SelfBackupExportOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode84(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SelfBackupExportOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode84(l, v)
}
func easyjsonB7f3de24Decode85(in *jlexer.Lexer, out *SearchSnapshotsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "SnapshotFiles":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.SnapshotFiles = make(map[string][]SearchResultFileInfo)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v158 []SearchResultFileInfo
					if in.IsNull() {
						in.Skip()
						v158 = nil
					} else {
						in.Delim('[')
						if v158 == nil {
							if !in.IsDelim(']') {
								v158 = make([]SearchResultFileInfo, 0, 0)
							} else {
								v158 = []SearchResultFileInfo{}
							}
						} else {
							v158 = (v158)[:0]
						}
						for !in.IsDelim(']') {
							var v159 SearchResultFileInfo
							(v159).UnmarshalEasyJSON(in)
							v158 = append(v158, v159)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.SnapshotFiles)[key] = v158
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode85(out *jwriter.Writer, in SearchSnapshotsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"SnapshotFiles\":"
		out.RawString(prefix)
		if in.SnapshotFiles == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v160First := true
			for v160Name, v160Value := range in.SnapshotFiles {
				if v160First {
					v160First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v160Name))
				out.RawByte(':')
				if v160Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v161, v162 := range v160Value {
						if v161 > 0 {
							out.RawByte(',')
						}
						(v162).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchSnapshotsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode85(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchSnapshotsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode85(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchSnapshotsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode85(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchSnapshotsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode85(l, v)
}
func easyjsonB7f3de24Decode86(in *jlexer.Lexer, out *SearchResultFileInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "mode":
			out.Mode = string(in.String())
		case "mtime":
			out.ModTime = string(in.String())
		case "atime":
			out.AccessTime = string(in.String())
		case "ctime":
			out.ChangeTime = string(in.String())
		case "size":
			out.Size = uint64(in.Uint64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode86(out *jwriter.Writer, in SearchResultFileInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.Mode != "" {
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	if in.ModTime != "" {
		const prefix string = ",\"mtime\":"
		out.RawString(prefix)
		out.String(string(in.ModTime))
	}
	if in.AccessTime != "" {
		const prefix string = ",\"atime\":"
		out.RawString(prefix)
		out.String(string(in.AccessTime))
	}
	if in.ChangeTime != "" {
		const prefix string = ",\"ctime\":"
		out.RawString(prefix)
		out.String(string(in.ChangeTime))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Size))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchResultFileInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode86(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchResultFileInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode86(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchResultFileInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode86(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchResultFileInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode86(l, v)
}
func easyjsonB7f3de24Decode87(in *jlexer.Lexer, out *SearchClause) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ClauseType":
			out.ClauseType = SearchClauseType(in.String())
		case "RuleField":
			out.RuleField = string(in.String())
		case "RuleOperator":
			out.RuleOperator = SearchOperatorType(in.String())
		case "RuleValue":
			out.RuleValue = string(in.String())
		case "ClauseChildren":
			if in.IsNull() {
				in.Skip()
				out.ClauseChildren = nil
			} else {
				in.Delim('[')
				if out.ClauseChildren == nil {
					if !in.IsDelim(']') {
						out.ClauseChildren = make([]SearchClause, 0, 0)
					} else {
						out.ClauseChildren = []SearchClause{}
					}
				} else {
					out.ClauseChildren = (out.ClauseChildren)[:0]
				}
				for !in.IsDelim(']') {
					var v163 SearchClause
					(v163).UnmarshalEasyJSON(in)
					out.ClauseChildren = append(out.ClauseChildren, v163)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode87(out *jwriter.Writer, in SearchClause) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ClauseType\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClauseType))
	}
	{
		const prefix string = ",\"RuleField\":"
		out.RawString(prefix)
		out.String(string(in.RuleField))
	}
	{
		const prefix string = ",\"RuleOperator\":"
		out.RawString(prefix)
		out.String(string(in.RuleOperator))
	}
	{
		const prefix string = ",\"RuleValue\":"
		out.RawString(prefix)
		out.String(string(in.RuleValue))
	}
	if len(in.ClauseChildren) != 0 {
		const prefix string = ",\"ClauseChildren\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v164, v165 := range in.ClauseChildren {
				if v164 > 0 {
					out.RawByte(',')
				}
				(v165).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchClause) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode87(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchClause) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode87(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchClause) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode87(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchClause) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode87(l, v)
}
func easyjsonB7f3de24Decode88(in *jlexer.Lexer, out *ScheduleConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FrequencyType":
			out.FrequencyType = uint64(in.Uint64())
		case "SecondsPast":
			out.SecondsPast = uint64(in.Uint64())
		case "Offset":
			out.Offset = int64(in.Int64())
		case "RestrictRuntime":
			out.RestrictRuntime = bool(in.Bool())
		case "FromTime":
			(out.FromTime).UnmarshalEasyJSON(in)
		case "ToTime":
			(out.ToTime).UnmarshalEasyJSON(in)
		case "RestrictDays":
			out.RestrictDays = bool(in.Bool())
		case "DaysSelect":
			(out.DaysSelect).UnmarshalEasyJSON(in)
		case "RandomDelaySecs":
			out.RandomDelaySecs = uint64(in.Uint64())
		case "SelectedMonth":
			out.SelectedMonth = uint64(in.Uint64())
		case "SelectedDay":
			out.SelectedDay = uint64(in.Uint64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode88(out *jwriter.Writer, in ScheduleConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FrequencyType\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.FrequencyType))
	}
	{
		const prefix string = ",\"SecondsPast\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SecondsPast))
	}
	if in.Offset != 0 {
		const prefix string = ",\"Offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"RestrictRuntime\":"
		out.RawString(prefix)
		out.Bool(bool(in.RestrictRuntime))
	}
	{
		const prefix string = ",\"FromTime\":"
		out.RawString(prefix)
		(in.FromTime).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ToTime\":"
		out.RawString(prefix)
		(in.ToTime).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"RestrictDays\":"
		out.RawString(prefix)
		out.Bool(bool(in.RestrictDays))
	}
	{
		const prefix string = ",\"DaysSelect\":"
		out.RawString(prefix)
		(in.DaysSelect).MarshalEasyJSON(out)
	}
	if in.RandomDelaySecs != 0 {
		const prefix string = ",\"RandomDelaySecs\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.RandomDelaySecs))
	}
	{
		const prefix string = ",\"SelectedMonth\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SelectedMonth))
	}
	{
		const prefix string = ",\"SelectedDay\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SelectedDay))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScheduleConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode88(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScheduleConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode88(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScheduleConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode88(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScheduleConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode88(l, v)
}
func easyjsonB7f3de24Decode89(in *jlexer.Lexer, out *SSHConnection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SSHServer":
			out.SSHServer = string(in.String())
		case "SSHUsername":
			out.SSHUsername = string(in.String())
		case "SSHAuthMode":
			out.SSHAuthMode = SSHAuthMode(in.Uint64())
		case "SSHPassword":
			out.SSHPassword = string(in.String())
		case "SSHPrivateKey":
			out.SSHPrivateKey = string(in.String())
		case "SSHCustomAuth_UseKnownHostsFile":
			out.SSHCustomAuth_UseKnownHostsFile = bool(in.Bool())
		case "SSHCustomAuth_KnownHostsFile":
			out.SSHCustomAuth_KnownHostsFile = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode89(out *jwriter.Writer, in SSHConnection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SSHServer\":"
		out.RawString(prefix[1:])
		out.String(string(in.SSHServer))
	}
	{
		const prefix string = ",\"SSHUsername\":"
		out.RawString(prefix)
		out.String(string(in.SSHUsername))
	}
	{
		const prefix string = ",\"SSHAuthMode\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SSHAuthMode))
	}
	{
		const prefix string = ",\"SSHPassword\":"
		out.RawString(prefix)
		out.String(string(in.SSHPassword))
	}
	{
		const prefix string = ",\"SSHPrivateKey\":"
		out.RawString(prefix)
		out.String(string(in.SSHPrivateKey))
	}
	{
		const prefix string = ",\"SSHCustomAuth_UseKnownHostsFile\":"
		out.RawString(prefix)
		out.Bool(bool(in.SSHCustomAuth_UseKnownHostsFile))
	}
	{
		const prefix string = ",\"SSHCustomAuth_KnownHostsFile\":"
		out.RawString(prefix)
		out.String(string(in.SSHCustomAuth_KnownHostsFile))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SSHConnection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode89(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SSHConnection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode89(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SSHConnection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode89(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SSHConnection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode89(l, v)
}
func easyjsonB7f3de24Decode90(in *jlexer.Lexer, out *SMBDestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SMBServer":
			out.SMBServer = string(in.String())
		case "SMBShare":
			out.SMBShare = string(in.String())
		case "SMBDirectory":
			out.SMBDirectory = string(in.String())
		case "SMBUsername":
			out.SMBUsername = string(in.String())
		case "SMBPassword":
			out.SMBPassword = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode90(out *jwriter.Writer, in SMBDestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SMBServer\":"
		out.RawString(prefix[1:])
		out.String(string(in.SMBServer))
	}
	{
		const prefix string = ",\"SMBShare\":"
		out.RawString(prefix)
		out.String(string(in.SMBShare))
	}
	{
		const prefix string = ",\"SMBDirectory\":"
		out.RawString(prefix)
		out.String(string(in.SMBDirectory))
	}
	{
		const prefix string = ",\"SMBUsername\":"
		out.RawString(prefix)
		out.String(string(in.SMBUsername))
	}
	{
		const prefix string = ",\"SMBPassword\":"
		out.RawString(prefix)
		out.String(string(in.SMBPassword))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SMBDestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode90(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SMBDestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode90(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SMBDestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode90(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SMBDestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode90(l, v)
}
func easyjsonB7f3de24Decode91(in *jlexer.Lexer, out *SFTPDestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SFTPServer":
			out.SFTPServer = string(in.String())
		case "SFTPUsername":
			out.SFTPUsername = string(in.String())
		case "SFTPRemotePath":
			out.SFTPRemotePath = string(in.String())
		case "SFTPAuthMode":
			out.SFTPAuthMode = SftpAuthMode(in.Uint64())
		case "SFTPPassword":
			out.SFTPPassword = string(in.String())
		case "SFTPPrivateKey":
			out.SFTPPrivateKey = string(in.String())
		case "SFTPCustomAuth_UseKnownHostsFile":
			out.SFTPCustomAuth_UseKnownHostsFile = bool(in.Bool())
		case "SFTPCustomAuth_KnownHostsFile":
			out.SFTPCustomAuth_KnownHostsFile = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode91(out *jwriter.Writer, in SFTPDestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SFTPServer\":"
		out.RawString(prefix[1:])
		out.String(string(in.SFTPServer))
	}
	{
		const prefix string = ",\"SFTPUsername\":"
		out.RawString(prefix)
		out.String(string(in.SFTPUsername))
	}
	{
		const prefix string = ",\"SFTPRemotePath\":"
		out.RawString(prefix)
		out.String(string(in.SFTPRemotePath))
	}
	{
		const prefix string = ",\"SFTPAuthMode\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SFTPAuthMode))
	}
	{
		const prefix string = ",\"SFTPPassword\":"
		out.RawString(prefix)
		out.String(string(in.SFTPPassword))
	}
	{
		const prefix string = ",\"SFTPPrivateKey\":"
		out.RawString(prefix)
		out.String(string(in.SFTPPrivateKey))
	}
	{
		const prefix string = ",\"SFTPCustomAuth_UseKnownHostsFile\":"
		out.RawString(prefix)
		out.Bool(bool(in.SFTPCustomAuth_UseKnownHostsFile))
	}
	{
		const prefix string = ",\"SFTPCustomAuth_KnownHostsFile\":"
		out.RawString(prefix)
		out.String(string(in.SFTPCustomAuth_KnownHostsFile))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SFTPDestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode91(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SFTPDestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode91(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SFTPDestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode91(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SFTPDestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode91(l, v)
}
func easyjsonB7f3de24Decode92(in *jlexer.Lexer, out *S3GenericVirtualStorageRole) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "S3Endpoint":
			out.S3Endpoint = string(in.String())
		case "IAMEndpoint":
			out.IAMEndpoint = string(in.String())
		case "MasterBucket":
			out.MasterBucket = string(in.String())
		case "AccessKey":
			out.AccessKey = string(in.String())
		case "SecretKey":
			out.SecretKey = string(in.String())
		case "UseObjectLock":
			out.UseObjectLock_Legacy_DoNotUse = bool(in.Bool())
		case "ObjectLockMode":
			out.ObjectLockMode = uint8(in.Uint8())
		case "ObjectLockDays":
			out.ObjectLockDays = int(in.Int())
		case "RemoveDeleted":
			out.RemoveDeleted = bool(in.Bool())
		case "Region":
			out.Region = string(in.String())
		case "Prefix":
			out.Prefix = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode92(out *jwriter.Writer, in S3GenericVirtualStorageRole) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"S3Endpoint\":"
		out.RawString(prefix[1:])
		out.String(string(in.S3Endpoint))
	}
	{
		const prefix string = ",\"IAMEndpoint\":"
		out.RawString(prefix)
		out.String(string(in.IAMEndpoint))
	}
	{
		const prefix string = ",\"MasterBucket\":"
		out.RawString(prefix)
		out.String(string(in.MasterBucket))
	}
	{
		const prefix string = ",\"AccessKey\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"SecretKey\":"
		out.RawString(prefix)
		out.String(string(in.SecretKey))
	}
	{
		const prefix string = ",\"UseObjectLock\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseObjectLock_Legacy_DoNotUse))
	}
	{
		const prefix string = ",\"ObjectLockMode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ObjectLockMode))
	}
	{
		const prefix string = ",\"ObjectLockDays\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectLockDays))
	}
	{
		const prefix string = ",\"RemoveDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.RemoveDeleted))
	}
	{
		const prefix string = ",\"Region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"Prefix\":"
		out.RawString(prefix)
		out.String(string(in.Prefix))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v S3GenericVirtualStorageRole) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode92(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v S3GenericVirtualStorageRole) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode92(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *S3GenericVirtualStorageRole) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode92(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *S3GenericVirtualStorageRole) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode92(l, v)
}
func easyjsonB7f3de24Decode93(in *jlexer.Lexer, out *S3DestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "S3Server":
			out.S3Server = string(in.String())
		case "S3UsesTLS":
			out.S3UsesTLS = bool(in.Bool())
		case "S3AccessKey":
			out.S3AccessKey = string(in.String())
		case "S3SecretKey":
			out.S3SecretKey = string(in.String())
		case "S3BucketName":
			out.S3BucketName = string(in.String())
		case "S3Subdir":
			out.S3Subdir = string(in.String())
		case "S3CustomRegion":
			out.S3CustomRegion = string(in.String())
		case "S3UsesV2Signing":
			out.S3UsesV2Signing = bool(in.Bool())
		case "S3RemoveDeleted":
			out.S3RemoveDeleted = bool(in.Bool())
		case "S3ObjectLockMode":
			out.S3ObjectLockMode = uint8(in.Uint8())
		case "S3ObjectLockDays":
			out.S3ObjectLockDays = int(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode93(out *jwriter.Writer, in S3DestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"S3Server\":"
		out.RawString(prefix[1:])
		out.String(string(in.S3Server))
	}
	{
		const prefix string = ",\"S3UsesTLS\":"
		out.RawString(prefix)
		out.Bool(bool(in.S3UsesTLS))
	}
	{
		const prefix string = ",\"S3AccessKey\":"
		out.RawString(prefix)
		out.String(string(in.S3AccessKey))
	}
	{
		const prefix string = ",\"S3SecretKey\":"
		out.RawString(prefix)
		out.String(string(in.S3SecretKey))
	}
	{
		const prefix string = ",\"S3BucketName\":"
		out.RawString(prefix)
		out.String(string(in.S3BucketName))
	}
	{
		const prefix string = ",\"S3Subdir\":"
		out.RawString(prefix)
		out.String(string(in.S3Subdir))
	}
	{
		const prefix string = ",\"S3CustomRegion\":"
		out.RawString(prefix)
		out.String(string(in.S3CustomRegion))
	}
	{
		const prefix string = ",\"S3UsesV2Signing\":"
		out.RawString(prefix)
		out.Bool(bool(in.S3UsesV2Signing))
	}
	{
		const prefix string = ",\"S3RemoveDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.S3RemoveDeleted))
	}
	{
		const prefix string = ",\"S3ObjectLockMode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.S3ObjectLockMode))
	}
	{
		const prefix string = ",\"S3ObjectLockDays\":"
		out.RawString(prefix)
		out.Int(int(in.S3ObjectLockDays))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v S3DestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode93(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v S3DestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode93(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *S3DestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode93(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *S3DestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode93(l, v)
}
func easyjsonB7f3de24Decode94(in *jlexer.Lexer, out *RetentionRange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = RetentionRangeType(in.Int64())
		case "Timestamp":
			out.Timestamp = int64(in.Int64())
		case "Jobs":
			out.Jobs = int64(in.Int64())
		case "Days":
			out.Days = int64(in.Int64())
		case "Weeks":
			out.Weeks = int64(in.Int64())
		case "Months":
			out.Months = int64(in.Int64())
		case "Years":
			out.Years = int64(in.Int64())
		case "WeekOffset":
			out.WeekOffset = int64(in.Int64())
		case "MonthOffset":
			out.MonthOffset = int64(in.Int64())
		case "YearOffset":
			out.YearOffset = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode94(out *jwriter.Writer, in RetentionRange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Type))
	}
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"Jobs\":"
		out.RawString(prefix)
		out.Int64(int64(in.Jobs))
	}
	{
		const prefix string = ",\"Days\":"
		out.RawString(prefix)
		out.Int64(int64(in.Days))
	}
	{
		const prefix string = ",\"Weeks\":"
		out.RawString(prefix)
		out.Int64(int64(in.Weeks))
	}
	{
		const prefix string = ",\"Months\":"
		out.RawString(prefix)
		out.Int64(int64(in.Months))
	}
	{
		const prefix string = ",\"Years\":"
		out.RawString(prefix)
		out.Int64(int64(in.Years))
	}
	{
		const prefix string = ",\"WeekOffset\":"
		out.RawString(prefix)
		out.Int64(int64(in.WeekOffset))
	}
	{
		const prefix string = ",\"MonthOffset\":"
		out.RawString(prefix)
		out.Int64(int64(in.MonthOffset))
	}
	{
		const prefix string = ",\"YearOffset\":"
		out.RawString(prefix)
		out.Int64(int64(in.YearOffset))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RetentionRange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode94(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RetentionRange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode94(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RetentionRange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode94(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RetentionRange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode94(l, v)
}
func easyjsonB7f3de24Decode95(in *jlexer.Lexer, out *RetentionPolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Mode":
			out.Mode = RetentionMode(in.Int64())
		case "Ranges":
			if in.IsNull() {
				in.Skip()
				out.Ranges = nil
			} else {
				in.Delim('[')
				if out.Ranges == nil {
					if !in.IsDelim(']') {
						out.Ranges = make([]RetentionRange, 0, 0)
					} else {
						out.Ranges = []RetentionRange{}
					}
				} else {
					out.Ranges = (out.Ranges)[:0]
				}
				for !in.IsDelim(']') {
					var v166 RetentionRange
					(v166).UnmarshalEasyJSON(in)
					out.Ranges = append(out.Ranges, v166)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode95(out *jwriter.Writer, in RetentionPolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Mode))
	}
	{
		const prefix string = ",\"Ranges\":"
		out.RawString(prefix)
		if in.Ranges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v167, v168 := range in.Ranges {
				if v167 > 0 {
					out.RawByte(',')
				}
				(v168).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RetentionPolicy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode95(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RetentionPolicy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode95(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RetentionPolicy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode95(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RetentionPolicy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode95(l, v)
}
func easyjsonB7f3de24Decode96(in *jlexer.Lexer, out *RestoreJobAdvancedOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = RestoreType(in.Int())
		case "OverwriteExistingFiles":
			out.OverwriteExistingFiles = bool(in.Bool())
		case "OverwriteIfNewer":
			out.OverwriteIfNewer = bool(in.Bool())
		case "OverwriteIfDifferentContent":
			out.OverwriteIfDifferentContent = bool(in.Bool())
		case "OverwriteForcePermissions":
			out.OverwriteForcePermissions = bool(in.Bool())
		case "DestIsOriginalLocation":
			out.DestIsOriginalLocation = bool(in.Bool())
		case "DestPath":
			out.DestPath = string(in.String())
		case "ExactDestPaths":
			if in.IsNull() {
				in.Skip()
				out.ExactDestPaths = nil
			} else {
				in.Delim('[')
				if out.ExactDestPaths == nil {
					if !in.IsDelim(']') {
						out.ExactDestPaths = make([]string, 0, 4)
					} else {
						out.ExactDestPaths = []string{}
					}
				} else {
					out.ExactDestPaths = (out.ExactDestPaths)[:0]
				}
				for !in.IsDelim(']') {
					var v169 string
					v169 = string(in.String())
					out.ExactDestPaths = append(out.ExactDestPaths, v169)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ArchiveFormat":
			out.ArchiveFormat = RestoreArchiveFormat(in.Int())
		case "SkipUnreadableChunks":
			out.SkipUnreadableChunks = bool(in.Bool())
		case "OnDiskIndexesKey":
			out.OnDiskIndexesKey = bool(in.Bool())
		case "Office365Credential":
			easyjsonB7f3de24Decode97(in, &out.Office365Credential)
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "Host":
			out.Host = string(in.String())
		case "Port":
			out.Port = string(in.String())
		case "UseSsl":
			out.UseSsl = bool(in.Bool())
		case "SslAllowInvalid":
			out.SslAllowInvalid = bool(in.Bool())
		case "SslCaFile":
			out.SslCaFile = string(in.String())
		case "SslCrtFile":
			out.SslCrtFile = string(in.String())
		case "SslKeyFile":
			out.SslKeyFile = string(in.String())
		case "MsSqlConnection":
			(out.MsSqlConnection).UnmarshalEasyJSON(in)
		case "VMwareConnection":
			(out.VMwareConnection).UnmarshalEasyJSON(in)
		case "HyperVConnection":
			(out.HyperVConnection).UnmarshalEasyJSON(in)
		case "ProxmoxConnection":
			(out.ProxmoxConnection).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode96(out *jwriter.Writer, in RestoreJobAdvancedOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"OverwriteExistingFiles\":"
		out.RawString(prefix)
		out.Bool(bool(in.OverwriteExistingFiles))
	}
	{
		const prefix string = ",\"OverwriteIfNewer\":"
		out.RawString(prefix)
		out.Bool(bool(in.OverwriteIfNewer))
	}
	{
		const prefix string = ",\"OverwriteIfDifferentContent\":"
		out.RawString(prefix)
		out.Bool(bool(in.OverwriteIfDifferentContent))
	}
	{
		const prefix string = ",\"OverwriteForcePermissions\":"
		out.RawString(prefix)
		out.Bool(bool(in.OverwriteForcePermissions))
	}
	{
		const prefix string = ",\"DestIsOriginalLocation\":"
		out.RawString(prefix)
		out.Bool(bool(in.DestIsOriginalLocation))
	}
	{
		const prefix string = ",\"DestPath\":"
		out.RawString(prefix)
		out.String(string(in.DestPath))
	}
	{
		const prefix string = ",\"ExactDestPaths\":"
		out.RawString(prefix)
		if in.ExactDestPaths == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v170, v171 := range in.ExactDestPaths {
				if v170 > 0 {
					out.RawByte(',')
				}
				out.String(string(v171))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ArchiveFormat\":"
		out.RawString(prefix)
		out.Int(int(in.ArchiveFormat))
	}
	{
		const prefix string = ",\"SkipUnreadableChunks\":"
		out.RawString(prefix)
		out.Bool(bool(in.SkipUnreadableChunks))
	}
	{
		const prefix string = ",\"OnDiskIndexesKey\":"
		out.RawString(prefix)
		out.Bool(bool(in.OnDiskIndexesKey))
	}
	if true {
		const prefix string = ",\"Office365Credential\":"
		out.RawString(prefix)
		easyjsonB7f3de24Encode97(out, in.Office365Credential)
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"UseSsl\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseSsl))
	}
	{
		const prefix string = ",\"SslAllowInvalid\":"
		out.RawString(prefix)
		out.Bool(bool(in.SslAllowInvalid))
	}
	{
		const prefix string = ",\"SslCaFile\":"
		out.RawString(prefix)
		out.String(string(in.SslCaFile))
	}
	{
		const prefix string = ",\"SslCrtFile\":"
		out.RawString(prefix)
		out.String(string(in.SslCrtFile))
	}
	{
		const prefix string = ",\"SslKeyFile\":"
		out.RawString(prefix)
		out.String(string(in.SslKeyFile))
	}
	if true {
		const prefix string = ",\"MsSqlConnection\":"
		out.RawString(prefix)
		(in.MsSqlConnection).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"VMwareConnection\":"
		out.RawString(prefix)
		(in.VMwareConnection).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"HyperVConnection\":"
		out.RawString(prefix)
		(in.HyperVConnection).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"ProxmoxConnection\":"
		out.RawString(prefix)
		(in.ProxmoxConnection).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RestoreJobAdvancedOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode96(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RestoreJobAdvancedOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode96(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RestoreJobAdvancedOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode96(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RestoreJobAdvancedOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode96(l, v)
}
func easyjsonB7f3de24Decode97(in *jlexer.Lexer, out *RestoreOffice365Credential) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AppID":
			out.AppID = string(in.String())
		case "TenantID":
			out.TenantID = string(in.String())
		case "Secret":
			out.Secret = string(in.String())
		case "AppCert":
			out.AppCert = string(in.String())
		case "Region":
			out.Region = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode97(out *jwriter.Writer, in RestoreOffice365Credential) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AppID\":"
		out.RawString(prefix[1:])
		out.String(string(in.AppID))
	}
	{
		const prefix string = ",\"TenantID\":"
		out.RawString(prefix)
		out.String(string(in.TenantID))
	}
	{
		const prefix string = ",\"Secret\":"
		out.RawString(prefix)
		out.String(string(in.Secret))
	}
	{
		const prefix string = ",\"AppCert\":"
		out.RawString(prefix)
		out.String(string(in.AppCert))
	}
	{
		const prefix string = ",\"Region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}
func easyjsonB7f3de24Decode98(in *jlexer.Lexer, out *RequestStorageVaultResponseMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "DestinationID":
			out.DestinationID = string(in.String())
		case "ProfileHash":
			out.ProfileHash = string(in.String())
		case "Profile":
			(out.Profile).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode98(out *jwriter.Writer, in RequestStorageVaultResponseMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"DestinationID\":"
		out.RawString(prefix)
		out.String(string(in.DestinationID))
	}
	{
		const prefix string = ",\"ProfileHash\":"
		out.RawString(prefix)
		out.String(string(in.ProfileHash))
	}
	{
		const prefix string = ",\"Profile\":"
		out.RawString(prefix)
		(in.Profile).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestStorageVaultResponseMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode98(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestStorageVaultResponseMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode98(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestStorageVaultResponseMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode98(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestStorageVaultResponseMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode98(l, v)
}
func easyjsonB7f3de24Decode99(in *jlexer.Lexer, out *ReplicatorStateAPIResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Description":
			out.Description = string(in.String())
		case "RemoteServerID":
			out.RemoteServerID = string(in.String())
		case "DisplayClass":
			out.DisplayClass = ReplicatorDisplayClass(in.Int())
		case "ActiveWorkers":
			out.ActiveWorkers = int32(in.Int32())
		case "TotalWorkers":
			out.TotalWorkers = int(in.Int())
		case "State":
			out.State = ReplicatorState(in.Int())
		case "ItemsQueued":
			out.ItemsQueued = int(in.Int())
		case "BytesQueued":
			out.BytesQueued = int64(in.Int64())
		case "LastWorkerSubmitTime":
			out.LastWorkerSubmitTime = int64(in.Int64())
		case "CurrentTime":
			out.CurrentTime = int64(in.Int64())
		case "ItemsReplicated":
			out.ItemsReplicated = int64(in.Int64())
		case "BytesReplicated":
			out.BytesReplicated = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode99(out *jwriter.Writer, in ReplicatorStateAPIResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"RemoteServerID\":"
		out.RawString(prefix)
		out.String(string(in.RemoteServerID))
	}
	{
		const prefix string = ",\"DisplayClass\":"
		out.RawString(prefix)
		out.Int(int(in.DisplayClass))
	}
	{
		const prefix string = ",\"ActiveWorkers\":"
		out.RawString(prefix)
		out.Int32(int32(in.ActiveWorkers))
	}
	{
		const prefix string = ",\"TotalWorkers\":"
		out.RawString(prefix)
		out.Int(int(in.TotalWorkers))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"ItemsQueued\":"
		out.RawString(prefix)
		out.Int(int(in.ItemsQueued))
	}
	{
		const prefix string = ",\"BytesQueued\":"
		out.RawString(prefix)
		out.Int64(int64(in.BytesQueued))
	}
	{
		const prefix string = ",\"LastWorkerSubmitTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastWorkerSubmitTime))
	}
	{
		const prefix string = ",\"CurrentTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.CurrentTime))
	}
	{
		const prefix string = ",\"ItemsReplicated\":"
		out.RawString(prefix)
		out.Int64(int64(in.ItemsReplicated))
	}
	{
		const prefix string = ",\"BytesReplicated\":"
		out.RawString(prefix)
		out.Int64(int64(in.BytesReplicated))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplicatorStateAPIResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode99(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplicatorStateAPIResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode99(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplicatorStateAPIResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode99(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplicatorStateAPIResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode99(l, v)
}
func easyjsonB7f3de24Decode100(in *jlexer.Lexer, out *ReplicaServer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = RemoteServerType(in.String())
		case "Description":
			out.Description = string(in.String())
		case "RemoteAddress":
			out.RemoteAddress = string(in.String())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "LDAP":
			(out.LDAP).UnmarshalEasyJSON(in)
		case "OIDC":
			(out.OIDC).UnmarshalEasyJSON(in)
		case "B2":
			(out.B2).UnmarshalEasyJSON(in)
		case "Wasabi":
			(out.Wasabi).UnmarshalEasyJSON(in)
		case "Custom":
			(out.Custom).UnmarshalEasyJSON(in)
		case "S3":
			(out.S3).UnmarshalEasyJSON(in)
		case "AWS":
			(out.AWS).UnmarshalEasyJSON(in)
		case "Storj":
			(out.Storj).UnmarshalEasyJSON(in)
		case "ImpPartner":
			(out.ImpPartner).UnmarshalEasyJSON(in)
		case "ImpUser":
			(out.ImpUser).UnmarshalEasyJSON(in)
		case "ReplicaDeletionStrategy":
			out.ReplicaDeletionStrategy = ReplicaDeletionStrategy(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode100(out *jwriter.Writer, in ReplicaServer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.RemoteAddress != "" {
		const prefix string = ",\"RemoteAddress\":"
		out.RawString(prefix)
		out.String(string(in.RemoteAddress))
	}
	if in.Username != "" {
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.Password != "" {
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if true {
		const prefix string = ",\"LDAP\":"
		out.RawString(prefix)
		(in.LDAP).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"OIDC\":"
		out.RawString(prefix)
		(in.OIDC).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"B2\":"
		out.RawString(prefix)
		(in.B2).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Wasabi\":"
		out.RawString(prefix)
		(in.Wasabi).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Custom\":"
		out.RawString(prefix)
		(in.Custom).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"S3\":"
		out.RawString(prefix)
		(in.S3).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"AWS\":"
		out.RawString(prefix)
		(in.AWS).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Storj\":"
		out.RawString(prefix)
		(in.Storj).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"ImpPartner\":"
		out.RawString(prefix)
		(in.ImpPartner).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"ImpUser\":"
		out.RawString(prefix)
		(in.ImpUser).MarshalEasyJSON(out)
	}
	if in.ReplicaDeletionStrategy != "" {
		const prefix string = ",\"ReplicaDeletionStrategy\":"
		out.RawString(prefix)
		out.String(string(in.ReplicaDeletionStrategy))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplicaServer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode100(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplicaServer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode100(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplicaServer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode100(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplicaServer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode100(l, v)
}
func easyjsonB7f3de24Decode101(in *jlexer.Lexer, out *RemoteStorageOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = RemoteServerType(in.String())
		case "Description":
			out.Description = string(in.String())
		case "RemoteAddress":
			out.RemoteAddress = string(in.String())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "LDAP":
			(out.LDAP).UnmarshalEasyJSON(in)
		case "OIDC":
			(out.OIDC).UnmarshalEasyJSON(in)
		case "B2":
			(out.B2).UnmarshalEasyJSON(in)
		case "Wasabi":
			(out.Wasabi).UnmarshalEasyJSON(in)
		case "Custom":
			(out.Custom).UnmarshalEasyJSON(in)
		case "S3":
			(out.S3).UnmarshalEasyJSON(in)
		case "AWS":
			(out.AWS).UnmarshalEasyJSON(in)
		case "Storj":
			(out.Storj).UnmarshalEasyJSON(in)
		case "ImpPartner":
			(out.ImpPartner).UnmarshalEasyJSON(in)
		case "ImpUser":
			(out.ImpUser).UnmarshalEasyJSON(in)
		case "StorageLimitEnabled":
			out.StorageLimitEnabled = bool(in.Bool())
		case "StorageLimitBytes":
			out.StorageLimitBytes = int64(in.Int64())
		case "RebrandStorage":
			out.RebrandStorage = bool(in.Bool())
		case "ID":
			out.ID = string(in.String())
		case "Default":
			out.Default = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode101(out *jwriter.Writer, in RemoteStorageOption) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.RemoteAddress != "" {
		const prefix string = ",\"RemoteAddress\":"
		out.RawString(prefix)
		out.String(string(in.RemoteAddress))
	}
	if in.Username != "" {
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.Password != "" {
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if true {
		const prefix string = ",\"LDAP\":"
		out.RawString(prefix)
		(in.LDAP).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"OIDC\":"
		out.RawString(prefix)
		(in.OIDC).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"B2\":"
		out.RawString(prefix)
		(in.B2).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Wasabi\":"
		out.RawString(prefix)
		(in.Wasabi).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Custom\":"
		out.RawString(prefix)
		(in.Custom).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"S3\":"
		out.RawString(prefix)
		(in.S3).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"AWS\":"
		out.RawString(prefix)
		(in.AWS).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Storj\":"
		out.RawString(prefix)
		(in.Storj).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"ImpPartner\":"
		out.RawString(prefix)
		(in.ImpPartner).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"ImpUser\":"
		out.RawString(prefix)
		(in.ImpUser).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"StorageLimitEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.StorageLimitEnabled))
	}
	{
		const prefix string = ",\"StorageLimitBytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.StorageLimitBytes))
	}
	{
		const prefix string = ",\"RebrandStorage\":"
		out.RawString(prefix)
		out.Bool(bool(in.RebrandStorage))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Default\":"
		out.RawString(prefix)
		out.Bool(bool(in.Default))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoteStorageOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode101(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoteStorageOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode101(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoteStorageOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode101(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoteStorageOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode101(l, v)
}
func easyjsonB7f3de24Decode102(in *jlexer.Lexer, out *RemoteServerAddress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = RemoteServerType(in.String())
		case "Description":
			out.Description = string(in.String())
		case "RemoteAddress":
			out.RemoteAddress = string(in.String())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "LDAP":
			(out.LDAP).UnmarshalEasyJSON(in)
		case "OIDC":
			(out.OIDC).UnmarshalEasyJSON(in)
		case "B2":
			(out.B2).UnmarshalEasyJSON(in)
		case "Wasabi":
			(out.Wasabi).UnmarshalEasyJSON(in)
		case "Custom":
			(out.Custom).UnmarshalEasyJSON(in)
		case "S3":
			(out.S3).UnmarshalEasyJSON(in)
		case "AWS":
			(out.AWS).UnmarshalEasyJSON(in)
		case "Storj":
			(out.Storj).UnmarshalEasyJSON(in)
		case "ImpPartner":
			(out.ImpPartner).UnmarshalEasyJSON(in)
		case "ImpUser":
			(out.ImpUser).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode102(out *jwriter.Writer, in RemoteServerAddress) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.RemoteAddress != "" {
		const prefix string = ",\"RemoteAddress\":"
		out.RawString(prefix)
		out.String(string(in.RemoteAddress))
	}
	if in.Username != "" {
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.Password != "" {
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if true {
		const prefix string = ",\"LDAP\":"
		out.RawString(prefix)
		(in.LDAP).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"OIDC\":"
		out.RawString(prefix)
		(in.OIDC).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"B2\":"
		out.RawString(prefix)
		(in.B2).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Wasabi\":"
		out.RawString(prefix)
		(in.Wasabi).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Custom\":"
		out.RawString(prefix)
		(in.Custom).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"S3\":"
		out.RawString(prefix)
		(in.S3).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"AWS\":"
		out.RawString(prefix)
		(in.AWS).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Storj\":"
		out.RawString(prefix)
		(in.Storj).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"ImpPartner\":"
		out.RawString(prefix)
		(in.ImpPartner).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"ImpUser\":"
		out.RawString(prefix)
		(in.ImpUser).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoteServerAddress) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode102(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoteServerAddress) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode102(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoteServerAddress) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode102(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoteServerAddress) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode102(l, v)
}
func easyjsonB7f3de24Decode103(in *jlexer.Lexer, out *RegistrationLobbyConnection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DeviceID":
			out.DeviceID = string(in.String())
		case "OrganizationID":
			out.OrganizationID = string(in.String())
		case "FriendlyName":
			out.FriendlyName = string(in.String())
		case "ReportedVersion":
			out.ReportedVersion = string(in.String())
		case "ReportedPlatform":
			out.ReportedPlatform = string(in.String())
		case "ReportedPlatformVersion":
			(out.ReportedPlatformVersion).UnmarshalEasyJSON(in)
		case "DeviceTimeZone":
			out.DeviceTimeZone = string(in.String())
		case "IPAddress":
			out.IPAddress = string(in.String())
		case "Host":
			out.Host = string(in.String())
		case "ConnectionTime":
			out.ConnectionTime = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode103(out *jwriter.Writer, in RegistrationLobbyConnection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DeviceID\":"
		out.RawString(prefix[1:])
		out.String(string(in.DeviceID))
	}
	{
		const prefix string = ",\"OrganizationID\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"FriendlyName\":"
		out.RawString(prefix)
		out.String(string(in.FriendlyName))
	}
	{
		const prefix string = ",\"ReportedVersion\":"
		out.RawString(prefix)
		out.String(string(in.ReportedVersion))
	}
	{
		const prefix string = ",\"ReportedPlatform\":"
		out.RawString(prefix)
		out.String(string(in.ReportedPlatform))
	}
	if true {
		const prefix string = ",\"ReportedPlatformVersion\":"
		out.RawString(prefix)
		(in.ReportedPlatformVersion).MarshalEasyJSON(out)
	}
	if in.DeviceTimeZone != "" {
		const prefix string = ",\"DeviceTimeZone\":"
		out.RawString(prefix)
		out.String(string(in.DeviceTimeZone))
	}
	if in.IPAddress != "" {
		const prefix string = ",\"IPAddress\":"
		out.RawString(prefix)
		out.String(string(in.IPAddress))
	}
	if in.Host != "" {
		const prefix string = ",\"Host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"ConnectionTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ConnectionTime))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegistrationLobbyConnection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode103(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegistrationLobbyConnection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode103(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegistrationLobbyConnection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode103(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegistrationLobbyConnection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode103(l, v)
}
func easyjsonB7f3de24Decode104(in *jlexer.Lexer, out *RegisterOfficeApplicationCheckResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Continuation":
			out.Continuation = string(in.String())
		case "Completed":
			out.Completed = bool(in.Bool())
		case "Error":
			out.Error = string(in.String())
		case "Result":
			(out.Result).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode104(out *jwriter.Writer, in RegisterOfficeApplicationCheckResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Continuation\":"
		out.RawString(prefix[1:])
		out.String(string(in.Continuation))
	}
	{
		const prefix string = ",\"Completed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Completed))
	}
	{
		const prefix string = ",\"Error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	if true {
		const prefix string = ",\"Result\":"
		out.RawString(prefix)
		(in.Result).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegisterOfficeApplicationCheckResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode104(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegisterOfficeApplicationCheckResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode104(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegisterOfficeApplicationCheckResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode104(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegisterOfficeApplicationCheckResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode104(l, v)
}
func easyjsonB7f3de24Decode105(in *jlexer.Lexer, out *RegisterOfficeApplicationBeginResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Continuation":
			out.Continuation = string(in.String())
		case "VerificationURL":
			out.VerificationURL = string(in.String())
		case "UserCode":
			out.UserCode = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode105(out *jwriter.Writer, in RegisterOfficeApplicationBeginResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Continuation\":"
		out.RawString(prefix[1:])
		out.String(string(in.Continuation))
	}
	{
		const prefix string = ",\"VerificationURL\":"
		out.RawString(prefix)
		out.String(string(in.VerificationURL))
	}
	{
		const prefix string = ",\"UserCode\":"
		out.RawString(prefix)
		out.String(string(in.UserCode))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegisterOfficeApplicationBeginResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode105(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegisterOfficeApplicationBeginResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode105(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegisterOfficeApplicationBeginResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode105(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegisterOfficeApplicationBeginResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode105(l, v)
}
func easyjsonB7f3de24Decode106(in *jlexer.Lexer, out *RatelimitRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MatchRegex":
			out.MatchRegex = string(in.String())
		case "BytesPerSecond":
			out.BytesPerSecond = uint64(in.Uint64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode106(out *jwriter.Writer, in RatelimitRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MatchRegex\":"
		out.RawString(prefix[1:])
		out.String(string(in.MatchRegex))
	}
	{
		const prefix string = ",\"BytesPerSecond\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.BytesPerSecond))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RatelimitRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode106(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RatelimitRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode106(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RatelimitRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode106(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RatelimitRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode106(l, v)
}
func easyjsonB7f3de24Decode107(in *jlexer.Lexer, out *RatelimitOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make([]RatelimitRule, 0, 2)
					} else {
						out.Rules = []RatelimitRule{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v172 RatelimitRule
					(v172).UnmarshalEasyJSON(in)
					out.Rules = append(out.Rules, v172)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode107(out *jwriter.Writer, in RatelimitOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Rules) != 0 {
		const prefix string = ",\"Rules\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v173, v174 := range in.Rules {
				if v173 > 0 {
					out.RawByte(',')
				}
				(v174).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RatelimitOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode107(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RatelimitOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode107(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RatelimitOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode107(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RatelimitOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode107(l, v)
}
func easyjsonB7f3de24Decode108(in *jlexer.Lexer, out *PublicBrandingProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ProductName":
			out.ProductName = string(in.String())
		case "CompanyName":
			out.CompanyName = string(in.String())
		case "HelpURL":
			out.HelpURL = string(in.String())
		case "HelpIsPopup":
			out.HelpIsPopup = bool(in.Bool())
		case "DefaultLoginServerURL":
			out.DefaultLoginServerURL = string(in.String())
		case "TileBackgroundColor":
			out.TileBackgroundColor = string(in.String())
		case "AccountRegisterURL":
			out.AccountRegisterURL = string(in.String())
		case "HideBackgroundLogo":
			out.HideBackgroundLogo = bool(in.Bool())
		case "CloudStorageName":
			out.CloudStorageName = string(in.String())
		case "AdminHidePreBuiltClientOption":
			out.AdminHidePreBuiltClientOption = bool(in.Bool())
		case "AdminHideBrandedCloudStorage":
			out.AdminHideBrandedCloudStorage = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode108(out *jwriter.Writer, in PublicBrandingProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ProductName\":"
		out.RawString(prefix[1:])
		out.String(string(in.ProductName))
	}
	{
		const prefix string = ",\"CompanyName\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"HelpURL\":"
		out.RawString(prefix)
		out.String(string(in.HelpURL))
	}
	{
		const prefix string = ",\"HelpIsPopup\":"
		out.RawString(prefix)
		out.Bool(bool(in.HelpIsPopup))
	}
	{
		const prefix string = ",\"DefaultLoginServerURL\":"
		out.RawString(prefix)
		out.String(string(in.DefaultLoginServerURL))
	}
	{
		const prefix string = ",\"TileBackgroundColor\":"
		out.RawString(prefix)
		out.String(string(in.TileBackgroundColor))
	}
	{
		const prefix string = ",\"AccountRegisterURL\":"
		out.RawString(prefix)
		out.String(string(in.AccountRegisterURL))
	}
	{
		const prefix string = ",\"HideBackgroundLogo\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideBackgroundLogo))
	}
	{
		const prefix string = ",\"CloudStorageName\":"
		out.RawString(prefix)
		out.String(string(in.CloudStorageName))
	}
	{
		const prefix string = ",\"AdminHidePreBuiltClientOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.AdminHidePreBuiltClientOption))
	}
	{
		const prefix string = ",\"AdminHideBrandedCloudStorage\":"
		out.RawString(prefix)
		out.Bool(bool(in.AdminHideBrandedCloudStorage))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PublicBrandingProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode108(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublicBrandingProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode108(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublicBrandingProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode108(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublicBrandingProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode108(l, v)
}
func easyjsonB7f3de24Decode109(in *jlexer.Lexer, out *ProxmoxRestoreTargetOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Node":
			out.Node = string(in.String())
		case "SSH":
			(out.SSH).UnmarshalEasyJSON(in)
		case "Storage":
			out.Storage = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode109(out *jwriter.Writer, in ProxmoxRestoreTargetOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Node\":"
		out.RawString(prefix[1:])
		out.String(string(in.Node))
	}
	{
		const prefix string = ",\"SSH\":"
		out.RawString(prefix)
		(in.SSH).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Storage\":"
		out.RawString(prefix)
		out.String(string(in.Storage))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProxmoxRestoreTargetOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode109(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProxmoxRestoreTargetOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode109(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProxmoxRestoreTargetOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode109(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProxmoxRestoreTargetOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode109(l, v)
}
func easyjsonB7f3de24Decode110(in *jlexer.Lexer, out *ProxmoxConnection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SSH":
			(out.SSH).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode110(out *jwriter.Writer, in ProxmoxConnection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SSH\":"
		out.RawString(prefix[1:])
		(in.SSH).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProxmoxConnection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode110(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProxmoxConnection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode110(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProxmoxConnection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode110(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProxmoxConnection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode110(l, v)
}
func easyjsonB7f3de24Decode111(in *jlexer.Lexer, out *ProtectedItemEngineTypePolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ShouldRestrictEngineTypeList":
			out.ShouldRestrictEngineTypeList = bool(in.Bool())
		case "AllowedEngineTypeWhenRestricted":
			if in.IsNull() {
				in.Skip()
				out.AllowedEngineTypeWhenRestricted = nil
			} else {
				in.Delim('[')
				if out.AllowedEngineTypeWhenRestricted == nil {
					if !in.IsDelim(']') {
						out.AllowedEngineTypeWhenRestricted = make([]string, 0, 4)
					} else {
						out.AllowedEngineTypeWhenRestricted = []string{}
					}
				} else {
					out.AllowedEngineTypeWhenRestricted = (out.AllowedEngineTypeWhenRestricted)[:0]
				}
				for !in.IsDelim(']') {
					var v175 string
					v175 = string(in.String())
					out.AllowedEngineTypeWhenRestricted = append(out.AllowedEngineTypeWhenRestricted, v175)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode111(out *jwriter.Writer, in ProtectedItemEngineTypePolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ShouldRestrictEngineTypeList\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.ShouldRestrictEngineTypeList))
	}
	{
		const prefix string = ",\"AllowedEngineTypeWhenRestricted\":"
		out.RawString(prefix)
		if in.AllowedEngineTypeWhenRestricted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v176, v177 := range in.AllowedEngineTypeWhenRestricted {
				if v176 > 0 {
					out.RawByte(',')
				}
				out.String(string(v177))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProtectedItemEngineTypePolicy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode111(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProtectedItemEngineTypePolicy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode111(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProtectedItemEngineTypePolicy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode111(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProtectedItemEngineTypePolicy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode111(l, v)
}
func easyjsonB7f3de24Decode112(in *jlexer.Lexer, out *PrivateBrandingProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BuildMode":
			out.BuildMode = ClientBrandingBuildMode(in.Int())
		case "PathIcoFile":
			out.PathIcoFile = string(in.String())
		case "PathIcnsFile":
			out.PathIcnsFile = string(in.String())
		case "PathMenuBarIcnsFile":
			out.PathMenuBarIcnsFile = string(in.String())
		case "PathEulaRtf":
			out.PathEulaRtf = string(in.String())
		case "PathTilePng":
			out.PathTilePng = string(in.String())
		case "PathHeaderImage":
			out.PathHeaderImage = string(in.String())
		case "PathAppIconImage":
			out.PathAppIconImage = string(in.String())
		case "PackageIdentifier":
			out.PackageIdentifier = string(in.String())
		case "WindowsCodeSignMethod":
			out.WindowsCodeSignMethod = WindowsCodesignMethod(in.Int())
		case "WindowsCodeSignPKCS12FilePath":
			out.WindowsCodeSignPKCS12FilePath = string(in.String())
		case "WindowsCodeSignPKCS12PasswordFormat":
			out.WindowsCodeSignPKCS12PasswordFormat = uint64(in.Uint64())
		case "WindowsCodeSignPKCS12Password":
			out.WindowsCodeSignPKCS12Password = string(in.String())
		case "WindowsCodeSignPKCS11Engine":
			out.WindowsCodeSignPKCS11Engine = string(in.String())
		case "WindowsCodeSignPKCS11Module":
			out.WindowsCodeSignPKCS11Module = string(in.String())
		case "WindowsCodeSignPKCS11Certfile":
			out.WindowsCodeSignPKCS11Certfile = string(in.String())
		case "WindowsCodeSignPKCS11KeyID":
			out.WindowsCodeSignPKCS11KeyID = string(in.String())
		case "WindowsCodeSignPKCS11PasswordFormat":
			out.WindowsCodeSignPKCS11PasswordFormat = uint64(in.Uint64())
		case "WindowsCodeSignPKCS11Password":
			out.WindowsCodeSignPKCS11Password = string(in.String())
		case "WindowsCodeSignAzureVaultName":
			out.WindowsCodeSignAzureVaultName = string(in.String())
		case "WindowsCodeSignAzureCertName":
			out.WindowsCodeSignAzureCertName = string(in.String())
		case "WindowsCodeSignAzureAppID":
			out.WindowsCodeSignAzureAppID = string(in.String())
		case "WindowsCodeSignAzureAppSecretFormat":
			out.WindowsCodeSignAzureAppSecretFormat = uint64(in.Uint64())
		case "WindowsCodeSignAzureAppSecret":
			out.WindowsCodeSignAzureAppSecret = string(in.String())
		case "WindowsCodeSignAzureTenantID":
			out.WindowsCodeSignAzureTenantID = string(in.String())
		case "MacOSCodeSign":
			(out.MacOSCodeSign).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode112(out *jwriter.Writer, in PrivateBrandingProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BuildMode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.BuildMode))
	}
	{
		const prefix string = ",\"PathIcoFile\":"
		out.RawString(prefix)
		out.String(string(in.PathIcoFile))
	}
	{
		const prefix string = ",\"PathIcnsFile\":"
		out.RawString(prefix)
		out.String(string(in.PathIcnsFile))
	}
	{
		const prefix string = ",\"PathMenuBarIcnsFile\":"
		out.RawString(prefix)
		out.String(string(in.PathMenuBarIcnsFile))
	}
	{
		const prefix string = ",\"PathEulaRtf\":"
		out.RawString(prefix)
		out.String(string(in.PathEulaRtf))
	}
	{
		const prefix string = ",\"PathTilePng\":"
		out.RawString(prefix)
		out.String(string(in.PathTilePng))
	}
	{
		const prefix string = ",\"PathHeaderImage\":"
		out.RawString(prefix)
		out.String(string(in.PathHeaderImage))
	}
	{
		const prefix string = ",\"PathAppIconImage\":"
		out.RawString(prefix)
		out.String(string(in.PathAppIconImage))
	}
	{
		const prefix string = ",\"PackageIdentifier\":"
		out.RawString(prefix)
		out.String(string(in.PackageIdentifier))
	}
	{
		const prefix string = ",\"WindowsCodeSignMethod\":"
		out.RawString(prefix)
		out.Int(int(in.WindowsCodeSignMethod))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS12FilePath\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS12FilePath))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS12PasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WindowsCodeSignPKCS12PasswordFormat))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS12Password\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS12Password))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Engine\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Engine))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Module\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Module))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Certfile\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Certfile))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11KeyID\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11KeyID))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11PasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WindowsCodeSignPKCS11PasswordFormat))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Password\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Password))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureVaultName\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureVaultName))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureCertName\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureCertName))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureAppID\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureAppID))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureAppSecretFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WindowsCodeSignAzureAppSecretFormat))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureAppSecret\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureAppSecret))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureTenantID\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureTenantID))
	}
	{
		const prefix string = ",\"MacOSCodeSign\":"
		out.RawString(prefix)
		(in.MacOSCodeSign).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PrivateBrandingProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode112(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PrivateBrandingProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode112(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PrivateBrandingProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode112(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PrivateBrandingProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode112(l, v)
}
func easyjsonB7f3de24Decode113(in *jlexer.Lexer, out *PolicyOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DeleteSources":
			if in.IsNull() {
				in.Skip()
				out.DeleteSources = nil
			} else {
				in.Delim('[')
				if out.DeleteSources == nil {
					if !in.IsDelim(']') {
						out.DeleteSources = make([]string, 0, 4)
					} else {
						out.DeleteSources = []string{}
					}
				} else {
					out.DeleteSources = (out.DeleteSources)[:0]
				}
				for !in.IsDelim(']') {
					var v178 string
					v178 = string(in.String())
					out.DeleteSources = append(out.DeleteSources, v178)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode113(out *jwriter.Writer, in PolicyOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DeleteSources\":"
		out.RawString(prefix[1:])
		if in.DeleteSources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v179, v180 := range in.DeleteSources {
				if v179 > 0 {
					out.RawByte(',')
				}
				out.String(string(v180))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PolicyOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode113(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PolicyOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode113(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PolicyOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode113(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PolicyOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode113(l, v)
}
func easyjsonB7f3de24Decode114(in *jlexer.Lexer, out *PartitionConflict) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PartitionA":
			out.PartitionA = string(in.String())
		case "PartitionB":
			out.PartitionB = string(in.String())
		case "Size":
			out.Size = uint64(in.Uint64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode114(out *jwriter.Writer, in PartitionConflict) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PartitionA\":"
		out.RawString(prefix[1:])
		out.String(string(in.PartitionA))
	}
	{
		const prefix string = ",\"PartitionB\":"
		out.RawString(prefix)
		out.String(string(in.PartitionB))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Size))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PartitionConflict) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode114(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PartitionConflict) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode114(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PartitionConflict) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode114(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PartitionConflict) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode114(l, v)
}
func easyjsonB7f3de24Decode115(in *jlexer.Lexer, out *Partition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DeviceName":
			out.DeviceName = string(in.String())
		case "PartitionGuid":
			out.PartitionGuid = string(in.String())
		case "PartitionOffset":
			out.PartitionOffset = int64(in.Int64())
		case "Filesystem":
			out.Filesystem = string(in.String())
		case "VolumeName":
			out.VolumeName = string(in.String())
		case "VolumeGuid":
			out.VolumeGuid = string(in.String())
		case "VolumeSerial":
			out.VolumeSerial = string(in.String())
		case "MountPoints":
			if in.IsNull() {
				in.Skip()
				out.MountPoints = nil
			} else {
				in.Delim('[')
				if out.MountPoints == nil {
					if !in.IsDelim(']') {
						out.MountPoints = make([]string, 0, 4)
					} else {
						out.MountPoints = []string{}
					}
				} else {
					out.MountPoints = (out.MountPoints)[:0]
				}
				for !in.IsDelim(']') {
					var v181 string
					v181 = string(in.String())
					out.MountPoints = append(out.MountPoints, v181)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ReadOffset":
			out.ReadOffset = int64(in.Int64())
		case "Size":
			out.Size = int64(in.Int64())
		case "UsedSize":
			out.UsedSize = int64(in.Int64())
		case "Flags":
			out.Flags = int64(in.Int64())
		case "BytesPerFilesystemCluster":
			out.BytesPerFilesystemCluster = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode115(out *jwriter.Writer, in Partition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DeviceName\":"
		out.RawString(prefix[1:])
		out.String(string(in.DeviceName))
	}
	{
		const prefix string = ",\"PartitionGuid\":"
		out.RawString(prefix)
		out.String(string(in.PartitionGuid))
	}
	{
		const prefix string = ",\"PartitionOffset\":"
		out.RawString(prefix)
		out.Int64(int64(in.PartitionOffset))
	}
	{
		const prefix string = ",\"Filesystem\":"
		out.RawString(prefix)
		out.String(string(in.Filesystem))
	}
	{
		const prefix string = ",\"VolumeName\":"
		out.RawString(prefix)
		out.String(string(in.VolumeName))
	}
	{
		const prefix string = ",\"VolumeGuid\":"
		out.RawString(prefix)
		out.String(string(in.VolumeGuid))
	}
	{
		const prefix string = ",\"VolumeSerial\":"
		out.RawString(prefix)
		out.String(string(in.VolumeSerial))
	}
	{
		const prefix string = ",\"MountPoints\":"
		out.RawString(prefix)
		if in.MountPoints == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v182, v183 := range in.MountPoints {
				if v182 > 0 {
					out.RawByte(',')
				}
				out.String(string(v183))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ReadOffset\":"
		out.RawString(prefix)
		out.Int64(int64(in.ReadOffset))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"UsedSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.UsedSize))
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Int64(int64(in.Flags))
	}
	{
		const prefix string = ",\"BytesPerFilesystemCluster\":"
		out.RawString(prefix)
		out.Int64(int64(in.BytesPerFilesystemCluster))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Partition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode115(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Partition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode115(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Partition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode115(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Partition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode115(l, v)
}
func easyjsonB7f3de24Decode116(in *jlexer.Lexer, out *PVEVM) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CPU":
			out.CPU = string(in.String())
		case "Disks":
			if in.IsNull() {
				in.Skip()
				out.Disks = nil
			} else {
				in.Delim('[')
				if out.Disks == nil {
					if !in.IsDelim(']') {
						out.Disks = make([]PVEDisk, 0, 0)
					} else {
						out.Disks = []PVEDisk{}
					}
				} else {
					out.Disks = (out.Disks)[:0]
				}
				for !in.IsDelim(']') {
					var v184 PVEDisk
					(v184).UnmarshalEasyJSON(in)
					out.Disks = append(out.Disks, v184)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Memory":
			out.Memory = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Node":
			out.Node = string(in.String())
		case "OSType":
			out.OSType = string(in.String())
		case "Running":
			out.Running = bool(in.Bool())
		case "Type":
			out.Type = string(in.String())
		case "VMID":
			out.VMID = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode116(out *jwriter.Writer, in PVEVM) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CPU\":"
		out.RawString(prefix[1:])
		out.String(string(in.CPU))
	}
	{
		const prefix string = ",\"Disks\":"
		out.RawString(prefix)
		if in.Disks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v185, v186 := range in.Disks {
				if v185 > 0 {
					out.RawByte(',')
				}
				(v186).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Memory\":"
		out.RawString(prefix)
		out.String(string(in.Memory))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Node\":"
		out.RawString(prefix)
		out.String(string(in.Node))
	}
	{
		const prefix string = ",\"OSType\":"
		out.RawString(prefix)
		out.String(string(in.OSType))
	}
	{
		const prefix string = ",\"Running\":"
		out.RawString(prefix)
		out.Bool(bool(in.Running))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"VMID\":"
		out.RawString(prefix)
		out.String(string(in.VMID))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PVEVM) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode116(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PVEVM) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode116(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PVEVM) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode116(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PVEVM) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode116(l, v)
}
func easyjsonB7f3de24Decode117(in *jlexer.Lexer, out *PVEStorageName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Type":
			out.Type = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode117(out *jwriter.Writer, in PVEStorageName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PVEStorageName) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode117(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PVEStorageName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode117(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PVEStorageName) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode117(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PVEStorageName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode117(l, v)
}
func easyjsonB7f3de24Decode118(in *jlexer.Lexer, out *PVERestoreSelection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "TargetVM":
			(out.TargetVM).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode118(out *jwriter.Writer, in PVERestoreSelection) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"ID\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"TargetVM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.TargetVM).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PVERestoreSelection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode118(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PVERestoreSelection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode118(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PVERestoreSelection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode118(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PVERestoreSelection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode118(l, v)
}
func easyjsonB7f3de24Decode119(in *jlexer.Lexer, out *PVEParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Everything":
			out.Everything = bool(in.Bool())
		case "Exclusions":
			if in.IsNull() {
				in.Skip()
				out.Exclusions = nil
			} else {
				in.Delim('[')
				if out.Exclusions == nil {
					if !in.IsDelim(']') {
						out.Exclusions = make([]PVEBackupNode, 0, 1)
					} else {
						out.Exclusions = []PVEBackupNode{}
					}
				} else {
					out.Exclusions = (out.Exclusions)[:0]
				}
				for !in.IsDelim(']') {
					var v187 PVEBackupNode
					(v187).UnmarshalEasyJSON(in)
					out.Exclusions = append(out.Exclusions, v187)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Method":
			out.Method = string(in.String())
		case "Quota":
			out.Quota = int64(in.Int64())
		case "SSHConnection":
			(out.SSHConnection).UnmarshalEasyJSON(in)
		case "Selections":
			if in.IsNull() {
				in.Skip()
				out.Selections = nil
			} else {
				in.Delim('[')
				if out.Selections == nil {
					if !in.IsDelim(']') {
						out.Selections = make([]PVEBackupNode, 0, 1)
					} else {
						out.Selections = []PVEBackupNode{}
					}
				} else {
					out.Selections = (out.Selections)[:0]
				}
				for !in.IsDelim(']') {
					var v188 PVEBackupNode
					(v188).UnmarshalEasyJSON(in)
					out.Selections = append(out.Selections, v188)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode119(out *jwriter.Writer, in PVEParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Everything {
		const prefix string = ",\"Everything\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Everything))
	}
	if len(in.Exclusions) != 0 {
		const prefix string = ",\"Exclusions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v189, v190 := range in.Exclusions {
				if v189 > 0 {
					out.RawByte(',')
				}
				(v190).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Method != "" {
		const prefix string = ",\"Method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Method))
	}
	if in.Quota != 0 {
		const prefix string = ",\"Quota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Quota))
	}
	if true {
		const prefix string = ",\"SSHConnection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.SSHConnection).MarshalEasyJSON(out)
	}
	if len(in.Selections) != 0 {
		const prefix string = ",\"Selections\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v191, v192 := range in.Selections {
				if v191 > 0 {
					out.RawByte(',')
				}
				(v192).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PVEParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode119(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PVEParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode119(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PVEParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode119(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PVEParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode119(l, v)
}
func easyjsonB7f3de24Decode120(in *jlexer.Lexer, out *PVEDisk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Device":
			out.Device = string(in.String())
		case "DeviceNum":
			out.DeviceNum = int(in.Int())
		case "StorageID":
			out.StorageID = string(in.String())
		case "Volume":
			out.Volume = string(in.String())
		case "Size":
			out.Size = string(in.String())
		case "Format":
			out.Format = string(in.String())
		case "Options":
			out.Options = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode120(out *jwriter.Writer, in PVEDisk) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Device\":"
		out.RawString(prefix[1:])
		out.String(string(in.Device))
	}
	{
		const prefix string = ",\"DeviceNum\":"
		out.RawString(prefix)
		out.Int(int(in.DeviceNum))
	}
	if in.StorageID != "" {
		const prefix string = ",\"StorageID\":"
		out.RawString(prefix)
		out.String(string(in.StorageID))
	}
	if in.Volume != "" {
		const prefix string = ",\"Volume\":"
		out.RawString(prefix)
		out.String(string(in.Volume))
	}
	if in.Size != "" {
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.String(string(in.Size))
	}
	if in.Format != "" {
		const prefix string = ",\"Format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	if in.Options != "" {
		const prefix string = ",\"Options\":"
		out.RawString(prefix)
		out.String(string(in.Options))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PVEDisk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode120(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PVEDisk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode120(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PVEDisk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode120(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PVEDisk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode120(l, v)
}
func easyjsonB7f3de24Decode121(in *jlexer.Lexer, out *PVEBackupVM) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IncludedDisks":
			if in.IsNull() {
				in.Skip()
				out.IncludedDisks = nil
			} else {
				in.Delim('[')
				if out.IncludedDisks == nil {
					if !in.IsDelim(']') {
						out.IncludedDisks = make([]PVEBackupDisk, 0, 2)
					} else {
						out.IncludedDisks = []PVEBackupDisk{}
					}
				} else {
					out.IncludedDisks = (out.IncludedDisks)[:0]
				}
				for !in.IsDelim(']') {
					var v193 PVEBackupDisk
					(v193).UnmarshalEasyJSON(in)
					out.IncludedDisks = append(out.IncludedDisks, v193)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Name":
			out.Name = string(in.String())
		case "Selected":
			out.Selected = bool(in.Bool())
		case "Type":
			out.Type = string(in.String())
		case "VMID":
			out.VMID = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode121(out *jwriter.Writer, in PVEBackupVM) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.IncludedDisks) != 0 {
		const prefix string = ",\"IncludedDisks\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v194, v195 := range in.IncludedDisks {
				if v194 > 0 {
					out.RawByte(',')
				}
				(v195).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Selected {
		const prefix string = ",\"Selected\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Selected))
	}
	if in.Type != "" {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.VMID != "" {
		const prefix string = ",\"VMID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VMID))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PVEBackupVM) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode121(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PVEBackupVM) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode121(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PVEBackupVM) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode121(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PVEBackupVM) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode121(l, v)
}
func easyjsonB7f3de24Decode122(in *jlexer.Lexer, out *PVEBackupNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IncludedVMs":
			if in.IsNull() {
				in.Skip()
				out.IncludedVMs = nil
			} else {
				in.Delim('[')
				if out.IncludedVMs == nil {
					if !in.IsDelim(']') {
						out.IncludedVMs = make([]PVEBackupVM, 0, 0)
					} else {
						out.IncludedVMs = []PVEBackupVM{}
					}
				} else {
					out.IncludedVMs = (out.IncludedVMs)[:0]
				}
				for !in.IsDelim(']') {
					var v196 PVEBackupVM
					(v196).UnmarshalEasyJSON(in)
					out.IncludedVMs = append(out.IncludedVMs, v196)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Name":
			out.Name = string(in.String())
		case "Selected":
			out.Selected = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode122(out *jwriter.Writer, in PVEBackupNode) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.IncludedVMs) != 0 {
		const prefix string = ",\"IncludedVMs\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v197, v198 := range in.IncludedVMs {
				if v197 > 0 {
					out.RawByte(',')
				}
				(v198).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Selected {
		const prefix string = ",\"Selected\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Selected))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PVEBackupNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode122(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PVEBackupNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode122(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PVEBackupNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode122(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PVEBackupNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode122(l, v)
}
func easyjsonB7f3de24Decode123(in *jlexer.Lexer, out *PVEBackupDisk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Device":
			out.Device = string(in.String())
		case "DeviceNum":
			out.DeviceNum = int(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode123(out *jwriter.Writer, in PVEBackupDisk) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Device != "" {
		const prefix string = ",\"Device\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Device))
	}
	if in.DeviceNum != 0 {
		const prefix string = ",\"DeviceNum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DeviceNum))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PVEBackupDisk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode123(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PVEBackupDisk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode123(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PVEBackupDisk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode123(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PVEBackupDisk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode123(l, v)
}
func easyjsonB7f3de24Decode124(in *jlexer.Lexer, out *PSAGroupedBy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Users":
			out.Users = bool(in.Bool())
		case "Tenants":
			out.Tenants = bool(in.Bool())
		case "AccountName":
			out.AccountName = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode124(out *jwriter.Writer, in PSAGroupedBy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Users\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Users))
	}
	{
		const prefix string = ",\"Tenants\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tenants))
	}
	{
		const prefix string = ",\"AccountName\":"
		out.RawString(prefix)
		out.Bool(bool(in.AccountName))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PSAGroupedBy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode124(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PSAGroupedBy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode124(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PSAGroupedBy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode124(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PSAGroupedBy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode124(l, v)
}
func easyjsonB7f3de24Decode125(in *jlexer.Lexer, out *PSAConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AlertsDisabled":
			out.AlertsDisabled = bool(in.Bool())
		case "CustomHeaders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.CustomHeaders = make(map[string]string)
				} else {
					out.CustomHeaders = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v199 string
					v199 = string(in.String())
					(out.CustomHeaders)[key] = v199
					in.WantComma()
				}
				in.Delim('}')
			}
		case "PartnerKey":
			out.PartnerKey = string(in.String())
		case "Type":
			out.Type = PSAType(in.Int())
		case "URL":
			out.URL = string(in.String())
		case "GroupedBy":
			(out.GroupedBy).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode125(out *jwriter.Writer, in PSAConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AlertsDisabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.AlertsDisabled))
	}
	if len(in.CustomHeaders) != 0 {
		const prefix string = ",\"CustomHeaders\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v200First := true
			for v200Name, v200Value := range in.CustomHeaders {
				if v200First {
					v200First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v200Name))
				out.RawByte(':')
				out.String(string(v200Value))
			}
			out.RawByte('}')
		}
	}
	if in.PartnerKey != "" {
		const prefix string = ",\"PartnerKey\":"
		out.RawString(prefix)
		out.String(string(in.PartnerKey))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"URL\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"GroupedBy\":"
		out.RawString(prefix)
		(in.GroupedBy).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PSAConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode125(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PSAConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode125(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PSAConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode125(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PSAConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode125(l, v)
}
func easyjsonB7f3de24Decode126(in *jlexer.Lexer, out *OrganizationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "ID":
			out.ID = string(in.String())
		case "Organization":
			(out.Organization).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode126(out *jwriter.Writer, in OrganizationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Organization\":"
		out.RawString(prefix)
		(in.Organization).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrganizationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode126(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrganizationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode126(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrganizationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode126(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrganizationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode126(l, v)
}
func easyjsonB7f3de24Decode127(in *jlexer.Lexer, out *OrganizationLoginURLResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LoginURL":
			out.LoginURL = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode127(out *jwriter.Writer, in OrganizationLoginURLResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"LoginURL\":"
		out.RawString(prefix[1:])
		out.String(string(in.LoginURL))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrganizationLoginURLResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode127(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrganizationLoginURLResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode127(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrganizationLoginURLResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode127(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrganizationLoginURLResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode127(l, v)
}
func easyjsonB7f3de24Decode128(in *jlexer.Lexer, out *Organization) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AuditFileOptions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.AuditFileOptions = make(map[string]FileOption)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v201 FileOption
					(v201).UnmarshalEasyJSON(in)
					(out.AuditFileOptions)[key] = v201
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Branding":
			(out.Branding).UnmarshalEasyJSON(in)
		case "ConstellationRole":
			(out.ConstellationRole).UnmarshalEasyJSON(in)
		case "Email":
			(out.Email).UnmarshalEasyJSON(in)
		case "ExperimentalOptions":
			if in.IsNull() {
				in.Skip()
				out.ExperimentalOptions = nil
			} else {
				in.Delim('[')
				if out.ExperimentalOptions == nil {
					if !in.IsDelim(']') {
						out.ExperimentalOptions = make([]string, 0, 4)
					} else {
						out.ExperimentalOptions = []string{}
					}
				} else {
					out.ExperimentalOptions = (out.ExperimentalOptions)[:0]
				}
				for !in.IsDelim(']') {
					var v202 string
					v202 = string(in.String())
					out.ExperimentalOptions = append(out.ExperimentalOptions, v202)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Hosts":
			if in.IsNull() {
				in.Skip()
				out.Hosts = nil
			} else {
				in.Delim('[')
				if out.Hosts == nil {
					if !in.IsDelim(']') {
						out.Hosts = make([]string, 0, 4)
					} else {
						out.Hosts = []string{}
					}
				} else {
					out.Hosts = (out.Hosts)[:0]
				}
				for !in.IsDelim(']') {
					var v203 string
					v203 = string(in.String())
					out.Hosts = append(out.Hosts, v203)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Name":
			out.Name = string(in.String())
		case "IsSuspended":
			out.IsSuspended = bool(in.Bool())
		case "PSAConfigs":
			if in.IsNull() {
				in.Skip()
				out.PSAConfigs = nil
			} else {
				in.Delim('[')
				if out.PSAConfigs == nil {
					if !in.IsDelim(']') {
						out.PSAConfigs = make([]PSAConfig, 0, 0)
					} else {
						out.PSAConfigs = []PSAConfig{}
					}
				} else {
					out.PSAConfigs = (out.PSAConfigs)[:0]
				}
				for !in.IsDelim(']') {
					var v204 PSAConfig
					(v204).UnmarshalEasyJSON(in)
					out.PSAConfigs = append(out.PSAConfigs, v204)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RemoteStorage":
			if in.IsNull() {
				in.Skip()
				out.RemoteStorage = nil
			} else {
				in.Delim('[')
				if out.RemoteStorage == nil {
					if !in.IsDelim(']') {
						out.RemoteStorage = make([]RemoteStorageOption, 0, 0)
					} else {
						out.RemoteStorage = []RemoteStorageOption{}
					}
				} else {
					out.RemoteStorage = (out.RemoteStorage)[:0]
				}
				for !in.IsDelim(']') {
					var v205 RemoteStorageOption
					(v205).UnmarshalEasyJSON(in)
					out.RemoteStorage = append(out.RemoteStorage, v205)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SoftwareBuildRole":
			(out.SoftwareBuildRole).UnmarshalEasyJSON(in)
		case "WebhookOptions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.WebhookOptions = make(map[string]WebhookOption)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v206 WebhookOption
					(v206).UnmarshalEasyJSON(in)
					(out.WebhookOptions)[key] = v206
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode128(out *jwriter.Writer, in Organization) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AuditFileOptions\":"
		out.RawString(prefix[1:])
		if in.AuditFileOptions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v207First := true
			for v207Name, v207Value := range in.AuditFileOptions {
				if v207First {
					v207First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v207Name))
				out.RawByte(':')
				(v207Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Branding\":"
		out.RawString(prefix)
		(in.Branding).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ConstellationRole\":"
		out.RawString(prefix)
		(in.ConstellationRole).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		(in.Email).MarshalEasyJSON(out)
	}
	if len(in.ExperimentalOptions) != 0 {
		const prefix string = ",\"ExperimentalOptions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v208, v209 := range in.ExperimentalOptions {
				if v208 > 0 {
					out.RawByte(',')
				}
				out.String(string(v209))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Hosts\":"
		out.RawString(prefix)
		if in.Hosts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v210, v211 := range in.Hosts {
				if v210 > 0 {
					out.RawByte(',')
				}
				out.String(string(v211))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"IsSuspended\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSuspended))
	}
	{
		const prefix string = ",\"PSAConfigs\":"
		out.RawString(prefix)
		if in.PSAConfigs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v212, v213 := range in.PSAConfigs {
				if v212 > 0 {
					out.RawByte(',')
				}
				(v213).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"RemoteStorage\":"
		out.RawString(prefix)
		if in.RemoteStorage == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v214, v215 := range in.RemoteStorage {
				if v214 > 0 {
					out.RawByte(',')
				}
				(v215).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SoftwareBuildRole\":"
		out.RawString(prefix)
		(in.SoftwareBuildRole).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"WebhookOptions\":"
		out.RawString(prefix)
		if in.WebhookOptions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v216First := true
			for v216Name, v216Value := range in.WebhookOptions {
				if v216First {
					v216First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v216Name))
				out.RawByte(':')
				(v216Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Organization) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode128(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Organization) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode128(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Organization) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode128(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Organization) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode128(l, v)
}
func easyjsonB7f3de24Decode129(in *jlexer.Lexer, out *OidcConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DisplayName":
			out.DisplayName = string(in.String())
		case "Hosts":
			if in.IsNull() {
				in.Skip()
				out.Hosts = nil
			} else {
				in.Delim('[')
				if out.Hosts == nil {
					if !in.IsDelim(']') {
						out.Hosts = make([]string, 0, 4)
					} else {
						out.Hosts = []string{}
					}
				} else {
					out.Hosts = (out.Hosts)[:0]
				}
				for !in.IsDelim(']') {
					var v217 string
					v217 = string(in.String())
					out.Hosts = append(out.Hosts, v217)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "OrganizationID":
			out.OrganizationID = string(in.String())
		case "Provider":
			out.Provider = OidcProvider(in.String())
		case "ClientID":
			out.ClientID = string(in.String())
		case "ClientSecret":
			out.ClientSecret = string(in.String())
		case "SkipMFA":
			out.SkipMFA = bool(in.Bool())
		case "Scopes":
			if in.IsNull() {
				in.Skip()
				out.Scopes = nil
			} else {
				in.Delim('[')
				if out.Scopes == nil {
					if !in.IsDelim(']') {
						out.Scopes = make([]string, 0, 4)
					} else {
						out.Scopes = []string{}
					}
				} else {
					out.Scopes = (out.Scopes)[:0]
				}
				for !in.IsDelim(']') {
					var v218 string
					v218 = string(in.String())
					out.Scopes = append(out.Scopes, v218)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RequiredClaims":
			if in.IsNull() {
				in.Skip()
				out.RequiredClaims = nil
			} else {
				in.Delim('[')
				if out.RequiredClaims == nil {
					if !in.IsDelim(']') {
						out.RequiredClaims = make([]OidcClaim, 0, 1)
					} else {
						out.RequiredClaims = []OidcClaim{}
					}
				} else {
					out.RequiredClaims = (out.RequiredClaims)[:0]
				}
				for !in.IsDelim(']') {
					var v219 OidcClaim
					(v219).UnmarshalEasyJSON(in)
					out.RequiredClaims = append(out.RequiredClaims, v219)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DiscoveryDocumentURL":
			out.GenericOP_DiscoveryDocumentURL = string(in.String())
		case "AzureTenantID":
			out.AzureADV2OP_TenantID = string(in.String())
		case "GoogleHostedDomain":
			out.GoogleOP_HostedDomain = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode129(out *jwriter.Writer, in OidcConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DisplayName\":"
		out.RawString(prefix[1:])
		out.String(string(in.DisplayName))
	}
	if len(in.Hosts) != 0 {
		const prefix string = ",\"Hosts\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v220, v221 := range in.Hosts {
				if v220 > 0 {
					out.RawByte(',')
				}
				out.String(string(v221))
			}
			out.RawByte(']')
		}
	}
	if in.OrganizationID != "" {
		const prefix string = ",\"OrganizationID\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"Provider\":"
		out.RawString(prefix)
		out.String(string(in.Provider))
	}
	{
		const prefix string = ",\"ClientID\":"
		out.RawString(prefix)
		out.String(string(in.ClientID))
	}
	{
		const prefix string = ",\"ClientSecret\":"
		out.RawString(prefix)
		out.String(string(in.ClientSecret))
	}
	{
		const prefix string = ",\"SkipMFA\":"
		out.RawString(prefix)
		out.Bool(bool(in.SkipMFA))
	}
	if len(in.Scopes) != 0 {
		const prefix string = ",\"Scopes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v222, v223 := range in.Scopes {
				if v222 > 0 {
					out.RawByte(',')
				}
				out.String(string(v223))
			}
			out.RawByte(']')
		}
	}
	if len(in.RequiredClaims) != 0 {
		const prefix string = ",\"RequiredClaims\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v224, v225 := range in.RequiredClaims {
				if v224 > 0 {
					out.RawByte(',')
				}
				(v225).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.GenericOP_DiscoveryDocumentURL != "" {
		const prefix string = ",\"DiscoveryDocumentURL\":"
		out.RawString(prefix)
		out.String(string(in.GenericOP_DiscoveryDocumentURL))
	}
	if in.AzureADV2OP_TenantID != "" {
		const prefix string = ",\"AzureTenantID\":"
		out.RawString(prefix)
		out.String(string(in.AzureADV2OP_TenantID))
	}
	if in.GoogleOP_HostedDomain != "" {
		const prefix string = ",\"GoogleHostedDomain\":"
		out.RawString(prefix)
		out.String(string(in.GoogleOP_HostedDomain))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OidcConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode129(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OidcConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode129(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OidcConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode129(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OidcConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode129(l, v)
}
func easyjsonB7f3de24Decode130(in *jlexer.Lexer, out *OidcClaim) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Value":
			out.Value = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode130(out *jwriter.Writer, in OidcClaim) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Value != "" {
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OidcClaim) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode130(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OidcClaim) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode130(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OidcClaim) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode130(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OidcClaim) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode130(l, v)
}
func easyjsonB7f3de24Decode131(in *jlexer.Lexer, out *Office365ObjectInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GUID":
			out.GUID = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Value":
			out.Value = string(in.String())
		case "Members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]string, 0, 4)
					} else {
						out.Members = []string{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v226 string
					v226 = string(in.String())
					out.Members = append(out.Members, v226)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode131(out *jwriter.Writer, in Office365ObjectInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"GUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.GUID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"Members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v227, v228 := range in.Members {
				if v227 > 0 {
					out.RawByte(',')
				}
				out.String(string(v228))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Office365ObjectInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode131(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Office365ObjectInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode131(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Office365ObjectInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode131(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Office365ObjectInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode131(l, v)
}
func easyjsonB7f3de24Decode132(in *jlexer.Lexer, out *Office365MixedVirtualAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DefaultDriveID":
			out.DefaultDriveID = string(in.String())
		case "Disabled":
			out.Disabled = bool(in.Bool())
		case "DisplayName":
			out.DisplayName = string(in.String())
		case "EnabledServiceOption":
			out.EnabledServiceOption = uint(in.Uint())
		case "hasLicense":
			out.HasLicense = bool(in.Bool())
		case "id":
			out.ID = string(in.String())
		case "JobTitle":
			out.JobTitle = string(in.String())
		case "Mail":
			out.Mail = string(in.String())
		case "SiteID":
			out.SiteID = string(in.String())
		case "Type":
			out.Type = uint(in.Uint())
		case "UserPrincipalName":
			out.UserPrincipalName = string(in.String())
		case "WebID":
			out.WebID = string(in.String())
		case "WebURL":
			out.WebURL = string(in.String())
		case "Members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]string, 0, 4)
					} else {
						out.Members = []string{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v229 string
					v229 = string(in.String())
					out.Members = append(out.Members, v229)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ServiceOptions":
			out.ServiceOptions = uint(in.Uint())
		case "MemberServiceOptions":
			out.MemberServiceOptions = uint(in.Uint())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode132(out *jwriter.Writer, in Office365MixedVirtualAccount) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DefaultDriveID != "" {
		const prefix string = ",\"DefaultDriveID\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DefaultDriveID))
	}
	if in.Disabled {
		const prefix string = ",\"Disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if in.DisplayName != "" {
		const prefix string = ",\"DisplayName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DisplayName))
	}
	if in.EnabledServiceOption != 0 {
		const prefix string = ",\"EnabledServiceOption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.EnabledServiceOption))
	}
	if in.HasLicense {
		const prefix string = ",\"hasLicense\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasLicense))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.JobTitle != "" {
		const prefix string = ",\"JobTitle\":"
		out.RawString(prefix)
		out.String(string(in.JobTitle))
	}
	if in.Mail != "" {
		const prefix string = ",\"Mail\":"
		out.RawString(prefix)
		out.String(string(in.Mail))
	}
	if in.SiteID != "" {
		const prefix string = ",\"SiteID\":"
		out.RawString(prefix)
		out.String(string(in.SiteID))
	}
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Uint(uint(in.Type))
	}
	if in.UserPrincipalName != "" {
		const prefix string = ",\"UserPrincipalName\":"
		out.RawString(prefix)
		out.String(string(in.UserPrincipalName))
	}
	if in.WebID != "" {
		const prefix string = ",\"WebID\":"
		out.RawString(prefix)
		out.String(string(in.WebID))
	}
	if in.WebURL != "" {
		const prefix string = ",\"WebURL\":"
		out.RawString(prefix)
		out.String(string(in.WebURL))
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"Members\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v230, v231 := range in.Members {
				if v230 > 0 {
					out.RawByte(',')
				}
				out.String(string(v231))
			}
			out.RawByte(']')
		}
	}
	if in.ServiceOptions != 0 {
		const prefix string = ",\"ServiceOptions\":"
		out.RawString(prefix)
		out.Uint(uint(in.ServiceOptions))
	}
	if in.MemberServiceOptions != 0 {
		const prefix string = ",\"MemberServiceOptions\":"
		out.RawString(prefix)
		out.Uint(uint(in.MemberServiceOptions))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Office365MixedVirtualAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode132(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Office365MixedVirtualAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode132(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Office365MixedVirtualAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode132(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Office365MixedVirtualAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode132(l, v)
}
func easyjsonB7f3de24Decode133(in *jlexer.Lexer, out *Office365CustomSettingV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Organization":
			out.Organization = bool(in.Bool())
		case "FilterMode":
			out.FilterMode = bool(in.Bool())
		case "WholeOrg":
			out.WholeOrg = bool(in.Bool())
		case "BackupOptions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.BackupOptions = make(map[string]uint)
				} else {
					out.BackupOptions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v232 uint
					v232 = uint(in.Uint())
					(out.BackupOptions)[key] = v232
					in.WantComma()
				}
				in.Delim('}')
			}
		case "MemberBackupOptions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.MemberBackupOptions = make(map[string]uint)
				} else {
					out.MemberBackupOptions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v233 uint
					v233 = uint(in.Uint())
					(out.MemberBackupOptions)[key] = v233
					in.WantComma()
				}
				in.Delim('}')
			}
		case "FilterOptions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.FilterOptions = make(map[string]uint)
				} else {
					out.FilterOptions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v234 uint
					v234 = uint(in.Uint())
					(out.FilterOptions)[key] = v234
					in.WantComma()
				}
				in.Delim('}')
			}
		case "FilterMemberOptions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.FilterMemberOptions = make(map[string]uint)
				} else {
					out.FilterMemberOptions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v235 uint
					v235 = uint(in.Uint())
					(out.FilterMemberOptions)[key] = v235
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode133(out *jwriter.Writer, in Office365CustomSettingV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Organization\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Organization))
	}
	if in.FilterMode {
		const prefix string = ",\"FilterMode\":"
		out.RawString(prefix)
		out.Bool(bool(in.FilterMode))
	}
	if in.WholeOrg {
		const prefix string = ",\"WholeOrg\":"
		out.RawString(prefix)
		out.Bool(bool(in.WholeOrg))
	}
	if len(in.BackupOptions) != 0 {
		const prefix string = ",\"BackupOptions\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v236First := true
			for v236Name, v236Value := range in.BackupOptions {
				if v236First {
					v236First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v236Name))
				out.RawByte(':')
				out.Uint(uint(v236Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.MemberBackupOptions) != 0 {
		const prefix string = ",\"MemberBackupOptions\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v237First := true
			for v237Name, v237Value := range in.MemberBackupOptions {
				if v237First {
					v237First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v237Name))
				out.RawByte(':')
				out.Uint(uint(v237Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.FilterOptions) != 0 {
		const prefix string = ",\"FilterOptions\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v238First := true
			for v238Name, v238Value := range in.FilterOptions {
				if v238First {
					v238First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v238Name))
				out.RawByte(':')
				out.Uint(uint(v238Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.FilterMemberOptions) != 0 {
		const prefix string = ",\"FilterMemberOptions\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v239First := true
			for v239Name, v239Value := range in.FilterMemberOptions {
				if v239First {
					v239First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v239Name))
				out.RawByte(':')
				out.Uint(uint(v239Value))
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Office365CustomSettingV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode133(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Office365CustomSettingV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode133(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Office365CustomSettingV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode133(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Office365CustomSettingV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode133(l, v)
}
func easyjsonB7f3de24Decode134(in *jlexer.Lexer, out *Office365CustomSetting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MailboxStrategy":
			out.MailboxStrategy = string(in.String())
		case "SiteStrategy":
			out.SiteStrategy = string(in.String())
		case "MailboxUserIDs":
			if in.IsNull() {
				in.Skip()
				out.MailboxUserIDs = nil
			} else {
				in.Delim('[')
				if out.MailboxUserIDs == nil {
					if !in.IsDelim(']') {
						out.MailboxUserIDs = make([]string, 0, 4)
					} else {
						out.MailboxUserIDs = []string{}
					}
				} else {
					out.MailboxUserIDs = (out.MailboxUserIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v240 string
					v240 = string(in.String())
					out.MailboxUserIDs = append(out.MailboxUserIDs, v240)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MailboxGroupIDs":
			if in.IsNull() {
				in.Skip()
				out.MailboxGroupIDs = nil
			} else {
				in.Delim('[')
				if out.MailboxGroupIDs == nil {
					if !in.IsDelim(']') {
						out.MailboxGroupIDs = make([]string, 0, 4)
					} else {
						out.MailboxGroupIDs = []string{}
					}
				} else {
					out.MailboxGroupIDs = (out.MailboxGroupIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v241 string
					v241 = string(in.String())
					out.MailboxGroupIDs = append(out.MailboxGroupIDs, v241)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SiteIDs":
			if in.IsNull() {
				in.Skip()
				out.SiteIDs = nil
			} else {
				in.Delim('[')
				if out.SiteIDs == nil {
					if !in.IsDelim(']') {
						out.SiteIDs = make([]string, 0, 4)
					} else {
						out.SiteIDs = []string{}
					}
				} else {
					out.SiteIDs = (out.SiteIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v242 string
					v242 = string(in.String())
					out.SiteIDs = append(out.SiteIDs, v242)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode134(out *jwriter.Writer, in Office365CustomSetting) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MailboxStrategy\":"
		out.RawString(prefix[1:])
		out.String(string(in.MailboxStrategy))
	}
	{
		const prefix string = ",\"SiteStrategy\":"
		out.RawString(prefix)
		out.String(string(in.SiteStrategy))
	}
	{
		const prefix string = ",\"MailboxUserIDs\":"
		out.RawString(prefix)
		if in.MailboxUserIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v243, v244 := range in.MailboxUserIDs {
				if v243 > 0 {
					out.RawByte(',')
				}
				out.String(string(v244))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"MailboxGroupIDs\":"
		out.RawString(prefix)
		if in.MailboxGroupIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v245, v246 := range in.MailboxGroupIDs {
				if v245 > 0 {
					out.RawByte(',')
				}
				out.String(string(v246))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SiteIDs\":"
		out.RawString(prefix)
		if in.SiteIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v247, v248 := range in.SiteIDs {
				if v247 > 0 {
					out.RawByte(',')
				}
				out.String(string(v248))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Office365CustomSetting) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode134(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Office365CustomSetting) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode134(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Office365CustomSetting) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode134(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Office365CustomSetting) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode134(l, v)
}
func easyjsonB7f3de24Decode135(in *jlexer.Lexer, out *Office365Credential) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AppID":
			out.AppID = string(in.String())
		case "TenantID":
			out.TenantID = string(in.String())
		case "Secret":
			out.Secret = string(in.String())
		case "AppCert":
			out.AppCert = string(in.String())
		case "Region":
			out.Region = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode135(out *jwriter.Writer, in Office365Credential) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AppID\":"
		out.RawString(prefix[1:])
		out.String(string(in.AppID))
	}
	{
		const prefix string = ",\"TenantID\":"
		out.RawString(prefix)
		out.String(string(in.TenantID))
	}
	{
		const prefix string = ",\"Secret\":"
		out.RawString(prefix)
		out.String(string(in.Secret))
	}
	{
		const prefix string = ",\"AppCert\":"
		out.RawString(prefix)
		out.String(string(in.AppCert))
	}
	{
		const prefix string = ",\"Region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Office365Credential) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode135(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Office365Credential) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode135(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Office365Credential) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode135(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Office365Credential) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode135(l, v)
}
func easyjsonB7f3de24Decode136(in *jlexer.Lexer, out *Office365Connection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Concurrency":
			out.Concurrency = int(in.Int())
		case "Credential":
			(out.Credential).UnmarshalEasyJSON(in)
		case "CustomSetting":
			(out.CustomSetting).UnmarshalEasyJSON(in)
		case "CustomSettingV2":
			(out.CustomSettingV2).UnmarshalEasyJSON(in)
		case "FeatureFlag":
			out.FeatureFlag = string(in.String())
		case "LogLevel":
			out.LogLevel = string(in.String())
		case "MailboxUniqueMembers":
			if in.IsNull() {
				in.Skip()
				out.MailboxUniqueMembers = nil
			} else {
				in.Delim('[')
				if out.MailboxUniqueMembers == nil {
					if !in.IsDelim(']') {
						out.MailboxUniqueMembers = make([]string, 0, 4)
					} else {
						out.MailboxUniqueMembers = []string{}
					}
				} else {
					out.MailboxUniqueMembers = (out.MailboxUniqueMembers)[:0]
				}
				for !in.IsDelim(']') {
					var v249 string
					v249 = string(in.String())
					out.MailboxUniqueMembers = append(out.MailboxUniqueMembers, v249)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SiteUniqueMembers":
			if in.IsNull() {
				in.Skip()
				out.SiteUniqueMembers = nil
			} else {
				in.Delim('[')
				if out.SiteUniqueMembers == nil {
					if !in.IsDelim(']') {
						out.SiteUniqueMembers = make([]string, 0, 4)
					} else {
						out.SiteUniqueMembers = []string{}
					}
				} else {
					out.SiteUniqueMembers = (out.SiteUniqueMembers)[:0]
				}
				for !in.IsDelim(']') {
					var v250 string
					v250 = string(in.String())
					out.SiteUniqueMembers = append(out.SiteUniqueMembers, v250)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode136(out *jwriter.Writer, in Office365Connection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Concurrency\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Concurrency))
	}
	{
		const prefix string = ",\"Credential\":"
		out.RawString(prefix)
		(in.Credential).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"CustomSetting\":"
		out.RawString(prefix)
		(in.CustomSetting).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"CustomSettingV2\":"
		out.RawString(prefix)
		(in.CustomSettingV2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"FeatureFlag\":"
		out.RawString(prefix)
		out.String(string(in.FeatureFlag))
	}
	{
		const prefix string = ",\"LogLevel\":"
		out.RawString(prefix)
		out.String(string(in.LogLevel))
	}
	{
		const prefix string = ",\"MailboxUniqueMembers\":"
		out.RawString(prefix)
		if in.MailboxUniqueMembers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v251, v252 := range in.MailboxUniqueMembers {
				if v251 > 0 {
					out.RawByte(',')
				}
				out.String(string(v252))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SiteUniqueMembers\":"
		out.RawString(prefix)
		if in.SiteUniqueMembers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v253, v254 := range in.SiteUniqueMembers {
				if v253 > 0 {
					out.RawByte(',')
				}
				out.String(string(v254))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Office365Connection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode136(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Office365Connection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode136(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Office365Connection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode136(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Office365Connection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode136(l, v)
}
func easyjsonB7f3de24Decode137(in *jlexer.Lexer, out *ObjectLockStorageTemplateSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UseObjectLock":
			out.UseObjectLock_Legacy_DoNotUse = bool(in.Bool())
		case "ObjectLockMode":
			out.ObjectLockMode = uint8(in.Uint8())
		case "ObjectLockDays":
			out.ObjectLockDays = int(in.Int())
		case "RemoveDeleted":
			out.RemoveDeleted = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode137(out *jwriter.Writer, in ObjectLockStorageTemplateSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UseObjectLock\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.UseObjectLock_Legacy_DoNotUse))
	}
	{
		const prefix string = ",\"ObjectLockMode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ObjectLockMode))
	}
	{
		const prefix string = ",\"ObjectLockDays\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectLockDays))
	}
	{
		const prefix string = ",\"RemoveDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.RemoveDeleted))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ObjectLockStorageTemplateSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode137(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ObjectLockStorageTemplateSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode137(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ObjectLockStorageTemplateSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode137(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ObjectLockStorageTemplateSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode137(l, v)
}
func easyjsonB7f3de24Decode138(in *jlexer.Lexer, out *OSInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		case "distribution":
			out.Distribution = string(in.String())
		case "build":
			out.Build = string(in.String())
		case "os":
			out.OS = string(in.String())
		case "arch":
			out.Arch = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode138(out *jwriter.Writer, in OSInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != "" {
		const prefix string = ",\"version\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	if in.Distribution != "" {
		const prefix string = ",\"distribution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Distribution))
	}
	if in.Build != "" {
		const prefix string = ",\"build\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Build))
	}
	if in.OS != "" {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OS))
	}
	if in.Arch != "" {
		const prefix string = ",\"arch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Arch))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OSInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode138(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OSInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode138(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OSInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode138(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OSInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode138(l, v)
}
func easyjsonB7f3de24Decode139(in *jlexer.Lexer, out *NewsEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OrganizationID":
			out.OrganizationID = string(in.String())
		case "DateTime":
			out.DateTime = int64(in.Int64())
		case "TextContent":
			out.TextContent = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode139(out *jwriter.Writer, in NewsEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OrganizationID\":"
		out.RawString(prefix[1:])
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"DateTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.DateTime))
	}
	{
		const prefix string = ",\"TextContent\":"
		out.RawString(prefix)
		out.String(string(in.TextContent))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewsEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode139(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewsEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode139(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewsEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode139(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewsEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode139(l, v)
}
func easyjsonB7f3de24Decode140(in *jlexer.Lexer, out *NewBucketDetail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NewBucketID":
			out.NewBucketID = string(in.String())
		case "NewBucketKey":
			out.NewBucketKey = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode140(out *jwriter.Writer, in NewBucketDetail) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"NewBucketID\":"
		out.RawString(prefix[1:])
		out.String(string(in.NewBucketID))
	}
	{
		const prefix string = ",\"NewBucketKey\":"
		out.RawString(prefix)
		out.String(string(in.NewBucketKey))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewBucketDetail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode140(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewBucketDetail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode140(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewBucketDetail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode140(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewBucketDetail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode140(l, v)
}
func easyjsonB7f3de24Decode141(in *jlexer.Lexer, out *MySQLConnection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Host":
			out.Host = string(in.String())
		case "Port":
			out.Port = string(in.String())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "UseTLS":
			out.UseTLS = bool(in.Bool())
		case "TLSSkipVerify":
			out.TLSSkipVerify = bool(in.Bool())
		case "TLSCustomServerCAPath":
			out.TLSCustomServerCAPath = string(in.String())
		case "TLSCustomClientCrtPath":
			out.TLSCustomClientCrtPath = string(in.String())
		case "TLSCustomClientKeyPath":
			out.TLSCustomClientKeyPath = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode141(out *jwriter.Writer, in MySQLConnection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"UseTLS\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseTLS))
	}
	{
		const prefix string = ",\"TLSSkipVerify\":"
		out.RawString(prefix)
		out.Bool(bool(in.TLSSkipVerify))
	}
	{
		const prefix string = ",\"TLSCustomServerCAPath\":"
		out.RawString(prefix)
		out.String(string(in.TLSCustomServerCAPath))
	}
	{
		const prefix string = ",\"TLSCustomClientCrtPath\":"
		out.RawString(prefix)
		out.String(string(in.TLSCustomClientCrtPath))
	}
	{
		const prefix string = ",\"TLSCustomClientKeyPath\":"
		out.RawString(prefix)
		out.String(string(in.TLSCustomClientKeyPath))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MySQLConnection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode141(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MySQLConnection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode141(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MySQLConnection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode141(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MySQLConnection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode141(l, v)
}
func easyjsonB7f3de24Decode142(in *jlexer.Lexer, out *MongoDBConnection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Server":
			out.Server = string(in.String())
		case "Port":
			out.Port = int(in.Int())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "AuthenticationDB":
			out.AuthenticationDB = string(in.String())
		case "MongoShellPath":
			out.MongoShellPath = string(in.String())
		case "MongodumpPath":
			out.MongodumpPath = string(in.String())
		case "ReadPreference":
			out.ReadPreference = string(in.String())
		case "UseReplica":
			out.UseReplica = bool(in.Bool())
		case "ReplicaName":
			out.ReplicaName = string(in.String())
		case "ReplicaMembers":
			if in.IsNull() {
				in.Skip()
				out.ReplicaMembers = nil
			} else {
				in.Delim('[')
				if out.ReplicaMembers == nil {
					if !in.IsDelim(']') {
						out.ReplicaMembers = make([]string, 0, 4)
					} else {
						out.ReplicaMembers = []string{}
					}
				} else {
					out.ReplicaMembers = (out.ReplicaMembers)[:0]
				}
				for !in.IsDelim(']') {
					var v255 string
					v255 = string(in.String())
					out.ReplicaMembers = append(out.ReplicaMembers, v255)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "UseSSL":
			out.UseSSL = bool(in.Bool())
		case "ClientSSLPEMPath":
			out.ClientSSLPEMPath = string(in.String())
		case "ServerSSLPEMPath":
			out.ServerSSLPEMPath = string(in.String())
		case "SSLClientKeyPassword":
			out.SSLClientKeyPassword = string(in.String())
		case "AllowInvalidCertificate":
			out.AllowInvalidCertificate = bool(in.Bool())
		case "AllowInvalidHostname":
			out.AllowInvalidHostname = bool(in.Bool())
		case "UseSSH":
			out.UseSSH = bool(in.Bool())
		case "SSHConnection":
			(out.SSHConnection).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode142(out *jwriter.Writer, in MongoDBConnection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Server\":"
		out.RawString(prefix[1:])
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"AuthenticationDB\":"
		out.RawString(prefix)
		out.String(string(in.AuthenticationDB))
	}
	{
		const prefix string = ",\"MongoShellPath\":"
		out.RawString(prefix)
		out.String(string(in.MongoShellPath))
	}
	{
		const prefix string = ",\"MongodumpPath\":"
		out.RawString(prefix)
		out.String(string(in.MongodumpPath))
	}
	{
		const prefix string = ",\"ReadPreference\":"
		out.RawString(prefix)
		out.String(string(in.ReadPreference))
	}
	{
		const prefix string = ",\"UseReplica\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseReplica))
	}
	{
		const prefix string = ",\"ReplicaName\":"
		out.RawString(prefix)
		out.String(string(in.ReplicaName))
	}
	{
		const prefix string = ",\"ReplicaMembers\":"
		out.RawString(prefix)
		if in.ReplicaMembers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v256, v257 := range in.ReplicaMembers {
				if v256 > 0 {
					out.RawByte(',')
				}
				out.String(string(v257))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"UseSSL\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseSSL))
	}
	{
		const prefix string = ",\"ClientSSLPEMPath\":"
		out.RawString(prefix)
		out.String(string(in.ClientSSLPEMPath))
	}
	{
		const prefix string = ",\"ServerSSLPEMPath\":"
		out.RawString(prefix)
		out.String(string(in.ServerSSLPEMPath))
	}
	{
		const prefix string = ",\"SSLClientKeyPassword\":"
		out.RawString(prefix)
		out.String(string(in.SSLClientKeyPassword))
	}
	{
		const prefix string = ",\"AllowInvalidCertificate\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowInvalidCertificate))
	}
	{
		const prefix string = ",\"AllowInvalidHostname\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowInvalidHostname))
	}
	{
		const prefix string = ",\"UseSSH\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseSSH))
	}
	if true {
		const prefix string = ",\"SSHConnection\":"
		out.RawString(prefix)
		(in.SSHConnection).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoDBConnection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode142(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoDBConnection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode142(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoDBConnection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode142(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoDBConnection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode142(l, v)
}
func easyjsonB7f3de24Decode143(in *jlexer.Lexer, out *MacOSCodeSignProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Level":
			out.Level = MacOSCodesignLevel(in.Int())
		case "SignLocally":
			out.SignLocally = bool(in.Bool())
		case "SSHServer":
			(out.SSHServer).UnmarshalEasyJSON(in)
		case "CertificateName":
			out.CertificateName = string(in.String())
		case "AppCertificateName":
			out.AppCertificateName = string(in.String())
		case "AppleID":
			out.AppleID = string(in.String())
		case "AppleIDPass":
			out.AppleIDPass = string(in.String())
		case "AppleIDPassFormat":
			out.AppleIDPassFormat = uint64(in.Uint64())
		case "CertificateFile":
			out.CertificateFile = string(in.String())
		case "AppCertificateFile":
			out.AppCertificateFile = string(in.String())
		case "PfxFilePassword":
			out.PfxFilePassword = string(in.String())
		case "PfxFilePasswordFormat":
			out.PfxFilePasswordFormat = uint64(in.Uint64())
		case "NotaryAPIIssuerID":
			out.NotaryAPIIssuerID = string(in.String())
		case "NotaryAPIKeyID":
			out.NotaryAPIKeyID = string(in.String())
		case "NotaryAPIKeyFile":
			out.NotaryAPIKeyFile = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode143(out *jwriter.Writer, in MacOSCodeSignProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Level\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"SignLocally\":"
		out.RawString(prefix)
		out.Bool(bool(in.SignLocally))
	}
	{
		const prefix string = ",\"SSHServer\":"
		out.RawString(prefix)
		(in.SSHServer).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"CertificateName\":"
		out.RawString(prefix)
		out.String(string(in.CertificateName))
	}
	{
		const prefix string = ",\"AppCertificateName\":"
		out.RawString(prefix)
		out.String(string(in.AppCertificateName))
	}
	{
		const prefix string = ",\"AppleID\":"
		out.RawString(prefix)
		out.String(string(in.AppleID))
	}
	{
		const prefix string = ",\"AppleIDPass\":"
		out.RawString(prefix)
		out.String(string(in.AppleIDPass))
	}
	{
		const prefix string = ",\"AppleIDPassFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AppleIDPassFormat))
	}
	{
		const prefix string = ",\"CertificateFile\":"
		out.RawString(prefix)
		out.String(string(in.CertificateFile))
	}
	{
		const prefix string = ",\"AppCertificateFile\":"
		out.RawString(prefix)
		out.String(string(in.AppCertificateFile))
	}
	{
		const prefix string = ",\"PfxFilePassword\":"
		out.RawString(prefix)
		out.String(string(in.PfxFilePassword))
	}
	{
		const prefix string = ",\"PfxFilePasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.PfxFilePasswordFormat))
	}
	{
		const prefix string = ",\"NotaryAPIIssuerID\":"
		out.RawString(prefix)
		out.String(string(in.NotaryAPIIssuerID))
	}
	{
		const prefix string = ",\"NotaryAPIKeyID\":"
		out.RawString(prefix)
		out.String(string(in.NotaryAPIKeyID))
	}
	{
		const prefix string = ",\"NotaryAPIKeyFile\":"
		out.RawString(prefix)
		out.String(string(in.NotaryAPIKeyFile))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MacOSCodeSignProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode143(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MacOSCodeSignProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode143(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MacOSCodeSignProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode143(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MacOSCodeSignProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode143(l, v)
}
func easyjsonB7f3de24Decode144(in *jlexer.Lexer, out *MSSQLLoginArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Instance":
			out.Instance = string(in.String())
		case "AuthMode":
			out.AuthMode = MSSQLAuthMode(in.String())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "MethodIsOledb32Bit":
			out.MethodIsOledb32Bit = bool(in.Bool())
		case "RestoreNoRecovery":
			out.RestoreNoRecovery = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode144(out *jwriter.Writer, in MSSQLLoginArgs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Instance\":"
		out.RawString(prefix[1:])
		out.String(string(in.Instance))
	}
	{
		const prefix string = ",\"AuthMode\":"
		out.RawString(prefix)
		out.String(string(in.AuthMode))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"MethodIsOledb32Bit\":"
		out.RawString(prefix)
		out.Bool(bool(in.MethodIsOledb32Bit))
	}
	{
		const prefix string = ",\"RestoreNoRecovery\":"
		out.RawString(prefix)
		out.Bool(bool(in.RestoreNoRecovery))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MSSQLLoginArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode144(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MSSQLLoginArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode144(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MSSQLLoginArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode144(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MSSQLLoginArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode144(l, v)
}
func easyjsonB7f3de24Decode145(in *jlexer.Lexer, out *MSSQLConnection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = string(in.String())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "Hostname":
			out.Hostname = string(in.String())
		case "InstanceName":
			out.InstanceName = string(in.String())
		case "Method":
			out.Method = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode145(out *jwriter.Writer, in MSSQLConnection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"Hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"InstanceName\":"
		out.RawString(prefix)
		out.String(string(in.InstanceName))
	}
	{
		const prefix string = ",\"Method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MSSQLConnection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode145(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MSSQLConnection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode145(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MSSQLConnection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode145(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MSSQLConnection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode145(l, v)
}
func easyjsonB7f3de24Decode146(in *jlexer.Lexer, out *LoginProtectionOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Enabled":
			out.Enabled = bool(in.Bool())
		case "FailureThreshold":
			out.FailureThreshold = int64(in.Int64())
		case "CooldownSeconds":
			out.CooldownSeconds = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode146(out *jwriter.Writer, in LoginProtectionOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"FailureThreshold\":"
		out.RawString(prefix)
		out.Int64(int64(in.FailureThreshold))
	}
	{
		const prefix string = ",\"CooldownSeconds\":"
		out.RawString(prefix)
		out.Int64(int64(in.CooldownSeconds))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginProtectionOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode146(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginProtectionOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode146(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginProtectionOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode146(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginProtectionOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode146(l, v)
}
func easyjsonB7f3de24Decode147(in *jlexer.Lexer, out *LocalStorageDirectory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Path":
			out.Path = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode147(out *jwriter.Writer, in LocalStorageDirectory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalStorageDirectory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode147(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalStorageDirectory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode147(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalStorageDirectory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode147(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalStorageDirectory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode147(l, v)
}
func easyjsonB7f3de24Decode148(in *jlexer.Lexer, out *LocalDestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LocalcopyPath":
			out.LocalcopyPath = string(in.String())
		case "LocalcopyWinSMBUsername":
			out.LocalcopyWinSMBUsername = string(in.String())
		case "LocalcopyWinSMBPassword":
			out.LocalcopyWinSMBPassword = string(in.String())
		case "LocalcopyWinSMBPasswordFormat":
			out.LocalcopyWinSMBPasswordFormat = uint64(in.Uint64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode148(out *jwriter.Writer, in LocalDestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"LocalcopyPath\":"
		out.RawString(prefix[1:])
		out.String(string(in.LocalcopyPath))
	}
	{
		const prefix string = ",\"LocalcopyWinSMBUsername\":"
		out.RawString(prefix)
		out.String(string(in.LocalcopyWinSMBUsername))
	}
	{
		const prefix string = ",\"LocalcopyWinSMBPassword\":"
		out.RawString(prefix)
		out.String(string(in.LocalcopyWinSMBPassword))
	}
	{
		const prefix string = ",\"LocalcopyWinSMBPasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.LocalcopyWinSMBPasswordFormat))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalDestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode148(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalDestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode148(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalDestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode148(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalDestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode148(l, v)
}
func easyjsonB7f3de24Decode149(in *jlexer.Lexer, out *LiveUserConnection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "DeviceID":
			out.DeviceID = string(in.String())
		case "ReportedVersion":
			out.ReportedVersion = string(in.String())
		case "ReportedPlatform":
			out.ReportedPlatform = string(in.String())
		case "ReportedPlatformVersion":
			(out.ReportedPlatformVersion).UnmarshalEasyJSON(in)
		case "DeviceTimeZone":
			out.DeviceTimeZone = string(in.String())
		case "IPAddress":
			out.IPAddress = string(in.String())
		case "ConnectionTime":
			out.ConnectionTime = int64(in.Int64())
		case "AllowsFilenames":
			out.AllowsFilenames = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode149(out *jwriter.Writer, in LiveUserConnection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"DeviceID\":"
		out.RawString(prefix)
		out.String(string(in.DeviceID))
	}
	{
		const prefix string = ",\"ReportedVersion\":"
		out.RawString(prefix)
		out.String(string(in.ReportedVersion))
	}
	{
		const prefix string = ",\"ReportedPlatform\":"
		out.RawString(prefix)
		out.String(string(in.ReportedPlatform))
	}
	if true {
		const prefix string = ",\"ReportedPlatformVersion\":"
		out.RawString(prefix)
		(in.ReportedPlatformVersion).MarshalEasyJSON(out)
	}
	if in.DeviceTimeZone != "" {
		const prefix string = ",\"DeviceTimeZone\":"
		out.RawString(prefix)
		out.String(string(in.DeviceTimeZone))
	}
	if in.IPAddress != "" {
		const prefix string = ",\"IPAddress\":"
		out.RawString(prefix)
		out.String(string(in.IPAddress))
	}
	{
		const prefix string = ",\"ConnectionTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ConnectionTime))
	}
	{
		const prefix string = ",\"AllowsFilenames\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowsFilenames))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LiveUserConnection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode149(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LiveUserConnection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode149(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LiveUserConnection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode149(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LiveUserConnection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode149(l, v)
}
func easyjsonB7f3de24Decode150(in *jlexer.Lexer, out *LicenseOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Email":
			out.Email = string(in.String())
		case "SerialNumber":
			out.SerialNumber = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode150(out *jwriter.Writer, in LicenseOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"Email\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"SerialNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SerialNumber))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LicenseOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode150(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LicenseOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode150(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LicenseOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode150(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LicenseOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode150(l, v)
}
func easyjsonB7f3de24Decode151(in *jlexer.Lexer, out *LicenseLimits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "deviceCount":
			out.DeviceCount = int(in.Int())
		case "boosterCount":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.BoosterCount = make(map[string]int)
				} else {
					out.BoosterCount = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v258 int
					v258 = int(in.Int())
					(out.BoosterCount)[key] = v258
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode151(out *jwriter.Writer, in LicenseLimits) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DeviceCount != 0 {
		const prefix string = ",\"deviceCount\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.DeviceCount))
	}
	if len(in.BoosterCount) != 0 {
		const prefix string = ",\"boosterCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v259First := true
			for v259Name, v259Value := range in.BoosterCount {
				if v259First {
					v259First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v259Name))
				out.RawByte(':')
				out.Int(int(v259Value))
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LicenseLimits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode151(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LicenseLimits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode151(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LicenseLimits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode151(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LicenseLimits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode151(l, v)
}
func easyjsonB7f3de24Decode152(in *jlexer.Lexer, out *JobEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Time":
			out.Time = int64(in.Int64())
		case "Severity":
			out.Severity = Severity(in.String())
		case "Message":
			out.Message = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode152(out *jwriter.Writer, in JobEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"Severity\":"
		out.RawString(prefix)
		out.String(string(in.Severity))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JobEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode152(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JobEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode152(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JobEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode152(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JobEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode152(l, v)
}
func easyjsonB7f3de24Decode153(in *jlexer.Lexer, out *InstallTokenResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "InstallToken":
			(out.InstallToken).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode153(out *jwriter.Writer, in InstallTokenResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"InstallToken\":"
		out.RawString(prefix)
		(in.InstallToken).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InstallTokenResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode153(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InstallTokenResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode153(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InstallTokenResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode153(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InstallTokenResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode153(l, v)
}
func easyjsonB7f3de24Decode154(in *jlexer.Lexer, out *InstallToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "Server":
			out.Server = string(in.String())
		case "Token":
			out.Token = string(in.String())
		case "CreateTime":
			out.CreateTime = int64(in.Int64())
		case "Used":
			out.Used = bool(in.Bool())
		case "ExpireTime":
			out.ExpireTime = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode154(out *jwriter.Writer, in InstallToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Server\":"
		out.RawString(prefix)
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"Token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"CreateTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateTime))
	}
	{
		const prefix string = ",\"Used\":"
		out.RawString(prefix)
		out.Bool(bool(in.Used))
	}
	{
		const prefix string = ",\"ExpireTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExpireTime))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InstallToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode154(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InstallToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode154(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InstallToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode154(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InstallToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode154(l, v)
}
func easyjsonB7f3de24Decode155(in *jlexer.Lexer, out *InstallCreds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "TOTPCode":
			out.TOTPCode = string(in.String())
		case "Server":
			out.Server = string(in.String())
		case "AutoLogin":
			out.AutoLogin = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode155(out *jwriter.Writer, in InstallCreds) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"TOTPCode\":"
		out.RawString(prefix)
		out.String(string(in.TOTPCode))
	}
	{
		const prefix string = ",\"Server\":"
		out.RawString(prefix)
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"AutoLogin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AutoLogin))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InstallCreds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode155(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InstallCreds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode155(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InstallCreds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode155(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InstallCreds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode155(l, v)
}
func easyjsonB7f3de24Decode156(in *jlexer.Lexer, out *ImpossibleCloudPartnerTemplateSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Region":
			out.Region = string(in.String())
		case "AccessKey":
			out.AccessKey = string(in.String())
		case "UseObjectLock":
			out.UseObjectLock_Legacy_DoNotUse = bool(in.Bool())
		case "ObjectLockMode":
			out.ObjectLockMode = uint8(in.Uint8())
		case "ObjectLockDays":
			out.ObjectLockDays = int(in.Int())
		case "RemoveDeleted":
			out.RemoveDeleted = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode156(out *jwriter.Writer, in ImpossibleCloudPartnerTemplateSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Region\":"
		out.RawString(prefix[1:])
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"AccessKey\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"UseObjectLock\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseObjectLock_Legacy_DoNotUse))
	}
	{
		const prefix string = ",\"ObjectLockMode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ObjectLockMode))
	}
	{
		const prefix string = ",\"ObjectLockDays\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectLockDays))
	}
	{
		const prefix string = ",\"RemoveDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.RemoveDeleted))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ImpossibleCloudPartnerTemplateSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode156(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImpossibleCloudPartnerTemplateSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode156(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImpossibleCloudPartnerTemplateSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode156(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImpossibleCloudPartnerTemplateSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode156(l, v)
}
func easyjsonB7f3de24Decode157(in *jlexer.Lexer, out *ImpossibleCloudIAMTemplateSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AccessKey":
			out.AccessKey = string(in.String())
		case "SecretKey":
			out.SecretKey = string(in.String())
		case "Region":
			out.Region = string(in.String())
		case "UseObjectLock":
			out.UseObjectLock_Legacy_DoNotUse = bool(in.Bool())
		case "ObjectLockMode":
			out.ObjectLockMode = uint8(in.Uint8())
		case "ObjectLockDays":
			out.ObjectLockDays = int(in.Int())
		case "RemoveDeleted":
			out.RemoveDeleted = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode157(out *jwriter.Writer, in ImpossibleCloudIAMTemplateSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AccessKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"SecretKey\":"
		out.RawString(prefix)
		out.String(string(in.SecretKey))
	}
	{
		const prefix string = ",\"Region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"UseObjectLock\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseObjectLock_Legacy_DoNotUse))
	}
	{
		const prefix string = ",\"ObjectLockMode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ObjectLockMode))
	}
	{
		const prefix string = ",\"ObjectLockDays\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectLockDays))
	}
	{
		const prefix string = ",\"RemoveDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.RemoveDeleted))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ImpossibleCloudIAMTemplateSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode157(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImpossibleCloudIAMTemplateSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode157(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImpossibleCloudIAMTemplateSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode157(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImpossibleCloudIAMTemplateSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode157(l, v)
}
func easyjsonB7f3de24Decode158(in *jlexer.Lexer, out *HyperVRestoreTargetOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DiskStoragePath":
			out.DiskStoragePath = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode158(out *jwriter.Writer, in HyperVRestoreTargetOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DiskStoragePath\":"
		out.RawString(prefix[1:])
		out.String(string(in.DiskStoragePath))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HyperVRestoreTargetOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode158(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HyperVRestoreTargetOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode158(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HyperVRestoreTargetOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode158(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HyperVRestoreTargetOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode158(l, v)
}
func easyjsonB7f3de24Decode159(in *jlexer.Lexer, out *HyperVMachineInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Name":
			out.DisplayName = string(in.String())
		case "MemoryLimitMB":
			out.MemoryLimitMB = int64(in.Int64())
		case "CPUCores":
			out.CPUCores = int64(in.Int64())
		case "HardDrives":
			if in.IsNull() {
				in.Skip()
				out.HardDrives = nil
			} else {
				in.Delim('[')
				if out.HardDrives == nil {
					if !in.IsDelim(']') {
						out.HardDrives = make([]string, 0, 4)
					} else {
						out.HardDrives = []string{}
					}
				} else {
					out.HardDrives = (out.HardDrives)[:0]
				}
				for !in.IsDelim(']') {
					var v260 string
					v260 = string(in.String())
					out.HardDrives = append(out.HardDrives, v260)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Generation":
			out.Generation = int(in.Int())
		case "ConfigFilePath":
			out.ConfigFilePath = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode159(out *jwriter.Writer, in HyperVMachineInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"MemoryLimitMB\":"
		out.RawString(prefix)
		out.Int64(int64(in.MemoryLimitMB))
	}
	{
		const prefix string = ",\"CPUCores\":"
		out.RawString(prefix)
		out.Int64(int64(in.CPUCores))
	}
	{
		const prefix string = ",\"HardDrives\":"
		out.RawString(prefix)
		if in.HardDrives == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v261, v262 := range in.HardDrives {
				if v261 > 0 {
					out.RawByte(',')
				}
				out.String(string(v262))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Generation\":"
		out.RawString(prefix)
		out.Int(int(in.Generation))
	}
	{
		const prefix string = ",\"ConfigFilePath\":"
		out.RawString(prefix)
		out.String(string(in.ConfigFilePath))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HyperVMachineInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode159(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HyperVMachineInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode159(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HyperVMachineInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode159(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HyperVMachineInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode159(l, v)
}
func easyjsonB7f3de24Decode160(in *jlexer.Lexer, out *HourSchedConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Hour":
			out.Hour = uint64(in.Uint64())
		case "Minutes":
			out.Minutes = uint64(in.Uint64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode160(out *jwriter.Writer, in HourSchedConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Hour\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Hour))
	}
	{
		const prefix string = ",\"Minutes\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Minutes))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HourSchedConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode160(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HourSchedConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode160(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HourSchedConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode160(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HourSchedConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode160(l, v)
}
func easyjsonB7f3de24Decode161(in *jlexer.Lexer, out *HTTPConnectorOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ListenAddress":
			out.ListenAddress__DONOTUSEDIRECTLY = string(in.String())
		case "SSLCertPath":
			out.SSLCertPath = string(in.String())
		case "SSLIntermediate":
			out.SSLIntermediate = string(in.String())
		case "SSLCertKey":
			out.SSLCertKey = string(in.String())
		case "AutoSSLDomains":
			out.AutoSSLDomains = string(in.String())
		case "SSLPfxPath":
			out.SSLPfxPath = string(in.String())
		case "SSLPfxPassword":
			out.SSLPfxPassword = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode161(out *jwriter.Writer, in HTTPConnectorOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ListenAddress\":"
		out.RawString(prefix[1:])
		out.String(string(in.ListenAddress__DONOTUSEDIRECTLY))
	}
	if in.SSLCertPath != "" {
		const prefix string = ",\"SSLCertPath\":"
		out.RawString(prefix)
		out.String(string(in.SSLCertPath))
	}
	if in.SSLIntermediate != "" {
		const prefix string = ",\"SSLIntermediate\":"
		out.RawString(prefix)
		out.String(string(in.SSLIntermediate))
	}
	if in.SSLCertKey != "" {
		const prefix string = ",\"SSLCertKey\":"
		out.RawString(prefix)
		out.String(string(in.SSLCertKey))
	}
	if in.AutoSSLDomains != "" {
		const prefix string = ",\"AutoSSLDomains\":"
		out.RawString(prefix)
		out.String(string(in.AutoSSLDomains))
	}
	if in.SSLPfxPath != "" {
		const prefix string = ",\"SSLPfxPath\":"
		out.RawString(prefix)
		out.String(string(in.SSLPfxPath))
	}
	if in.SSLPfxPassword != "" {
		const prefix string = ",\"SSLPfxPassword\":"
		out.RawString(prefix)
		out.String(string(in.SSLPfxPassword))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HTTPConnectorOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode161(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HTTPConnectorOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode161(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HTTPConnectorOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode161(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HTTPConnectorOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode161(l, v)
}
func easyjsonB7f3de24Decode162(in *jlexer.Lexer, out *GroupPolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Description":
			out.Description = string(in.String())
		case "OrganizationID":
			out.OrganizationID = string(in.String())
		case "Policy":
			(out.Policy).UnmarshalEasyJSON(in)
		case "DefaultUserPolicy":
			out.DefaultUserPolicy = bool(in.Bool())
		case "CreatedDate":
			out.CreatedDate = int64(in.Int64())
		case "ModifiedDate":
			out.ModifiedDate = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode162(out *jwriter.Writer, in GroupPolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"OrganizationID\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"Policy\":"
		out.RawString(prefix)
		(in.Policy).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"DefaultUserPolicy\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultUserPolicy))
	}
	{
		const prefix string = ",\"CreatedDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreatedDate))
	}
	{
		const prefix string = ",\"ModifiedDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.ModifiedDate))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupPolicy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode162(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupPolicy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode162(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupPolicy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode162(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupPolicy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode162(l, v)
}
func easyjsonB7f3de24Decode163(in *jlexer.Lexer, out *GlobalOverrideOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RandomDelaySecs":
			out.RandomDelaySecs = uint64(in.Uint64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode163(out *jwriter.Writer, in GlobalOverrideOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RandomDelaySecs != 0 {
		const prefix string = ",\"RandomDelaySecs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.RandomDelaySecs))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalOverrideOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode163(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalOverrideOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode163(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalOverrideOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode163(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalOverrideOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode163(l, v)
}
func easyjsonB7f3de24Decode164(in *jlexer.Lexer, out *GetUserGroupWithUsersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserGroup":
			(out.UserGroup).UnmarshalEasyJSON(in)
		case "Users":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Users = make(map[string]UserProfileConfig)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v263 UserProfileConfig
					(v263).UnmarshalEasyJSON(in)
					(out.Users)[key] = v263
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode164(out *jwriter.Writer, in GetUserGroupWithUsersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserGroup\":"
		out.RawString(prefix[1:])
		(in.UserGroup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v264First := true
			for v264Name, v264Value := range in.Users {
				if v264First {
					v264First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v264Name))
				out.RawByte(':')
				(v264Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserGroupWithUsersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode164(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserGroupWithUsersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode164(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserGroupWithUsersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode164(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserGroupWithUsersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode164(l, v)
}
func easyjsonB7f3de24Decode165(in *jlexer.Lexer, out *GetUserGroupResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserGroup":
			(out.UserGroup).UnmarshalEasyJSON(in)
		case "UserGroupHash":
			out.UserGroupHash = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode165(out *jwriter.Writer, in GetUserGroupResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserGroup\":"
		out.RawString(prefix[1:])
		(in.UserGroup).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"UserGroupHash\":"
		out.RawString(prefix)
		out.String(string(in.UserGroupHash))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserGroupResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode165(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserGroupResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode165(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserGroupResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode165(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserGroupResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode165(l, v)
}
func easyjsonB7f3de24Decode166(in *jlexer.Lexer, out *GetProfileHashResponseMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "ProfileHash":
			out.ProfileHash = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode166(out *jwriter.Writer, in GetProfileHashResponseMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ProfileHash\":"
		out.RawString(prefix)
		out.String(string(in.ProfileHash))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetProfileHashResponseMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode166(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetProfileHashResponseMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode166(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetProfileHashResponseMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode166(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetProfileHashResponseMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode166(l, v)
}
func easyjsonB7f3de24Decode167(in *jlexer.Lexer, out *GetProfileAndHashResponseMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "ProfileHash":
			out.ProfileHash = string(in.String())
		case "Profile":
			(out.Profile).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode167(out *jwriter.Writer, in GetProfileAndHashResponseMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ProfileHash\":"
		out.RawString(prefix)
		out.String(string(in.ProfileHash))
	}
	{
		const prefix string = ",\"Profile\":"
		out.RawString(prefix)
		(in.Profile).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetProfileAndHashResponseMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode167(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetProfileAndHashResponseMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode167(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetProfileAndHashResponseMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode167(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetProfileAndHashResponseMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode167(l, v)
}
func easyjsonB7f3de24Decode168(in *jlexer.Lexer, out *GetGroupPolicyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Policy":
			(out.Policy).UnmarshalEasyJSON(in)
		case "PolicyHash":
			out.PolicyHash = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode168(out *jwriter.Writer, in GetGroupPolicyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Policy\":"
		out.RawString(prefix)
		(in.Policy).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"PolicyHash\":"
		out.RawString(prefix)
		out.String(string(in.PolicyHash))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetGroupPolicyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode168(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetGroupPolicyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode168(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetGroupPolicyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode168(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetGroupPolicyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode168(l, v)
}
func easyjsonB7f3de24Decode169(in *jlexer.Lexer, out *FileOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Filename":
			out.Filename = string(in.String())
		case "AllowEventTypes":
			if in.IsNull() {
				in.Skip()
				out.AllowEventTypes = nil
			} else {
				in.Delim('[')
				if out.AllowEventTypes == nil {
					if !in.IsDelim(']') {
						out.AllowEventTypes = make([]StreamableEventType, 0, 8)
					} else {
						out.AllowEventTypes = []StreamableEventType{}
					}
				} else {
					out.AllowEventTypes = (out.AllowEventTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v265 StreamableEventType
					v265 = StreamableEventType(in.Int())
					out.AllowEventTypes = append(out.AllowEventTypes, v265)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Level":
			out.Level = StreamLevel(in.String())
		case "PruningEnabled":
			out.PruningEnabled = bool(in.Bool())
		case "PruningLimit":
			out.PruningLimit = int(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode169(out *jwriter.Writer, in FileOption) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Filename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Filename))
	}
	if len(in.AllowEventTypes) != 0 {
		const prefix string = ",\"AllowEventTypes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v266, v267 := range in.AllowEventTypes {
				if v266 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v267))
			}
			out.RawByte(']')
		}
	}
	if in.Level != "" {
		const prefix string = ",\"Level\":"
		out.RawString(prefix)
		out.String(string(in.Level))
	}
	if in.PruningEnabled {
		const prefix string = ",\"PruningEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.PruningEnabled))
	}
	if in.PruningLimit != 0 {
		const prefix string = ",\"PruningLimit\":"
		out.RawString(prefix)
		out.Int(int(in.PruningLimit))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode169(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode169(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode169(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode169(l, v)
}
func easyjsonB7f3de24Decode170(in *jlexer.Lexer, out *FTPDestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FTPServer":
			out.FTPServer = string(in.String())
		case "FTPUsername":
			out.FTPUsername = string(in.String())
		case "FTPPassword":
			out.FTPPassword = string(in.String())
		case "FTPBaseUseHomeDirectory":
			out.FTPBaseUseHomeDirectory = bool(in.Bool())
		case "FTPCustomBaseDirectory":
			out.FTPCustomBaseDirectory = string(in.String())
		case "FTPSMode":
			out.FTPSMode = FtpsModeType(in.Int())
		case "FTPPort":
			out.FTPPort = int(in.Int())
		case "FTPMaxConnections":
			out.FTPMaxConnections = int(in.Int())
		case "FTPAcceptInvalidSSL":
			out.FTPAcceptInvalidSSL = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode170(out *jwriter.Writer, in FTPDestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FTPServer\":"
		out.RawString(prefix[1:])
		out.String(string(in.FTPServer))
	}
	{
		const prefix string = ",\"FTPUsername\":"
		out.RawString(prefix)
		out.String(string(in.FTPUsername))
	}
	{
		const prefix string = ",\"FTPPassword\":"
		out.RawString(prefix)
		out.String(string(in.FTPPassword))
	}
	{
		const prefix string = ",\"FTPBaseUseHomeDirectory\":"
		out.RawString(prefix)
		out.Bool(bool(in.FTPBaseUseHomeDirectory))
	}
	{
		const prefix string = ",\"FTPCustomBaseDirectory\":"
		out.RawString(prefix)
		out.String(string(in.FTPCustomBaseDirectory))
	}
	{
		const prefix string = ",\"FTPSMode\":"
		out.RawString(prefix)
		out.Int(int(in.FTPSMode))
	}
	{
		const prefix string = ",\"FTPPort\":"
		out.RawString(prefix)
		out.Int(int(in.FTPPort))
	}
	{
		const prefix string = ",\"FTPMaxConnections\":"
		out.RawString(prefix)
		out.Int(int(in.FTPMaxConnections))
	}
	{
		const prefix string = ",\"FTPAcceptInvalidSSL\":"
		out.RawString(prefix)
		out.Bool(bool(in.FTPAcceptInvalidSSL))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FTPDestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode170(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FTPDestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode170(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FTPDestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode170(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FTPDestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode170(l, v)
}
func easyjsonB7f3de24Decode171(in *jlexer.Lexer, out *ExtraFileExclusion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Exclude":
			out.Exclude = string(in.String())
		case "Regex":
			out.Regex = bool(in.Bool())
		case "RestrictOS":
			out.RestrictOS = ExtraFileExclusionOSRestriction(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode171(out *jwriter.Writer, in ExtraFileExclusion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Exclude\":"
		out.RawString(prefix[1:])
		out.String(string(in.Exclude))
	}
	{
		const prefix string = ",\"Regex\":"
		out.RawString(prefix)
		out.Bool(bool(in.Regex))
	}
	{
		const prefix string = ",\"RestrictOS\":"
		out.RawString(prefix)
		out.Int(int(in.RestrictOS))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExtraFileExclusion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode171(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExtraFileExclusion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode171(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExtraFileExclusion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode171(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExtraFileExclusion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode171(l, v)
}
func easyjsonB7f3de24Decode172(in *jlexer.Lexer, out *ExternalLDAPAuthenticationSourceSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Hostname":
			out.Hostname = string(in.String())
		case "Port":
			out.Port = int(in.Int())
		case "SecurityMethod":
			out.SecurityMethod = LDAPSecurityMethod(in.String())
		case "AcceptInvalidSSL":
			out.AcceptInvalidSSL = bool(in.Bool())
		case "FallbackServers":
			if in.IsNull() {
				in.Skip()
				out.FallbackServers = nil
			} else {
				in.Delim('[')
				if out.FallbackServers == nil {
					if !in.IsDelim(']') {
						out.FallbackServers = make([]ExternalLDAPAuthenticationSourceServer, 0, 1)
					} else {
						out.FallbackServers = []ExternalLDAPAuthenticationSourceServer{}
					}
				} else {
					out.FallbackServers = (out.FallbackServers)[:0]
				}
				for !in.IsDelim(']') {
					var v268 ExternalLDAPAuthenticationSourceServer
					(v268).UnmarshalEasyJSON(in)
					out.FallbackServers = append(out.FallbackServers, v268)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BindUser":
			out.BindUser = string(in.String())
		case "BindPassword":
			out.BindPassword = string(in.String())
		case "SearchDN":
			out.SearchDN = string(in.String())
		case "SearchFilter":
			out.SearchFilter = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode172(out *jwriter.Writer, in ExternalLDAPAuthenticationSourceSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Hostname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"SecurityMethod\":"
		out.RawString(prefix)
		out.String(string(in.SecurityMethod))
	}
	{
		const prefix string = ",\"AcceptInvalidSSL\":"
		out.RawString(prefix)
		out.Bool(bool(in.AcceptInvalidSSL))
	}
	{
		const prefix string = ",\"FallbackServers\":"
		out.RawString(prefix)
		if in.FallbackServers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v269, v270 := range in.FallbackServers {
				if v269 > 0 {
					out.RawByte(',')
				}
				(v270).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BindUser\":"
		out.RawString(prefix)
		out.String(string(in.BindUser))
	}
	{
		const prefix string = ",\"BindPassword\":"
		out.RawString(prefix)
		out.String(string(in.BindPassword))
	}
	{
		const prefix string = ",\"SearchDN\":"
		out.RawString(prefix)
		out.String(string(in.SearchDN))
	}
	{
		const prefix string = ",\"SearchFilter\":"
		out.RawString(prefix)
		out.String(string(in.SearchFilter))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExternalLDAPAuthenticationSourceSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode172(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExternalLDAPAuthenticationSourceSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode172(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExternalLDAPAuthenticationSourceSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode172(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExternalLDAPAuthenticationSourceSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode172(l, v)
}
func easyjsonB7f3de24Decode173(in *jlexer.Lexer, out *ExternalLDAPAuthenticationSourceServer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Hostname":
			out.Hostname = string(in.String())
		case "Port":
			out.Port = int(in.Int())
		case "SecurityMethod":
			out.SecurityMethod = LDAPSecurityMethod(in.String())
		case "AcceptInvalidSSL":
			out.AcceptInvalidSSL = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode173(out *jwriter.Writer, in ExternalLDAPAuthenticationSourceServer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Hostname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"SecurityMethod\":"
		out.RawString(prefix)
		out.String(string(in.SecurityMethod))
	}
	{
		const prefix string = ",\"AcceptInvalidSSL\":"
		out.RawString(prefix)
		out.Bool(bool(in.AcceptInvalidSSL))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExternalLDAPAuthenticationSourceServer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode173(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExternalLDAPAuthenticationSourceServer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode173(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExternalLDAPAuthenticationSourceServer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode173(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExternalLDAPAuthenticationSourceServer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode173(l, v)
}
func easyjsonB7f3de24Decode174(in *jlexer.Lexer, out *ExternalAuthenticationSourceResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "ID":
			out.ID = string(in.String())
		case "Source":
			(out.Source).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode174(out *jwriter.Writer, in ExternalAuthenticationSourceResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Source\":"
		out.RawString(prefix)
		(in.Source).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExternalAuthenticationSourceResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode174(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExternalAuthenticationSourceResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode174(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExternalAuthenticationSourceResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode174(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExternalAuthenticationSourceResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode174(l, v)
}
func easyjsonB7f3de24Decode175(in *jlexer.Lexer, out *ExternalAuthenticationSourceDisplay) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DisplayName":
			out.DisplayName = string(in.String())
		case "LoginStartURL":
			out.LoginStartURL = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode175(out *jwriter.Writer, in ExternalAuthenticationSourceDisplay) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DisplayName\":"
		out.RawString(prefix[1:])
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"LoginStartURL\":"
		out.RawString(prefix)
		out.String(string(in.LoginStartURL))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExternalAuthenticationSourceDisplay) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode175(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExternalAuthenticationSourceDisplay) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode175(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExternalAuthenticationSourceDisplay) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode175(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExternalAuthenticationSourceDisplay) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode175(l, v)
}
func easyjsonB7f3de24Decode176(in *jlexer.Lexer, out *ExternalAuthenticationSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = RemoteServerType(in.String())
		case "Description":
			out.Description = string(in.String())
		case "RemoteAddress":
			out.RemoteAddress = string(in.String())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "LDAP":
			(out.LDAP).UnmarshalEasyJSON(in)
		case "OIDC":
			(out.OIDC).UnmarshalEasyJSON(in)
		case "B2":
			(out.B2).UnmarshalEasyJSON(in)
		case "Wasabi":
			(out.Wasabi).UnmarshalEasyJSON(in)
		case "Custom":
			(out.Custom).UnmarshalEasyJSON(in)
		case "S3":
			(out.S3).UnmarshalEasyJSON(in)
		case "AWS":
			(out.AWS).UnmarshalEasyJSON(in)
		case "Storj":
			(out.Storj).UnmarshalEasyJSON(in)
		case "ImpPartner":
			(out.ImpPartner).UnmarshalEasyJSON(in)
		case "ImpUser":
			(out.ImpUser).UnmarshalEasyJSON(in)
		case "NewUserPermissions":
			(out.NewUserPermissions).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode176(out *jwriter.Writer, in ExternalAuthenticationSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.RemoteAddress != "" {
		const prefix string = ",\"RemoteAddress\":"
		out.RawString(prefix)
		out.String(string(in.RemoteAddress))
	}
	if in.Username != "" {
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.Password != "" {
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if true {
		const prefix string = ",\"LDAP\":"
		out.RawString(prefix)
		(in.LDAP).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"OIDC\":"
		out.RawString(prefix)
		(in.OIDC).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"B2\":"
		out.RawString(prefix)
		(in.B2).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Wasabi\":"
		out.RawString(prefix)
		(in.Wasabi).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Custom\":"
		out.RawString(prefix)
		(in.Custom).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"S3\":"
		out.RawString(prefix)
		(in.S3).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"AWS\":"
		out.RawString(prefix)
		(in.AWS).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"Storj\":"
		out.RawString(prefix)
		(in.Storj).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"ImpPartner\":"
		out.RawString(prefix)
		(in.ImpPartner).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"ImpUser\":"
		out.RawString(prefix)
		(in.ImpUser).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"NewUserPermissions\":"
		out.RawString(prefix)
		(in.NewUserPermissions).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExternalAuthenticationSource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode176(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExternalAuthenticationSource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode176(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExternalAuthenticationSource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode176(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExternalAuthenticationSource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode176(l, v)
}
func easyjsonB7f3de24Decode177(in *jlexer.Lexer, out *EmailReportingOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "EmailReportConfig":
			(out.EmailReportConfig).UnmarshalEasyJSON(in)
		case "LanguageCode":
			out.LanguageCode = LanguageCode(in.String())
		case "LocalTimezone":
			out.LocalTimezone = string(in.String())
		case "Recipients":
			if in.IsNull() {
				in.Skip()
				out.Recipients = nil
			} else {
				in.Delim('[')
				if out.Recipients == nil {
					if !in.IsDelim(']') {
						out.Recipients = make([]string, 0, 4)
					} else {
						out.Recipients = []string{}
					}
				} else {
					out.Recipients = (out.Recipients)[:0]
				}
				for !in.IsDelim(']') {
					var v271 string
					v271 = string(in.String())
					out.Recipients = append(out.Recipients, v271)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode177(out *jwriter.Writer, in EmailReportingOption) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"EmailReportConfig\":"
		out.RawString(prefix[1:])
		(in.EmailReportConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"LanguageCode\":"
		out.RawString(prefix)
		out.String(string(in.LanguageCode))
	}
	{
		const prefix string = ",\"LocalTimezone\":"
		out.RawString(prefix)
		out.String(string(in.LocalTimezone))
	}
	{
		const prefix string = ",\"Recipients\":"
		out.RawString(prefix)
		if in.Recipients == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v272, v273 := range in.Recipients {
				if v272 > 0 {
					out.RawByte(',')
				}
				out.String(string(v273))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmailReportingOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode177(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmailReportingOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode177(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmailReportingOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode177(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmailReportingOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode177(l, v)
}
func easyjsonB7f3de24Decode178(in *jlexer.Lexer, out *EmailReportGeneratedPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "From":
			out.From = string(in.String())
		case "To":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				in.Delim('[')
				if out.To == nil {
					if !in.IsDelim(']') {
						out.To = make([]string, 0, 4)
					} else {
						out.To = []string{}
					}
				} else {
					out.To = (out.To)[:0]
				}
				for !in.IsDelim(']') {
					var v274 string
					v274 = string(in.String())
					out.To = append(out.To, v274)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EmailSubject":
			out.EmailSubject = string(in.String())
		case "EmailBodyHTML":
			out.EmailBodyHTML = string(in.String())
		case "EmailBodyPlaintext":
			out.EmailBodyPlaintext = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode178(out *jwriter.Writer, in EmailReportGeneratedPreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		if in.To == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v275, v276 := range in.To {
				if v275 > 0 {
					out.RawByte(',')
				}
				out.String(string(v276))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"EmailSubject\":"
		out.RawString(prefix)
		out.String(string(in.EmailSubject))
	}
	{
		const prefix string = ",\"EmailBodyHTML\":"
		out.RawString(prefix)
		out.String(string(in.EmailBodyHTML))
	}
	{
		const prefix string = ",\"EmailBodyPlaintext\":"
		out.RawString(prefix)
		out.String(string(in.EmailBodyPlaintext))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmailReportGeneratedPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode178(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmailReportGeneratedPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode178(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmailReportGeneratedPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode178(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmailReportGeneratedPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode178(l, v)
}
func easyjsonB7f3de24Decode179(in *jlexer.Lexer, out *EmailReportConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ReportType":
			out.ReportType = EmailReportType(in.Int())
		case "SummaryFrequency":
			if in.IsNull() {
				in.Skip()
				out.SummaryFrequency = nil
			} else {
				in.Delim('[')
				if out.SummaryFrequency == nil {
					if !in.IsDelim(']') {
						out.SummaryFrequency = make([]ScheduleConfig, 0, 0)
					} else {
						out.SummaryFrequency = []ScheduleConfig{}
					}
				} else {
					out.SummaryFrequency = (out.SummaryFrequency)[:0]
				}
				for !in.IsDelim(']') {
					var v277 ScheduleConfig
					(v277).UnmarshalEasyJSON(in)
					out.SummaryFrequency = append(out.SummaryFrequency, v277)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TimeSpan":
			(out.TimeSpan).UnmarshalEasyJSON(in)
		case "Filter":
			(out.Filter).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode179(out *jwriter.Writer, in EmailReportConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ReportType\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ReportType))
	}
	{
		const prefix string = ",\"SummaryFrequency\":"
		out.RawString(prefix)
		if in.SummaryFrequency == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v278, v279 := range in.SummaryFrequency {
				if v278 > 0 {
					out.RawByte(',')
				}
				(v279).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"TimeSpan\":"
		out.RawString(prefix)
		(in.TimeSpan).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Filter\":"
		out.RawString(prefix)
		(in.Filter).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmailReportConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode179(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmailReportConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode179(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmailReportConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode179(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmailReportConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode179(l, v)
}
func easyjsonB7f3de24Decode180(in *jlexer.Lexer, out *EmailOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FromEmail":
			out.FromEmail = string(in.String())
		case "FromName":
			out.FromName = string(in.String())
		case "Mode":
			out.Mode = EmailDeliveryType(in.String())
		case "EmailReportingOptions":
			if in.IsNull() {
				in.Skip()
				out.EmailReportingOptions = nil
			} else {
				in.Delim('[')
				if out.EmailReportingOptions == nil {
					if !in.IsDelim(']') {
						out.EmailReportingOptions = make([]EmailReportingOption, 0, 0)
					} else {
						out.EmailReportingOptions = []EmailReportingOption{}
					}
				} else {
					out.EmailReportingOptions = (out.EmailReportingOptions)[:0]
				}
				for !in.IsDelim(']') {
					var v280 EmailReportingOption
					(v280).UnmarshalEasyJSON(in)
					out.EmailReportingOptions = append(out.EmailReportingOptions, v280)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SMTPHost":
			out.SMTPHost = string(in.String())
		case "SMTPPort":
			out.SMTPPort = int(in.Int())
		case "SMTPUsername":
			out.SMTPUsername = string(in.String())
		case "SMTPPassword":
			out.SMTPPassword = string(in.String())
		case "SMTPAllowInvalidCertificate":
			out.SMTPAllowInvalidCertificate = bool(in.Bool())
		case "SMTPAllowUnencrypted":
			out.SMTPAllowUnencrypted = bool(in.Bool())
		case "SMTPCustomEhlo":
			out.SMTPCustomEhlo = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode180(out *jwriter.Writer, in EmailOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FromEmail\":"
		out.RawString(prefix[1:])
		out.String(string(in.FromEmail))
	}
	{
		const prefix string = ",\"FromName\":"
		out.RawString(prefix)
		out.String(string(in.FromName))
	}
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	if len(in.EmailReportingOptions) != 0 {
		const prefix string = ",\"EmailReportingOptions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v281, v282 := range in.EmailReportingOptions {
				if v281 > 0 {
					out.RawByte(',')
				}
				(v282).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.SMTPHost != "" {
		const prefix string = ",\"SMTPHost\":"
		out.RawString(prefix)
		out.String(string(in.SMTPHost))
	}
	if in.SMTPPort != 0 {
		const prefix string = ",\"SMTPPort\":"
		out.RawString(prefix)
		out.Int(int(in.SMTPPort))
	}
	if in.SMTPUsername != "" {
		const prefix string = ",\"SMTPUsername\":"
		out.RawString(prefix)
		out.String(string(in.SMTPUsername))
	}
	if in.SMTPPassword != "" {
		const prefix string = ",\"SMTPPassword\":"
		out.RawString(prefix)
		out.String(string(in.SMTPPassword))
	}
	if in.SMTPAllowInvalidCertificate {
		const prefix string = ",\"SMTPAllowInvalidCertificate\":"
		out.RawString(prefix)
		out.Bool(bool(in.SMTPAllowInvalidCertificate))
	}
	if in.SMTPAllowUnencrypted {
		const prefix string = ",\"SMTPAllowUnencrypted\":"
		out.RawString(prefix)
		out.Bool(bool(in.SMTPAllowUnencrypted))
	}
	if in.SMTPCustomEhlo != "" {
		const prefix string = ",\"SMTPCustomEhlo\":"
		out.RawString(prefix)
		out.String(string(in.SMTPCustomEhlo))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmailOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode180(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmailOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode180(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmailOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode180(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmailOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode180(l, v)
}
func easyjsonB7f3de24Decode181(in *jlexer.Lexer, out *EDBFileInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Guid":
			out.GUID = string(in.String())
		case "ServerName":
			out.ServerName = string(in.String())
		case "CircularLoggingEnabled":
			out.CircularLoggingEnabled = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode181(out *jwriter.Writer, in EDBFileInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Guid\":"
		out.RawString(prefix)
		out.String(string(in.GUID))
	}
	{
		const prefix string = ",\"ServerName\":"
		out.RawString(prefix)
		out.String(string(in.ServerName))
	}
	{
		const prefix string = ",\"CircularLoggingEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.CircularLoggingEnabled))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EDBFileInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode181(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EDBFileInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode181(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EDBFileInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode181(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EDBFileInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode181(l, v)
}
func easyjsonB7f3de24Decode182(in *jlexer.Lexer, out *DispatcherWindiskSnapshotResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "WindiskSnapshot":
			if in.IsNull() {
				in.Skip()
				out.WindiskSnapshot = nil
			} else {
				in.Delim('[')
				if out.WindiskSnapshot == nil {
					if !in.IsDelim(']') {
						out.WindiskSnapshot = make([]DiskDrive, 0, 0)
					} else {
						out.WindiskSnapshot = []DiskDrive{}
					}
				} else {
					out.WindiskSnapshot = (out.WindiskSnapshot)[:0]
				}
				for !in.IsDelim(']') {
					var v283 DiskDrive
					(v283).UnmarshalEasyJSON(in)
					out.WindiskSnapshot = append(out.WindiskSnapshot, v283)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode182(out *jwriter.Writer, in DispatcherWindiskSnapshotResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"WindiskSnapshot\":"
		out.RawString(prefix)
		if in.WindiskSnapshot == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v284, v285 := range in.WindiskSnapshot {
				if v284 > 0 {
					out.RawByte(',')
				}
				(v285).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DispatcherWindiskSnapshotResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode182(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DispatcherWindiskSnapshotResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode182(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DispatcherWindiskSnapshotResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode182(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DispatcherWindiskSnapshotResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode182(l, v)
}
func easyjsonB7f3de24Decode183(in *jlexer.Lexer, out *DispatcherVaultSnapshotsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Snapshots":
			if in.IsNull() {
				in.Skip()
				out.Snapshots = nil
			} else {
				in.Delim('[')
				if out.Snapshots == nil {
					if !in.IsDelim(']') {
						out.Snapshots = make([]VaultSnapshot, 0, 0)
					} else {
						out.Snapshots = []VaultSnapshot{}
					}
				} else {
					out.Snapshots = (out.Snapshots)[:0]
				}
				for !in.IsDelim(']') {
					var v286 VaultSnapshot
					(v286).UnmarshalEasyJSON(in)
					out.Snapshots = append(out.Snapshots, v286)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode183(out *jwriter.Writer, in DispatcherVaultSnapshotsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Snapshots\":"
		out.RawString(prefix)
		if in.Snapshots == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v287, v288 := range in.Snapshots {
				if v287 > 0 {
					out.RawByte(',')
				}
				(v288).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DispatcherVaultSnapshotsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode183(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DispatcherVaultSnapshotsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode183(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DispatcherVaultSnapshotsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode183(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DispatcherVaultSnapshotsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode183(l, v)
}
func easyjsonB7f3de24Decode184(in *jlexer.Lexer, out *DispatcherStoredObjectsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "StoredObjects":
			if in.IsNull() {
				in.Skip()
				out.StoredObjects = nil
			} else {
				in.Delim('[')
				if out.StoredObjects == nil {
					if !in.IsDelim(']') {
						out.StoredObjects = make([]StoredObject, 0, 0)
					} else {
						out.StoredObjects = []StoredObject{}
					}
				} else {
					out.StoredObjects = (out.StoredObjects)[:0]
				}
				for !in.IsDelim(']') {
					var v289 StoredObject
					(v289).UnmarshalEasyJSON(in)
					out.StoredObjects = append(out.StoredObjects, v289)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode184(out *jwriter.Writer, in DispatcherStoredObjectsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"StoredObjects\":"
		out.RawString(prefix)
		if in.StoredObjects == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v290, v291 := range in.StoredObjects {
				if v290 > 0 {
					out.RawByte(',')
				}
				(v291).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DispatcherStoredObjectsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode184(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DispatcherStoredObjectsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode184(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DispatcherStoredObjectsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode184(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DispatcherStoredObjectsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode184(l, v)
}
func easyjsonB7f3de24Decode185(in *jlexer.Lexer, out *DispatcherListSnapshotVirtualMachinesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "VMs":
			if in.IsNull() {
				in.Skip()
				out.VMs = nil
			} else {
				in.Delim('[')
				if out.VMs == nil {
					if !in.IsDelim(']') {
						out.VMs = make([]VMInfo, 0, 0)
					} else {
						out.VMs = []VMInfo{}
					}
				} else {
					out.VMs = (out.VMs)[:0]
				}
				for !in.IsDelim(']') {
					var v292 VMInfo
					(v292).UnmarshalEasyJSON(in)
					out.VMs = append(out.VMs, v292)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode185(out *jwriter.Writer, in DispatcherListSnapshotVirtualMachinesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"VMs\":"
		out.RawString(prefix)
		if in.VMs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v293, v294 := range in.VMs {
				if v293 > 0 {
					out.RawByte(',')
				}
				(v294).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DispatcherListSnapshotVirtualMachinesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode185(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DispatcherListSnapshotVirtualMachinesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode185(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DispatcherListSnapshotVirtualMachinesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode185(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DispatcherListSnapshotVirtualMachinesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode185(l, v)
}
func easyjsonB7f3de24Decode186(in *jlexer.Lexer, out *DispatcherAdminSourcesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "ImportSources":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ImportSources = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v295 string
					v295 = string(in.String())
					(out.ImportSources)[key] = v295
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode186(out *jwriter.Writer, in DispatcherAdminSourcesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ImportSources\":"
		out.RawString(prefix)
		if in.ImportSources == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v296First := true
			for v296Name, v296Value := range in.ImportSources {
				if v296First {
					v296First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v296Name))
				out.RawByte(':')
				out.String(string(v296Value))
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DispatcherAdminSourcesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode186(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DispatcherAdminSourcesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode186(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DispatcherAdminSourcesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode186(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DispatcherAdminSourcesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode186(l, v)
}
func easyjsonB7f3de24Decode187(in *jlexer.Lexer, out *DiskDrive) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "DeviceName":
			out.DeviceName = string(in.String())
		case "Caption":
			out.Caption = string(in.String())
		case "Model":
			out.Model = string(in.String())
		case "SerialNumber":
			out.SerialNumber = string(in.String())
		case "Size":
			out.Size = int64(in.Int64())
		case "Partitions":
			if in.IsNull() {
				in.Skip()
				out.Partitions = nil
			} else {
				in.Delim('[')
				if out.Partitions == nil {
					if !in.IsDelim(']') {
						out.Partitions = make([]Partition, 0, 0)
					} else {
						out.Partitions = []Partition{}
					}
				} else {
					out.Partitions = (out.Partitions)[:0]
				}
				for !in.IsDelim(']') {
					var v297 Partition
					(v297).UnmarshalEasyJSON(in)
					out.Partitions = append(out.Partitions, v297)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DeviceParents":
			if in.IsNull() {
				in.Skip()
				out.DeviceParents = nil
			} else {
				in.Delim('[')
				if out.DeviceParents == nil {
					if !in.IsDelim(']') {
						out.DeviceParents = make([]string, 0, 4)
					} else {
						out.DeviceParents = []string{}
					}
				} else {
					out.DeviceParents = (out.DeviceParents)[:0]
				}
				for !in.IsDelim(']') {
					var v298 string
					v298 = string(in.String())
					out.DeviceParents = append(out.DeviceParents, v298)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Flags":
			out.Flags = int64(in.Int64())
		case "Cylinders":
			out.Cylinders = int64(in.Int64())
		case "Heads":
			out.Heads = int64(in.Int64())
		case "Sectors":
			out.Sectors = int64(in.Int64())
		case "SectorSize":
			out.SectorSize = int64(in.Int64())
		case "PartitionConflicts":
			if in.IsNull() {
				in.Skip()
				out.PartitionConflicts = nil
			} else {
				in.Delim('[')
				if out.PartitionConflicts == nil {
					if !in.IsDelim(']') {
						out.PartitionConflicts = make([]PartitionConflict, 0, 1)
					} else {
						out.PartitionConflicts = []PartitionConflict{}
					}
				} else {
					out.PartitionConflicts = (out.PartitionConflicts)[:0]
				}
				for !in.IsDelim(']') {
					var v299 PartitionConflict
					(v299).UnmarshalEasyJSON(in)
					out.PartitionConflicts = append(out.PartitionConflicts, v299)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode187(out *jwriter.Writer, in DiskDrive) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"DeviceName\":"
		out.RawString(prefix)
		out.String(string(in.DeviceName))
	}
	{
		const prefix string = ",\"Caption\":"
		out.RawString(prefix)
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"Model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	{
		const prefix string = ",\"SerialNumber\":"
		out.RawString(prefix)
		out.String(string(in.SerialNumber))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"Partitions\":"
		out.RawString(prefix)
		if in.Partitions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v300, v301 := range in.Partitions {
				if v300 > 0 {
					out.RawByte(',')
				}
				(v301).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DeviceParents\":"
		out.RawString(prefix)
		if in.DeviceParents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v302, v303 := range in.DeviceParents {
				if v302 > 0 {
					out.RawByte(',')
				}
				out.String(string(v303))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Int64(int64(in.Flags))
	}
	{
		const prefix string = ",\"Cylinders\":"
		out.RawString(prefix)
		out.Int64(int64(in.Cylinders))
	}
	{
		const prefix string = ",\"Heads\":"
		out.RawString(prefix)
		out.Int64(int64(in.Heads))
	}
	{
		const prefix string = ",\"Sectors\":"
		out.RawString(prefix)
		out.Int64(int64(in.Sectors))
	}
	{
		const prefix string = ",\"SectorSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.SectorSize))
	}
	{
		const prefix string = ",\"PartitionConflicts\":"
		out.RawString(prefix)
		if in.PartitionConflicts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v304, v305 := range in.PartitionConflicts {
				if v304 > 0 {
					out.RawByte(',')
				}
				(v305).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DiskDrive) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode187(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DiskDrive) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode187(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DiskDrive) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode187(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DiskDrive) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode187(l, v)
}
func easyjsonB7f3de24Decode188(in *jlexer.Lexer, out *DeviceConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FriendlyName":
			out.FriendlyName = string(in.String())
		case "RegistrationTime":
			out.RegistrationTime = int64(in.Int64())
		case "PlatformVersion":
			(out.PlatformVersion).UnmarshalEasyJSON(in)
		case "Sources":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Sources = make(map[string]SourceBasicInfo)
				} else {
					out.Sources = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v306 SourceBasicInfo
					(v306).UnmarshalEasyJSON(in)
					(out.Sources)[key] = v306
					in.WantComma()
				}
				in.Delim('}')
			}
		case "DeviceTimezone":
			out.DeviceTimezone = string(in.String())
		case "ClientVersion":
			out.ClientVersion = string(in.String())
		case "SyncroUUID":
			out.SyncroUUID = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode188(out *jwriter.Writer, in DeviceConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FriendlyName\":"
		out.RawString(prefix[1:])
		out.String(string(in.FriendlyName))
	}
	if in.RegistrationTime != 0 {
		const prefix string = ",\"RegistrationTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.RegistrationTime))
	}
	if true {
		const prefix string = ",\"PlatformVersion\":"
		out.RawString(prefix)
		(in.PlatformVersion).MarshalEasyJSON(out)
	}
	if len(in.Sources) != 0 {
		const prefix string = ",\"Sources\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v307First := true
			for v307Name, v307Value := range in.Sources {
				if v307First {
					v307First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v307Name))
				out.RawByte(':')
				(v307Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if in.DeviceTimezone != "" {
		const prefix string = ",\"DeviceTimezone\":"
		out.RawString(prefix)
		out.String(string(in.DeviceTimezone))
	}
	if in.ClientVersion != "" {
		const prefix string = ",\"ClientVersion\":"
		out.RawString(prefix)
		out.String(string(in.ClientVersion))
	}
	if in.SyncroUUID != "" {
		const prefix string = ",\"SyncroUUID\":"
		out.RawString(prefix)
		out.String(string(in.SyncroUUID))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeviceConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode188(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeviceConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode188(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeviceConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode188(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeviceConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode188(l, v)
}
func easyjsonB7f3de24Decode189(in *jlexer.Lexer, out *DestinationStatistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ClientProvidedSize":
			(out.ClientProvidedSize).UnmarshalEasyJSON(in)
		case "ClientProvidedContent":
			(out.ClientProvidedContent).UnmarshalEasyJSON(in)
		case "LastSuccessfulDeepVerify_GUID":
			out.LastSuccessfulDeepVerify_GUID = string(in.String())
		case "LastSuccessfulDeepVerify_StartTime":
			out.LastSuccessfulDeepVerify_StartTime = int64(in.Int64())
		case "LastSuccessfulDeepVerify_EndTime":
			out.LastSuccessfulDeepVerify_EndTime = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode189(out *jwriter.Writer, in DestinationStatistics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ClientProvidedSize\":"
		out.RawString(prefix[1:])
		(in.ClientProvidedSize).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ClientProvidedContent\":"
		out.RawString(prefix)
		(in.ClientProvidedContent).MarshalEasyJSON(out)
	}
	if in.LastSuccessfulDeepVerify_GUID != "" {
		const prefix string = ",\"LastSuccessfulDeepVerify_GUID\":"
		out.RawString(prefix)
		out.String(string(in.LastSuccessfulDeepVerify_GUID))
	}
	if in.LastSuccessfulDeepVerify_StartTime != 0 {
		const prefix string = ",\"LastSuccessfulDeepVerify_StartTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastSuccessfulDeepVerify_StartTime))
	}
	if in.LastSuccessfulDeepVerify_EndTime != 0 {
		const prefix string = ",\"LastSuccessfulDeepVerify_EndTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastSuccessfulDeepVerify_EndTime))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DestinationStatistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode189(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DestinationStatistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode189(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DestinationStatistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode189(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DestinationStatistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode189(l, v)
}
func easyjsonB7f3de24Decode190(in *jlexer.Lexer, out *DestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DestinationType":
			out.DestinationType = uint64(in.Uint64())
		case "CometServer":
			out.CometServer = string(in.String())
		case "CometBucket":
			out.CometBucket = string(in.String())
		case "CometBucketKey":
			out.CometBucketKey = string(in.String())
		case "S3Server":
			out.S3Server = string(in.String())
		case "S3UsesTLS":
			out.S3UsesTLS = bool(in.Bool())
		case "S3AccessKey":
			out.S3AccessKey = string(in.String())
		case "S3SecretKey":
			out.S3SecretKey = string(in.String())
		case "S3BucketName":
			out.S3BucketName = string(in.String())
		case "S3Subdir":
			out.S3Subdir = string(in.String())
		case "S3CustomRegion":
			out.S3CustomRegion = string(in.String())
		case "S3UsesV2Signing":
			out.S3UsesV2Signing = bool(in.Bool())
		case "S3RemoveDeleted":
			out.S3RemoveDeleted = bool(in.Bool())
		case "S3ObjectLockMode":
			out.S3ObjectLockMode = uint8(in.Uint8())
		case "S3ObjectLockDays":
			out.S3ObjectLockDays = int(in.Int())
		case "SFTPServer":
			out.SFTPServer = string(in.String())
		case "SFTPUsername":
			out.SFTPUsername = string(in.String())
		case "SFTPRemotePath":
			out.SFTPRemotePath = string(in.String())
		case "SFTPAuthMode":
			out.SFTPAuthMode = SftpAuthMode(in.Uint64())
		case "SFTPPassword":
			out.SFTPPassword = string(in.String())
		case "SFTPPrivateKey":
			out.SFTPPrivateKey = string(in.String())
		case "SFTPCustomAuth_UseKnownHostsFile":
			out.SFTPCustomAuth_UseKnownHostsFile = bool(in.Bool())
		case "SFTPCustomAuth_KnownHostsFile":
			out.SFTPCustomAuth_KnownHostsFile = string(in.String())
		case "FTPServer":
			out.FTPServer = string(in.String())
		case "FTPUsername":
			out.FTPUsername = string(in.String())
		case "FTPPassword":
			out.FTPPassword = string(in.String())
		case "FTPBaseUseHomeDirectory":
			out.FTPBaseUseHomeDirectory = bool(in.Bool())
		case "FTPCustomBaseDirectory":
			out.FTPCustomBaseDirectory = string(in.String())
		case "FTPSMode":
			out.FTPSMode = FtpsModeType(in.Int())
		case "FTPPort":
			out.FTPPort = int(in.Int())
		case "FTPMaxConnections":
			out.FTPMaxConnections = int(in.Int())
		case "FTPAcceptInvalidSSL":
			out.FTPAcceptInvalidSSL = bool(in.Bool())
		case "AZBAccountName":
			out.AZBAccountName = string(in.String())
		case "AZBAccountKey":
			out.AZBAccountKey = string(in.String())
		case "AZBContainer":
			out.AZBContainer = string(in.String())
		case "AZBRealm":
			out.AZBRealm = string(in.String())
		case "AZBPrefix":
			out.AZBPrefix = string(in.String())
		case "LocalcopyPath":
			out.LocalcopyPath = string(in.String())
		case "LocalcopyWinSMBUsername":
			out.LocalcopyWinSMBUsername = string(in.String())
		case "LocalcopyWinSMBPassword":
			out.LocalcopyWinSMBPassword = string(in.String())
		case "LocalcopyWinSMBPasswordFormat":
			out.LocalcopyWinSMBPasswordFormat = uint64(in.Uint64())
		case "Swift":
			(out.Swift).UnmarshalEasyJSON(in)
		case "B2":
			(out.B2).UnmarshalEasyJSON(in)
		case "WebDav":
			(out.WebDav).UnmarshalEasyJSON(in)
		case "Storj":
			(out.Storj).UnmarshalEasyJSON(in)
		case "SMB":
			(out.SMB).UnmarshalEasyJSON(in)
		case "SpanTargets":
			if in.IsNull() {
				in.Skip()
				out.SpanTargets = nil
			} else {
				in.Delim('[')
				if out.SpanTargets == nil {
					if !in.IsDelim(']') {
						out.SpanTargets = make([]DestinationLocation, 0, 0)
					} else {
						out.SpanTargets = []DestinationLocation{}
					}
				} else {
					out.SpanTargets = (out.SpanTargets)[:0]
				}
				for !in.IsDelim(']') {
					var v308 DestinationLocation
					(v308).UnmarshalEasyJSON(in)
					out.SpanTargets = append(out.SpanTargets, v308)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SpanUseStaticSlots":
			out.SpanUseStaticSlots = bool(in.Bool())
		case "Tag":
			out.Tag = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode190(out *jwriter.Writer, in DestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DestinationType\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.DestinationType))
	}
	{
		const prefix string = ",\"CometServer\":"
		out.RawString(prefix)
		out.String(string(in.CometServer))
	}
	{
		const prefix string = ",\"CometBucket\":"
		out.RawString(prefix)
		out.String(string(in.CometBucket))
	}
	{
		const prefix string = ",\"CometBucketKey\":"
		out.RawString(prefix)
		out.String(string(in.CometBucketKey))
	}
	{
		const prefix string = ",\"S3Server\":"
		out.RawString(prefix)
		out.String(string(in.S3Server))
	}
	{
		const prefix string = ",\"S3UsesTLS\":"
		out.RawString(prefix)
		out.Bool(bool(in.S3UsesTLS))
	}
	{
		const prefix string = ",\"S3AccessKey\":"
		out.RawString(prefix)
		out.String(string(in.S3AccessKey))
	}
	{
		const prefix string = ",\"S3SecretKey\":"
		out.RawString(prefix)
		out.String(string(in.S3SecretKey))
	}
	{
		const prefix string = ",\"S3BucketName\":"
		out.RawString(prefix)
		out.String(string(in.S3BucketName))
	}
	{
		const prefix string = ",\"S3Subdir\":"
		out.RawString(prefix)
		out.String(string(in.S3Subdir))
	}
	{
		const prefix string = ",\"S3CustomRegion\":"
		out.RawString(prefix)
		out.String(string(in.S3CustomRegion))
	}
	{
		const prefix string = ",\"S3UsesV2Signing\":"
		out.RawString(prefix)
		out.Bool(bool(in.S3UsesV2Signing))
	}
	{
		const prefix string = ",\"S3RemoveDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.S3RemoveDeleted))
	}
	{
		const prefix string = ",\"S3ObjectLockMode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.S3ObjectLockMode))
	}
	{
		const prefix string = ",\"S3ObjectLockDays\":"
		out.RawString(prefix)
		out.Int(int(in.S3ObjectLockDays))
	}
	{
		const prefix string = ",\"SFTPServer\":"
		out.RawString(prefix)
		out.String(string(in.SFTPServer))
	}
	{
		const prefix string = ",\"SFTPUsername\":"
		out.RawString(prefix)
		out.String(string(in.SFTPUsername))
	}
	{
		const prefix string = ",\"SFTPRemotePath\":"
		out.RawString(prefix)
		out.String(string(in.SFTPRemotePath))
	}
	{
		const prefix string = ",\"SFTPAuthMode\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SFTPAuthMode))
	}
	{
		const prefix string = ",\"SFTPPassword\":"
		out.RawString(prefix)
		out.String(string(in.SFTPPassword))
	}
	{
		const prefix string = ",\"SFTPPrivateKey\":"
		out.RawString(prefix)
		out.String(string(in.SFTPPrivateKey))
	}
	{
		const prefix string = ",\"SFTPCustomAuth_UseKnownHostsFile\":"
		out.RawString(prefix)
		out.Bool(bool(in.SFTPCustomAuth_UseKnownHostsFile))
	}
	{
		const prefix string = ",\"SFTPCustomAuth_KnownHostsFile\":"
		out.RawString(prefix)
		out.String(string(in.SFTPCustomAuth_KnownHostsFile))
	}
	{
		const prefix string = ",\"FTPServer\":"
		out.RawString(prefix)
		out.String(string(in.FTPServer))
	}
	{
		const prefix string = ",\"FTPUsername\":"
		out.RawString(prefix)
		out.String(string(in.FTPUsername))
	}
	{
		const prefix string = ",\"FTPPassword\":"
		out.RawString(prefix)
		out.String(string(in.FTPPassword))
	}
	{
		const prefix string = ",\"FTPBaseUseHomeDirectory\":"
		out.RawString(prefix)
		out.Bool(bool(in.FTPBaseUseHomeDirectory))
	}
	{
		const prefix string = ",\"FTPCustomBaseDirectory\":"
		out.RawString(prefix)
		out.String(string(in.FTPCustomBaseDirectory))
	}
	{
		const prefix string = ",\"FTPSMode\":"
		out.RawString(prefix)
		out.Int(int(in.FTPSMode))
	}
	{
		const prefix string = ",\"FTPPort\":"
		out.RawString(prefix)
		out.Int(int(in.FTPPort))
	}
	{
		const prefix string = ",\"FTPMaxConnections\":"
		out.RawString(prefix)
		out.Int(int(in.FTPMaxConnections))
	}
	{
		const prefix string = ",\"FTPAcceptInvalidSSL\":"
		out.RawString(prefix)
		out.Bool(bool(in.FTPAcceptInvalidSSL))
	}
	{
		const prefix string = ",\"AZBAccountName\":"
		out.RawString(prefix)
		out.String(string(in.AZBAccountName))
	}
	{
		const prefix string = ",\"AZBAccountKey\":"
		out.RawString(prefix)
		out.String(string(in.AZBAccountKey))
	}
	{
		const prefix string = ",\"AZBContainer\":"
		out.RawString(prefix)
		out.String(string(in.AZBContainer))
	}
	{
		const prefix string = ",\"AZBRealm\":"
		out.RawString(prefix)
		out.String(string(in.AZBRealm))
	}
	{
		const prefix string = ",\"AZBPrefix\":"
		out.RawString(prefix)
		out.String(string(in.AZBPrefix))
	}
	{
		const prefix string = ",\"LocalcopyPath\":"
		out.RawString(prefix)
		out.String(string(in.LocalcopyPath))
	}
	{
		const prefix string = ",\"LocalcopyWinSMBUsername\":"
		out.RawString(prefix)
		out.String(string(in.LocalcopyWinSMBUsername))
	}
	{
		const prefix string = ",\"LocalcopyWinSMBPassword\":"
		out.RawString(prefix)
		out.String(string(in.LocalcopyWinSMBPassword))
	}
	{
		const prefix string = ",\"LocalcopyWinSMBPasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.LocalcopyWinSMBPasswordFormat))
	}
	{
		const prefix string = ",\"Swift\":"
		out.RawString(prefix)
		(in.Swift).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"B2\":"
		out.RawString(prefix)
		(in.B2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"WebDav\":"
		out.RawString(prefix)
		(in.WebDav).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Storj\":"
		out.RawString(prefix)
		(in.Storj).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"SMB\":"
		out.RawString(prefix)
		(in.SMB).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"SpanTargets\":"
		out.RawString(prefix)
		if in.SpanTargets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v309, v310 := range in.SpanTargets {
				if v309 > 0 {
					out.RawByte(',')
				}
				(v310).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SpanUseStaticSlots\":"
		out.RawString(prefix)
		out.Bool(bool(in.SpanUseStaticSlots))
	}
	{
		const prefix string = ",\"Tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode190(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode190(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode190(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode190(l, v)
}
func easyjsonB7f3de24Decode191(in *jlexer.Lexer, out *DestinationConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Description":
			out.Description = string(in.String())
		case "CreateTime":
			out.CreateTime = int64(in.Int64())
		case "ModifyTime":
			out.ModifyTime = int64(in.Int64())
		case "PreExec":
			if in.IsNull() {
				in.Skip()
				out.PreExec = nil
			} else {
				in.Delim('[')
				if out.PreExec == nil {
					if !in.IsDelim(']') {
						out.PreExec = make([]string, 0, 4)
					} else {
						out.PreExec = []string{}
					}
				} else {
					out.PreExec = (out.PreExec)[:0]
				}
				for !in.IsDelim(']') {
					var v311 string
					v311 = string(in.String())
					out.PreExec = append(out.PreExec, v311)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ThawExec":
			if in.IsNull() {
				in.Skip()
				out.ThawExec = nil
			} else {
				in.Delim('[')
				if out.ThawExec == nil {
					if !in.IsDelim(']') {
						out.ThawExec = make([]string, 0, 4)
					} else {
						out.ThawExec = []string{}
					}
				} else {
					out.ThawExec = (out.ThawExec)[:0]
				}
				for !in.IsDelim(']') {
					var v312 string
					v312 = string(in.String())
					out.ThawExec = append(out.ThawExec, v312)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PostExec":
			if in.IsNull() {
				in.Skip()
				out.PostExec = nil
			} else {
				in.Delim('[')
				if out.PostExec == nil {
					if !in.IsDelim(']') {
						out.PostExec = make([]string, 0, 4)
					} else {
						out.PostExec = []string{}
					}
				} else {
					out.PostExec = (out.PostExec)[:0]
				}
				for !in.IsDelim(']') {
					var v313 string
					v313 = string(in.String())
					out.PostExec = append(out.PostExec, v313)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DestinationType":
			out.DestinationType = uint64(in.Uint64())
		case "CometServer":
			out.CometServer = string(in.String())
		case "CometBucket":
			out.CometBucket = string(in.String())
		case "CometBucketKey":
			out.CometBucketKey = string(in.String())
		case "S3Server":
			out.S3Server = string(in.String())
		case "S3UsesTLS":
			out.S3UsesTLS = bool(in.Bool())
		case "S3AccessKey":
			out.S3AccessKey = string(in.String())
		case "S3SecretKey":
			out.S3SecretKey = string(in.String())
		case "S3BucketName":
			out.S3BucketName = string(in.String())
		case "S3Subdir":
			out.S3Subdir = string(in.String())
		case "S3CustomRegion":
			out.S3CustomRegion = string(in.String())
		case "S3UsesV2Signing":
			out.S3UsesV2Signing = bool(in.Bool())
		case "S3RemoveDeleted":
			out.S3RemoveDeleted = bool(in.Bool())
		case "S3ObjectLockMode":
			out.S3ObjectLockMode = uint8(in.Uint8())
		case "S3ObjectLockDays":
			out.S3ObjectLockDays = int(in.Int())
		case "SFTPServer":
			out.SFTPServer = string(in.String())
		case "SFTPUsername":
			out.SFTPUsername = string(in.String())
		case "SFTPRemotePath":
			out.SFTPRemotePath = string(in.String())
		case "SFTPAuthMode":
			out.SFTPAuthMode = SftpAuthMode(in.Uint64())
		case "SFTPPassword":
			out.SFTPPassword = string(in.String())
		case "SFTPPrivateKey":
			out.SFTPPrivateKey = string(in.String())
		case "SFTPCustomAuth_UseKnownHostsFile":
			out.SFTPCustomAuth_UseKnownHostsFile = bool(in.Bool())
		case "SFTPCustomAuth_KnownHostsFile":
			out.SFTPCustomAuth_KnownHostsFile = string(in.String())
		case "FTPServer":
			out.FTPServer = string(in.String())
		case "FTPUsername":
			out.FTPUsername = string(in.String())
		case "FTPPassword":
			out.FTPPassword = string(in.String())
		case "FTPBaseUseHomeDirectory":
			out.FTPBaseUseHomeDirectory = bool(in.Bool())
		case "FTPCustomBaseDirectory":
			out.FTPCustomBaseDirectory = string(in.String())
		case "FTPSMode":
			out.FTPSMode = FtpsModeType(in.Int())
		case "FTPPort":
			out.FTPPort = int(in.Int())
		case "FTPMaxConnections":
			out.FTPMaxConnections = int(in.Int())
		case "FTPAcceptInvalidSSL":
			out.FTPAcceptInvalidSSL = bool(in.Bool())
		case "AZBAccountName":
			out.AZBAccountName = string(in.String())
		case "AZBAccountKey":
			out.AZBAccountKey = string(in.String())
		case "AZBContainer":
			out.AZBContainer = string(in.String())
		case "AZBRealm":
			out.AZBRealm = string(in.String())
		case "AZBPrefix":
			out.AZBPrefix = string(in.String())
		case "LocalcopyPath":
			out.LocalcopyPath = string(in.String())
		case "LocalcopyWinSMBUsername":
			out.LocalcopyWinSMBUsername = string(in.String())
		case "LocalcopyWinSMBPassword":
			out.LocalcopyWinSMBPassword = string(in.String())
		case "LocalcopyWinSMBPasswordFormat":
			out.LocalcopyWinSMBPasswordFormat = uint64(in.Uint64())
		case "Swift":
			(out.Swift).UnmarshalEasyJSON(in)
		case "B2":
			(out.B2).UnmarshalEasyJSON(in)
		case "WebDav":
			(out.WebDav).UnmarshalEasyJSON(in)
		case "Storj":
			(out.Storj).UnmarshalEasyJSON(in)
		case "SMB":
			(out.SMB).UnmarshalEasyJSON(in)
		case "SpanTargets":
			if in.IsNull() {
				in.Skip()
				out.SpanTargets = nil
			} else {
				in.Delim('[')
				if out.SpanTargets == nil {
					if !in.IsDelim(']') {
						out.SpanTargets = make([]DestinationLocation, 0, 0)
					} else {
						out.SpanTargets = []DestinationLocation{}
					}
				} else {
					out.SpanTargets = (out.SpanTargets)[:0]
				}
				for !in.IsDelim(']') {
					var v314 DestinationLocation
					(v314).UnmarshalEasyJSON(in)
					out.SpanTargets = append(out.SpanTargets, v314)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SpanUseStaticSlots":
			out.SpanUseStaticSlots = bool(in.Bool())
		case "Tag":
			out.Tag = string(in.String())
		case "EncryptionKeyEncryptionMethod":
			out.EncryptionKeyEncryptionMethod = uint64(in.Uint64())
		case "EncryptedEncryptionKey":
			out.EncryptedEncryptionKey = string(in.String())
		case "RepoInitTimestamp":
			out.RepoInitTimestamp = int64(in.Int64())
		case "StorageLimitEnabled":
			out.StorageLimitEnabled = bool(in.Bool())
		case "StorageLimitBytes":
			out.StorageLimitBytes = int64(in.Int64())
		case "Statistics":
			(out.Statistics).UnmarshalEasyJSON(in)
		case "DefaultRetention":
			(out.DefaultRetention).UnmarshalEasyJSON(in)
		case "RebrandStorage":
			out.RebrandStorage = bool(in.Bool())
		case "RetentionError":
			out.RetentionError = string(in.String())
		case "AssociatedDevices":
			if in.IsNull() {
				in.Skip()
				out.AssociatedDevices = nil
			} else {
				in.Delim('[')
				if out.AssociatedDevices == nil {
					if !in.IsDelim(']') {
						out.AssociatedDevices = make([]string, 0, 4)
					} else {
						out.AssociatedDevices = []string{}
					}
				} else {
					out.AssociatedDevices = (out.AssociatedDevices)[:0]
				}
				for !in.IsDelim(']') {
					var v315 string
					v315 = string(in.String())
					out.AssociatedDevices = append(out.AssociatedDevices, v315)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode191(out *jwriter.Writer, in DestinationConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"CreateTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateTime))
	}
	{
		const prefix string = ",\"ModifyTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ModifyTime))
	}
	{
		const prefix string = ",\"PreExec\":"
		out.RawString(prefix)
		if in.PreExec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v316, v317 := range in.PreExec {
				if v316 > 0 {
					out.RawByte(',')
				}
				out.String(string(v317))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ThawExec\":"
		out.RawString(prefix)
		if in.ThawExec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v318, v319 := range in.ThawExec {
				if v318 > 0 {
					out.RawByte(',')
				}
				out.String(string(v319))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PostExec\":"
		out.RawString(prefix)
		if in.PostExec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v320, v321 := range in.PostExec {
				if v320 > 0 {
					out.RawByte(',')
				}
				out.String(string(v321))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DestinationType\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.DestinationType))
	}
	{
		const prefix string = ",\"CometServer\":"
		out.RawString(prefix)
		out.String(string(in.CometServer))
	}
	{
		const prefix string = ",\"CometBucket\":"
		out.RawString(prefix)
		out.String(string(in.CometBucket))
	}
	{
		const prefix string = ",\"CometBucketKey\":"
		out.RawString(prefix)
		out.String(string(in.CometBucketKey))
	}
	{
		const prefix string = ",\"S3Server\":"
		out.RawString(prefix)
		out.String(string(in.S3Server))
	}
	{
		const prefix string = ",\"S3UsesTLS\":"
		out.RawString(prefix)
		out.Bool(bool(in.S3UsesTLS))
	}
	{
		const prefix string = ",\"S3AccessKey\":"
		out.RawString(prefix)
		out.String(string(in.S3AccessKey))
	}
	{
		const prefix string = ",\"S3SecretKey\":"
		out.RawString(prefix)
		out.String(string(in.S3SecretKey))
	}
	{
		const prefix string = ",\"S3BucketName\":"
		out.RawString(prefix)
		out.String(string(in.S3BucketName))
	}
	{
		const prefix string = ",\"S3Subdir\":"
		out.RawString(prefix)
		out.String(string(in.S3Subdir))
	}
	{
		const prefix string = ",\"S3CustomRegion\":"
		out.RawString(prefix)
		out.String(string(in.S3CustomRegion))
	}
	{
		const prefix string = ",\"S3UsesV2Signing\":"
		out.RawString(prefix)
		out.Bool(bool(in.S3UsesV2Signing))
	}
	{
		const prefix string = ",\"S3RemoveDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.S3RemoveDeleted))
	}
	{
		const prefix string = ",\"S3ObjectLockMode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.S3ObjectLockMode))
	}
	{
		const prefix string = ",\"S3ObjectLockDays\":"
		out.RawString(prefix)
		out.Int(int(in.S3ObjectLockDays))
	}
	{
		const prefix string = ",\"SFTPServer\":"
		out.RawString(prefix)
		out.String(string(in.SFTPServer))
	}
	{
		const prefix string = ",\"SFTPUsername\":"
		out.RawString(prefix)
		out.String(string(in.SFTPUsername))
	}
	{
		const prefix string = ",\"SFTPRemotePath\":"
		out.RawString(prefix)
		out.String(string(in.SFTPRemotePath))
	}
	{
		const prefix string = ",\"SFTPAuthMode\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SFTPAuthMode))
	}
	{
		const prefix string = ",\"SFTPPassword\":"
		out.RawString(prefix)
		out.String(string(in.SFTPPassword))
	}
	{
		const prefix string = ",\"SFTPPrivateKey\":"
		out.RawString(prefix)
		out.String(string(in.SFTPPrivateKey))
	}
	{
		const prefix string = ",\"SFTPCustomAuth_UseKnownHostsFile\":"
		out.RawString(prefix)
		out.Bool(bool(in.SFTPCustomAuth_UseKnownHostsFile))
	}
	{
		const prefix string = ",\"SFTPCustomAuth_KnownHostsFile\":"
		out.RawString(prefix)
		out.String(string(in.SFTPCustomAuth_KnownHostsFile))
	}
	{
		const prefix string = ",\"FTPServer\":"
		out.RawString(prefix)
		out.String(string(in.FTPServer))
	}
	{
		const prefix string = ",\"FTPUsername\":"
		out.RawString(prefix)
		out.String(string(in.FTPUsername))
	}
	{
		const prefix string = ",\"FTPPassword\":"
		out.RawString(prefix)
		out.String(string(in.FTPPassword))
	}
	{
		const prefix string = ",\"FTPBaseUseHomeDirectory\":"
		out.RawString(prefix)
		out.Bool(bool(in.FTPBaseUseHomeDirectory))
	}
	{
		const prefix string = ",\"FTPCustomBaseDirectory\":"
		out.RawString(prefix)
		out.String(string(in.FTPCustomBaseDirectory))
	}
	{
		const prefix string = ",\"FTPSMode\":"
		out.RawString(prefix)
		out.Int(int(in.FTPSMode))
	}
	{
		const prefix string = ",\"FTPPort\":"
		out.RawString(prefix)
		out.Int(int(in.FTPPort))
	}
	{
		const prefix string = ",\"FTPMaxConnections\":"
		out.RawString(prefix)
		out.Int(int(in.FTPMaxConnections))
	}
	{
		const prefix string = ",\"FTPAcceptInvalidSSL\":"
		out.RawString(prefix)
		out.Bool(bool(in.FTPAcceptInvalidSSL))
	}
	{
		const prefix string = ",\"AZBAccountName\":"
		out.RawString(prefix)
		out.String(string(in.AZBAccountName))
	}
	{
		const prefix string = ",\"AZBAccountKey\":"
		out.RawString(prefix)
		out.String(string(in.AZBAccountKey))
	}
	{
		const prefix string = ",\"AZBContainer\":"
		out.RawString(prefix)
		out.String(string(in.AZBContainer))
	}
	{
		const prefix string = ",\"AZBRealm\":"
		out.RawString(prefix)
		out.String(string(in.AZBRealm))
	}
	{
		const prefix string = ",\"AZBPrefix\":"
		out.RawString(prefix)
		out.String(string(in.AZBPrefix))
	}
	{
		const prefix string = ",\"LocalcopyPath\":"
		out.RawString(prefix)
		out.String(string(in.LocalcopyPath))
	}
	{
		const prefix string = ",\"LocalcopyWinSMBUsername\":"
		out.RawString(prefix)
		out.String(string(in.LocalcopyWinSMBUsername))
	}
	{
		const prefix string = ",\"LocalcopyWinSMBPassword\":"
		out.RawString(prefix)
		out.String(string(in.LocalcopyWinSMBPassword))
	}
	{
		const prefix string = ",\"LocalcopyWinSMBPasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.LocalcopyWinSMBPasswordFormat))
	}
	{
		const prefix string = ",\"Swift\":"
		out.RawString(prefix)
		(in.Swift).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"B2\":"
		out.RawString(prefix)
		(in.B2).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"WebDav\":"
		out.RawString(prefix)
		(in.WebDav).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Storj\":"
		out.RawString(prefix)
		(in.Storj).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"SMB\":"
		out.RawString(prefix)
		(in.SMB).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"SpanTargets\":"
		out.RawString(prefix)
		if in.SpanTargets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v322, v323 := range in.SpanTargets {
				if v322 > 0 {
					out.RawByte(',')
				}
				(v323).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SpanUseStaticSlots\":"
		out.RawString(prefix)
		out.Bool(bool(in.SpanUseStaticSlots))
	}
	{
		const prefix string = ",\"Tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"EncryptionKeyEncryptionMethod\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.EncryptionKeyEncryptionMethod))
	}
	{
		const prefix string = ",\"EncryptedEncryptionKey\":"
		out.RawString(prefix)
		out.String(string(in.EncryptedEncryptionKey))
	}
	{
		const prefix string = ",\"RepoInitTimestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.RepoInitTimestamp))
	}
	{
		const prefix string = ",\"StorageLimitEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.StorageLimitEnabled))
	}
	{
		const prefix string = ",\"StorageLimitBytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.StorageLimitBytes))
	}
	if true {
		const prefix string = ",\"Statistics\":"
		out.RawString(prefix)
		(in.Statistics).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"DefaultRetention\":"
		out.RawString(prefix)
		(in.DefaultRetention).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"RebrandStorage\":"
		out.RawString(prefix)
		out.Bool(bool(in.RebrandStorage))
	}
	{
		const prefix string = ",\"RetentionError\":"
		out.RawString(prefix)
		out.String(string(in.RetentionError))
	}
	{
		const prefix string = ",\"AssociatedDevices\":"
		out.RawString(prefix)
		if in.AssociatedDevices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v324, v325 := range in.AssociatedDevices {
				if v324 > 0 {
					out.RawByte(',')
				}
				out.String(string(v325))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DestinationConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode191(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DestinationConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode191(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DestinationConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode191(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DestinationConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode191(l, v)
}
func easyjsonB7f3de24Decode192(in *jlexer.Lexer, out *DefaultSourceWithOSRestriction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SourceConfig":
			(out.SourceConfig).UnmarshalEasyJSON(in)
		case "RestrictOS":
			out.RestrictOS = DefaultSourceOSRestriction(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode192(out *jwriter.Writer, in DefaultSourceWithOSRestriction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SourceConfig\":"
		out.RawString(prefix[1:])
		(in.SourceConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"RestrictOS\":"
		out.RawString(prefix)
		out.Int(int(in.RestrictOS))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DefaultSourceWithOSRestriction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode192(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DefaultSourceWithOSRestriction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode192(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DefaultSourceWithOSRestriction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode192(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DefaultSourceWithOSRestriction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode192(l, v)
}
func easyjsonB7f3de24Decode193(in *jlexer.Lexer, out *DefaultEmailReportPolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ShouldOverrideDefaultReports":
			out.ShouldOverrideDefaultReports = bool(in.Bool())
		case "Reports":
			if in.IsNull() {
				in.Skip()
				out.Reports = nil
			} else {
				in.Delim('[')
				if out.Reports == nil {
					if !in.IsDelim(']') {
						out.Reports = make([]EmailReportConfig, 0, 0)
					} else {
						out.Reports = []EmailReportConfig{}
					}
				} else {
					out.Reports = (out.Reports)[:0]
				}
				for !in.IsDelim(']') {
					var v326 EmailReportConfig
					(v326).UnmarshalEasyJSON(in)
					out.Reports = append(out.Reports, v326)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode193(out *jwriter.Writer, in DefaultEmailReportPolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ShouldOverrideDefaultReports\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.ShouldOverrideDefaultReports))
	}
	{
		const prefix string = ",\"Reports\":"
		out.RawString(prefix)
		if in.Reports == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v327, v328 := range in.Reports {
				if v327 > 0 {
					out.RawByte(',')
				}
				(v328).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DefaultEmailReportPolicy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode193(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DefaultEmailReportPolicy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode193(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DefaultEmailReportPolicy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode193(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DefaultEmailReportPolicy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode193(l, v)
}
func easyjsonB7f3de24Decode194(in *jlexer.Lexer, out *DaysOfWeekConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Sunday":
			out.Sunday = bool(in.Bool())
		case "Monday":
			out.Monday = bool(in.Bool())
		case "Tuesday":
			out.Tuesday = bool(in.Bool())
		case "Wednesday":
			out.Wednesday = bool(in.Bool())
		case "Thursday":
			out.Thursday = bool(in.Bool())
		case "Friday":
			out.Friday = bool(in.Bool())
		case "Saturday":
			out.Saturday = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode194(out *jwriter.Writer, in DaysOfWeekConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Sunday\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Sunday))
	}
	{
		const prefix string = ",\"Monday\":"
		out.RawString(prefix)
		out.Bool(bool(in.Monday))
	}
	{
		const prefix string = ",\"Tuesday\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tuesday))
	}
	{
		const prefix string = ",\"Wednesday\":"
		out.RawString(prefix)
		out.Bool(bool(in.Wednesday))
	}
	{
		const prefix string = ",\"Thursday\":"
		out.RawString(prefix)
		out.Bool(bool(in.Thursday))
	}
	{
		const prefix string = ",\"Friday\":"
		out.RawString(prefix)
		out.Bool(bool(in.Friday))
	}
	{
		const prefix string = ",\"Saturday\":"
		out.RawString(prefix)
		out.Bool(bool(in.Saturday))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DaysOfWeekConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode194(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DaysOfWeekConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode194(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DaysOfWeekConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode194(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DaysOfWeekConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode194(l, v)
}
func easyjsonB7f3de24Decode195(in *jlexer.Lexer, out *CustomRemoteBucketSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "URL":
			out.URL = string(in.String())
		case "CustomHeaders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.CustomHeaders = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v329 string
					v329 = string(in.String())
					(out.CustomHeaders)[key] = v329
					in.WantComma()
				}
				in.Delim('}')
			}
		case "CustomBody":
			out.CustomBody = string(in.String())
		case "CustomBodyType":
			out.CustomBodyType = CustomRemoteBucketCustomBodyType(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode195(out *jwriter.Writer, in CustomRemoteBucketSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"URL\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"CustomHeaders\":"
		out.RawString(prefix)
		if in.CustomHeaders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v330First := true
			for v330Name, v330Value := range in.CustomHeaders {
				if v330First {
					v330First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v330Name))
				out.RawByte(':')
				out.String(string(v330Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"CustomBody\":"
		out.RawString(prefix)
		out.String(string(in.CustomBody))
	}
	{
		const prefix string = ",\"CustomBodyType\":"
		out.RawString(prefix)
		out.String(string(in.CustomBodyType))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CustomRemoteBucketSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode195(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CustomRemoteBucketSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode195(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CustomRemoteBucketSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode195(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CustomRemoteBucketSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode195(l, v)
}
func easyjsonB7f3de24Decode196(in *jlexer.Lexer, out *CreateUserGroupResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "UserGroupID":
			out.UserGroupID = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode196(out *jwriter.Writer, in CreateUserGroupResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"UserGroupID\":"
		out.RawString(prefix)
		out.String(string(in.UserGroupID))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateUserGroupResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode196(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateUserGroupResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode196(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateUserGroupResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode196(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateUserGroupResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode196(l, v)
}
func easyjsonB7f3de24Decode197(in *jlexer.Lexer, out *CreateGroupPolicyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "PolicyHash":
			out.PolicyHash = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode197(out *jwriter.Writer, in CreateGroupPolicyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"PolicyHash\":"
		out.RawString(prefix)
		out.String(string(in.PolicyHash))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateGroupPolicyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode197(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateGroupPolicyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode197(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateGroupPolicyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode197(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateGroupPolicyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode197(l, v)
}
func easyjsonB7f3de24Decode198(in *jlexer.Lexer, out *CountJobsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Count":
			out.Count = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode198(out *jwriter.Writer, in CountJobsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Count))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CountJobsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode198(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CountJobsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode198(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CountJobsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode198(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CountJobsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode198(l, v)
}
func easyjsonB7f3de24Decode199(in *jlexer.Lexer, out *ContentMeasurementComponent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Bytes":
			out.Bytes = int64(in.Int64())
		case "UsedBy":
			if in.IsNull() {
				in.Skip()
				out.UsedBy = nil
			} else {
				in.Delim('[')
				if out.UsedBy == nil {
					if !in.IsDelim(']') {
						out.UsedBy = make([]string, 0, 4)
					} else {
						out.UsedBy = []string{}
					}
				} else {
					out.UsedBy = (out.UsedBy)[:0]
				}
				for !in.IsDelim(']') {
					var v331 string
					v331 = string(in.String())
					out.UsedBy = append(out.UsedBy, v331)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode199(out *jwriter.Writer, in ContentMeasurementComponent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Bytes\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Bytes))
	}
	{
		const prefix string = ",\"UsedBy\":"
		out.RawString(prefix)
		if in.UsedBy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v332, v333 := range in.UsedBy {
				if v332 > 0 {
					out.RawByte(',')
				}
				out.String(string(v333))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContentMeasurementComponent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode199(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContentMeasurementComponent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode199(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContentMeasurementComponent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode199(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContentMeasurementComponent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode199(l, v)
}
func easyjsonB7f3de24Decode200(in *jlexer.Lexer, out *ContentMeasurement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MeasureStarted":
			out.MeasureStarted = int64(in.Int64())
		case "MeasureCompleted":
			out.MeasureCompleted = int64(in.Int64())
		case "Components":
			if in.IsNull() {
				in.Skip()
				out.Components = nil
			} else {
				in.Delim('[')
				if out.Components == nil {
					if !in.IsDelim(']') {
						out.Components = make([]ContentMeasurementComponent, 0, 1)
					} else {
						out.Components = []ContentMeasurementComponent{}
					}
				} else {
					out.Components = (out.Components)[:0]
				}
				for !in.IsDelim(']') {
					var v334 ContentMeasurementComponent
					(v334).UnmarshalEasyJSON(in)
					out.Components = append(out.Components, v334)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode200(out *jwriter.Writer, in ContentMeasurement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MeasureStarted\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.MeasureStarted))
	}
	{
		const prefix string = ",\"MeasureCompleted\":"
		out.RawString(prefix)
		out.Int64(int64(in.MeasureCompleted))
	}
	{
		const prefix string = ",\"Components\":"
		out.RawString(prefix)
		if in.Components == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v335, v336 := range in.Components {
				if v335 > 0 {
					out.RawByte(',')
				}
				(v336).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContentMeasurement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode200(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContentMeasurement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode200(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContentMeasurement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode200(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContentMeasurement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode200(l, v)
}
func easyjsonB7f3de24Decode201(in *jlexer.Lexer, out *ConstellationStatusAPIResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DeletionEnabled":
			out.DeletionEnabled = bool(in.Bool())
		case "Targets":
			if in.IsNull() {
				in.Skip()
				out.Targets = nil
			} else {
				in.Delim('[')
				if out.Targets == nil {
					if !in.IsDelim(']') {
						out.Targets = make([]string, 0, 4)
					} else {
						out.Targets = []string{}
					}
				} else {
					out.Targets = (out.Targets)[:0]
				}
				for !in.IsDelim(']') {
					var v337 string
					v337 = string(in.String())
					out.Targets = append(out.Targets, v337)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TargetNames":
			if in.IsNull() {
				in.Skip()
				out.TargetNames = nil
			} else {
				in.Delim('[')
				if out.TargetNames == nil {
					if !in.IsDelim(']') {
						out.TargetNames = make([]string, 0, 4)
					} else {
						out.TargetNames = []string{}
					}
				} else {
					out.TargetNames = (out.TargetNames)[:0]
				}
				for !in.IsDelim(']') {
					var v338 string
					v338 = string(in.String())
					out.TargetNames = append(out.TargetNames, v338)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Stats":
			(out.Stats).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode201(out *jwriter.Writer, in ConstellationStatusAPIResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DeletionEnabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.DeletionEnabled))
	}
	{
		const prefix string = ",\"Targets\":"
		out.RawString(prefix)
		if in.Targets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v339, v340 := range in.Targets {
				if v339 > 0 {
					out.RawByte(',')
				}
				out.String(string(v340))
			}
			out.RawByte(']')
		}
	}
	if len(in.TargetNames) != 0 {
		const prefix string = ",\"TargetNames\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v341, v342 := range in.TargetNames {
				if v341 > 0 {
					out.RawByte(',')
				}
				out.String(string(v342))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Stats\":"
		out.RawString(prefix)
		(in.Stats).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConstellationStatusAPIResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode201(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConstellationStatusAPIResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode201(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConstellationStatusAPIResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode201(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConstellationStatusAPIResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode201(l, v)
}
func easyjsonB7f3de24Decode202(in *jlexer.Lexer, out *ConstellationStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LastCheckStart":
			out.LastCheckStart = int64(in.Int64())
		case "TotalChecksStarted":
			out.TotalChecksStarted = int64(in.Int64())
		case "TotalBucketsDeleted":
			out.TotalBucketsDeleted = int64(in.Int64())
		case "ChecksCurrentlyActive":
			out.ChecksCurrentlyActive = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode202(out *jwriter.Writer, in ConstellationStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"LastCheckStart\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.LastCheckStart))
	}
	{
		const prefix string = ",\"TotalChecksStarted\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalChecksStarted))
	}
	{
		const prefix string = ",\"TotalBucketsDeleted\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalBucketsDeleted))
	}
	{
		const prefix string = ",\"ChecksCurrentlyActive\":"
		out.RawString(prefix)
		out.Int64(int64(in.ChecksCurrentlyActive))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConstellationStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode202(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConstellationStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode202(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConstellationStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode202(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConstellationStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode202(l, v)
}
func easyjsonB7f3de24Decode203(in *jlexer.Lexer, out *ConstellationRoleOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RoleEnabled":
			out.RoleEnabled = bool(in.Bool())
		case "DeleteUnusedData":
			out.DeleteUnusedData = bool(in.Bool())
		case "Servers":
			if in.IsNull() {
				in.Skip()
				out.Servers = nil
			} else {
				in.Delim('[')
				if out.Servers == nil {
					if !in.IsDelim(']') {
						out.Servers = make([]RemoteServerAddress, 0, 0)
					} else {
						out.Servers = []RemoteServerAddress{}
					}
				} else {
					out.Servers = (out.Servers)[:0]
				}
				for !in.IsDelim(']') {
					var v343 RemoteServerAddress
					(v343).UnmarshalEasyJSON(in)
					out.Servers = append(out.Servers, v343)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode203(out *jwriter.Writer, in ConstellationRoleOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"RoleEnabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.RoleEnabled))
	}
	{
		const prefix string = ",\"DeleteUnusedData\":"
		out.RawString(prefix)
		out.Bool(bool(in.DeleteUnusedData))
	}
	{
		const prefix string = ",\"Servers\":"
		out.RawString(prefix)
		if in.Servers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v344, v345 := range in.Servers {
				if v344 > 0 {
					out.RawByte(',')
				}
				(v345).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConstellationRoleOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode203(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConstellationRoleOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode203(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConstellationRoleOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode203(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConstellationRoleOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode203(l, v)
}
func easyjsonB7f3de24Decode204(in *jlexer.Lexer, out *ConstellationCheckReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CheckStarted":
			out.CheckStarted = int64(in.Int64())
		case "CheckCompleted":
			out.CheckCompleted = int64(in.Int64())
		case "Usage":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Usage = make(BucketUsageMap)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v346 BucketUsageInfo
					(v346).UnmarshalEasyJSON(in)
					(out.Usage)[key] = v346
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode204(out *jwriter.Writer, in ConstellationCheckReport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CheckStarted\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CheckStarted))
	}
	{
		const prefix string = ",\"CheckCompleted\":"
		out.RawString(prefix)
		out.Int64(int64(in.CheckCompleted))
	}
	{
		const prefix string = ",\"Usage\":"
		out.RawString(prefix)
		if in.Usage == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v347First := true
			for v347Name, v347Value := range in.Usage {
				if v347First {
					v347First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v347Name))
				out.RawByte(':')
				(v347Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConstellationCheckReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode204(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConstellationCheckReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode204(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConstellationCheckReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode204(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConstellationCheckReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode204(l, v)
}
func easyjsonB7f3de24Decode205(in *jlexer.Lexer, out *CometDestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CometServer":
			out.CometServer = string(in.String())
		case "CometBucket":
			out.CometBucket = string(in.String())
		case "CometBucketKey":
			out.CometBucketKey = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode205(out *jwriter.Writer, in CometDestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CometServer\":"
		out.RawString(prefix[1:])
		out.String(string(in.CometServer))
	}
	{
		const prefix string = ",\"CometBucket\":"
		out.RawString(prefix)
		out.String(string(in.CometBucket))
	}
	{
		const prefix string = ",\"CometBucketKey\":"
		out.RawString(prefix)
		out.String(string(in.CometBucketKey))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CometDestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode205(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CometDestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode205(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CometDestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode205(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CometDestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode205(l, v)
}
func easyjsonB7f3de24Decode206(in *jlexer.Lexer, out *CometAPIResponseMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode206(out *jwriter.Writer, in CometAPIResponseMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CometAPIResponseMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode206(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CometAPIResponseMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode206(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CometAPIResponseMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode206(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CometAPIResponseMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode206(l, v)
}
func easyjsonB7f3de24Decode207(in *jlexer.Lexer, out *BucketUsageInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AccessKey":
			out.AccessKey = string(in.String())
		case "ExistsOnServers":
			if in.IsNull() {
				in.Skip()
				out.ExistsOnServers = nil
			} else {
				in.Delim('[')
				if out.ExistsOnServers == nil {
					if !in.IsDelim(']') {
						out.ExistsOnServers = make([]int, 0, 8)
					} else {
						out.ExistsOnServers = []int{}
					}
				} else {
					out.ExistsOnServers = (out.ExistsOnServers)[:0]
				}
				for !in.IsDelim(']') {
					var v348 int
					v348 = int(in.Int())
					out.ExistsOnServers = append(out.ExistsOnServers, v348)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "InUseBy":
			if in.IsNull() {
				in.Skip()
				out.InUseBy = nil
			} else {
				in.Delim('[')
				if out.InUseBy == nil {
					if !in.IsDelim(']') {
						out.InUseBy = make([]UserOnServer, 0, 2)
					} else {
						out.InUseBy = []UserOnServer{}
					}
				} else {
					out.InUseBy = (out.InUseBy)[:0]
				}
				for !in.IsDelim(']') {
					var v349 UserOnServer
					(v349).UnmarshalEasyJSON(in)
					out.InUseBy = append(out.InUseBy, v349)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode207(out *jwriter.Writer, in BucketUsageInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AccessKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"ExistsOnServers\":"
		out.RawString(prefix)
		if in.ExistsOnServers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v350, v351 := range in.ExistsOnServers {
				if v350 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v351))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"InUseBy\":"
		out.RawString(prefix)
		if in.InUseBy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v352, v353 := range in.InUseBy {
				if v352 > 0 {
					out.RawByte(',')
				}
				(v353).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BucketUsageInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode207(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BucketUsageInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode207(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BucketUsageInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode207(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BucketUsageInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode207(l, v)
}
func easyjsonB7f3de24Decode208(in *jlexer.Lexer, out *BucketProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OrganizationID":
			out.OrganizationID = string(in.String())
		case "CreateTime":
			out.CreateTime = int64(in.Int64())
		case "ReadWriteKeyFormat":
			out.ReadWriteKeyFormat = int(in.Int())
		case "ReadWriteKey":
			out.ReadWriteKey = string(in.String())
		case "Size":
			(out.Size).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode208(out *jwriter.Writer, in BucketProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OrganizationID\":"
		out.RawString(prefix[1:])
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"CreateTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateTime))
	}
	{
		const prefix string = ",\"ReadWriteKeyFormat\":"
		out.RawString(prefix)
		out.Int(int(in.ReadWriteKeyFormat))
	}
	{
		const prefix string = ",\"ReadWriteKey\":"
		out.RawString(prefix)
		out.String(string(in.ReadWriteKey))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		(in.Size).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BucketProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode208(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BucketProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode208(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BucketProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode208(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BucketProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode208(l, v)
}
func easyjsonB7f3de24Decode209(in *jlexer.Lexer, out *BrowseVSSResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "VSSWriters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.VSSWriters = make(map[string]VSSWriterInfo)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v354 VSSWriterInfo
					(v354).UnmarshalEasyJSON(in)
					(out.VSSWriters)[key] = v354
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode209(out *jwriter.Writer, in BrowseVSSResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"VSSWriters\":"
		out.RawString(prefix)
		if in.VSSWriters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v355First := true
			for v355Name, v355Value := range in.VSSWriters {
				if v355First {
					v355First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v355Name))
				out.RawByte(':')
				(v355Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseVSSResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode209(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseVSSResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode209(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseVSSResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode209(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseVSSResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode209(l, v)
}
func easyjsonB7f3de24Decode210(in *jlexer.Lexer, out *BrowseVMwareResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "VirtualMachines":
			if in.IsNull() {
				in.Skip()
				out.VirtualMachines = nil
			} else {
				in.Delim('[')
				if out.VirtualMachines == nil {
					if !in.IsDelim(']') {
						out.VirtualMachines = make([]VMwareMachineInfo, 0, 2)
					} else {
						out.VirtualMachines = []VMwareMachineInfo{}
					}
				} else {
					out.VirtualMachines = (out.VirtualMachines)[:0]
				}
				for !in.IsDelim(']') {
					var v356 VMwareMachineInfo
					(v356).UnmarshalEasyJSON(in)
					out.VirtualMachines = append(out.VirtualMachines, v356)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode210(out *jwriter.Writer, in BrowseVMwareResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"VirtualMachines\":"
		out.RawString(prefix)
		if in.VirtualMachines == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v357, v358 := range in.VirtualMachines {
				if v357 > 0 {
					out.RawByte(',')
				}
				(v358).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseVMwareResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode210(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseVMwareResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode210(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseVMwareResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode210(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseVMwareResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode210(l, v)
}
func easyjsonB7f3de24Decode211(in *jlexer.Lexer, out *BrowseVMwareNetworksResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Networks":
			if in.IsNull() {
				in.Skip()
				out.Networks = nil
			} else {
				in.Delim('[')
				if out.Networks == nil {
					if !in.IsDelim(']') {
						out.Networks = make([]VMwareNetworkInfo, 0, 2)
					} else {
						out.Networks = []VMwareNetworkInfo{}
					}
				} else {
					out.Networks = (out.Networks)[:0]
				}
				for !in.IsDelim(']') {
					var v359 VMwareNetworkInfo
					(v359).UnmarshalEasyJSON(in)
					out.Networks = append(out.Networks, v359)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode211(out *jwriter.Writer, in BrowseVMwareNetworksResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Networks\":"
		out.RawString(prefix)
		if in.Networks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v360, v361 := range in.Networks {
				if v360 > 0 {
					out.RawByte(',')
				}
				(v361).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseVMwareNetworksResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode211(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseVMwareNetworksResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode211(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseVMwareNetworksResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode211(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseVMwareNetworksResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode211(l, v)
}
func easyjsonB7f3de24Decode212(in *jlexer.Lexer, out *BrowseVMwareHostsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Hosts":
			if in.IsNull() {
				in.Skip()
				out.Hosts = nil
			} else {
				in.Delim('[')
				if out.Hosts == nil {
					if !in.IsDelim(']') {
						out.Hosts = make([]VMwareHostInfo, 0, 2)
					} else {
						out.Hosts = []VMwareHostInfo{}
					}
				} else {
					out.Hosts = (out.Hosts)[:0]
				}
				for !in.IsDelim(']') {
					var v362 VMwareHostInfo
					(v362).UnmarshalEasyJSON(in)
					out.Hosts = append(out.Hosts, v362)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode212(out *jwriter.Writer, in BrowseVMwareHostsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Hosts\":"
		out.RawString(prefix)
		if in.Hosts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v363, v364 := range in.Hosts {
				if v363 > 0 {
					out.RawByte(',')
				}
				(v364).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseVMwareHostsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode212(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseVMwareHostsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode212(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseVMwareHostsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode212(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseVMwareHostsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode212(l, v)
}
func easyjsonB7f3de24Decode213(in *jlexer.Lexer, out *BrowseVMwareDatastoresResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Datastores":
			if in.IsNull() {
				in.Skip()
				out.Datastores = nil
			} else {
				in.Delim('[')
				if out.Datastores == nil {
					if !in.IsDelim(']') {
						out.Datastores = make([]VMwareDatastoreInfo, 0, 2)
					} else {
						out.Datastores = []VMwareDatastoreInfo{}
					}
				} else {
					out.Datastores = (out.Datastores)[:0]
				}
				for !in.IsDelim(']') {
					var v365 VMwareDatastoreInfo
					(v365).UnmarshalEasyJSON(in)
					out.Datastores = append(out.Datastores, v365)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode213(out *jwriter.Writer, in BrowseVMwareDatastoresResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Datastores\":"
		out.RawString(prefix)
		if in.Datastores == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v366, v367 := range in.Datastores {
				if v366 > 0 {
					out.RawByte(',')
				}
				(v367).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseVMwareDatastoresResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode213(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseVMwareDatastoresResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode213(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseVMwareDatastoresResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode213(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseVMwareDatastoresResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode213(l, v)
}
func easyjsonB7f3de24Decode214(in *jlexer.Lexer, out *BrowseVMwareDatacentersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Datacenters":
			if in.IsNull() {
				in.Skip()
				out.Datacenters = nil
			} else {
				in.Delim('[')
				if out.Datacenters == nil {
					if !in.IsDelim(']') {
						out.Datacenters = make([]VMwareDatacenterInfo, 0, 2)
					} else {
						out.Datacenters = []VMwareDatacenterInfo{}
					}
				} else {
					out.Datacenters = (out.Datacenters)[:0]
				}
				for !in.IsDelim(']') {
					var v368 VMwareDatacenterInfo
					(v368).UnmarshalEasyJSON(in)
					out.Datacenters = append(out.Datacenters, v368)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode214(out *jwriter.Writer, in BrowseVMwareDatacentersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Datacenters\":"
		out.RawString(prefix)
		if in.Datacenters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v369, v370 := range in.Datacenters {
				if v369 > 0 {
					out.RawByte(',')
				}
				(v370).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseVMwareDatacentersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode214(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseVMwareDatacentersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode214(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseVMwareDatacentersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode214(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseVMwareDatacentersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode214(l, v)
}
func easyjsonB7f3de24Decode215(in *jlexer.Lexer, out *BrowseSQLServerResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Objects":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Objects = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v371 string
					v371 = string(in.String())
					(out.Objects)[key] = v371
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode215(out *jwriter.Writer, in BrowseSQLServerResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Objects\":"
		out.RawString(prefix)
		if in.Objects == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v372First := true
			for v372Name, v372Value := range in.Objects {
				if v372First {
					v372First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v372Name))
				out.RawByte(':')
				out.String(string(v372Value))
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseSQLServerResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode215(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseSQLServerResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode215(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseSQLServerResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode215(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseSQLServerResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode215(l, v)
}
func easyjsonB7f3de24Decode216(in *jlexer.Lexer, out *BrowseProxmoxStorageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Storage":
			if in.IsNull() {
				in.Skip()
				out.Storage = nil
			} else {
				in.Delim('[')
				if out.Storage == nil {
					if !in.IsDelim(']') {
						out.Storage = make([]PVEStorageName, 0, 1)
					} else {
						out.Storage = []PVEStorageName{}
					}
				} else {
					out.Storage = (out.Storage)[:0]
				}
				for !in.IsDelim(']') {
					var v373 PVEStorageName
					(v373).UnmarshalEasyJSON(in)
					out.Storage = append(out.Storage, v373)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode216(out *jwriter.Writer, in BrowseProxmoxStorageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Storage\":"
		out.RawString(prefix)
		if in.Storage == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v374, v375 := range in.Storage {
				if v374 > 0 {
					out.RawByte(',')
				}
				(v375).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseProxmoxStorageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode216(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseProxmoxStorageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode216(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseProxmoxStorageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode216(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseProxmoxStorageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode216(l, v)
}
func easyjsonB7f3de24Decode217(in *jlexer.Lexer, out *BrowseProxmoxResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "VMs":
			if in.IsNull() {
				in.Skip()
				out.VMs = nil
			} else {
				in.Delim('[')
				if out.VMs == nil {
					if !in.IsDelim(']') {
						out.VMs = make([]PVEVM, 0, 0)
					} else {
						out.VMs = []PVEVM{}
					}
				} else {
					out.VMs = (out.VMs)[:0]
				}
				for !in.IsDelim(']') {
					var v376 PVEVM
					(v376).UnmarshalEasyJSON(in)
					out.VMs = append(out.VMs, v376)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode217(out *jwriter.Writer, in BrowseProxmoxResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"VMs\":"
		out.RawString(prefix)
		if in.VMs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v377, v378 := range in.VMs {
				if v377 > 0 {
					out.RawByte(',')
				}
				(v378).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseProxmoxResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode217(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseProxmoxResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode217(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseProxmoxResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode217(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseProxmoxResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode217(l, v)
}
func easyjsonB7f3de24Decode218(in *jlexer.Lexer, out *BrowseProxmoxNodesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]string, 0, 4)
					} else {
						out.Nodes = []string{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v379 string
					v379 = string(in.String())
					out.Nodes = append(out.Nodes, v379)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode218(out *jwriter.Writer, in BrowseProxmoxNodesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Nodes\":"
		out.RawString(prefix)
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v380, v381 := range in.Nodes {
				if v380 > 0 {
					out.RawByte(',')
				}
				out.String(string(v381))
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseProxmoxNodesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode218(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseProxmoxNodesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode218(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseProxmoxNodesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode218(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseProxmoxNodesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode218(l, v)
}
func easyjsonB7f3de24Decode219(in *jlexer.Lexer, out *BrowseOffice365ObjectsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Objects":
			if in.IsNull() {
				in.Skip()
				out.Objects = nil
			} else {
				in.Delim('[')
				if out.Objects == nil {
					if !in.IsDelim(']') {
						out.Objects = make([]Office365ObjectInfo, 0, 0)
					} else {
						out.Objects = []Office365ObjectInfo{}
					}
				} else {
					out.Objects = (out.Objects)[:0]
				}
				for !in.IsDelim(']') {
					var v382 Office365ObjectInfo
					(v382).UnmarshalEasyJSON(in)
					out.Objects = append(out.Objects, v382)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode219(out *jwriter.Writer, in BrowseOffice365ObjectsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Objects\":"
		out.RawString(prefix)
		if in.Objects == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v383, v384 := range in.Objects {
				if v383 > 0 {
					out.RawByte(',')
				}
				(v384).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseOffice365ObjectsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode219(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseOffice365ObjectsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode219(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseOffice365ObjectsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode219(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseOffice365ObjectsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode219(l, v)
}
func easyjsonB7f3de24Decode220(in *jlexer.Lexer, out *BrowseOffice365ListVirtualAccountsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Objects":
			if in.IsNull() {
				in.Skip()
				out.Objects = nil
			} else {
				in.Delim('[')
				if out.Objects == nil {
					if !in.IsDelim(']') {
						out.Objects = make([]Office365MixedVirtualAccount, 0, 0)
					} else {
						out.Objects = []Office365MixedVirtualAccount{}
					}
				} else {
					out.Objects = (out.Objects)[:0]
				}
				for !in.IsDelim(']') {
					var v385 Office365MixedVirtualAccount
					(v385).UnmarshalEasyJSON(in)
					out.Objects = append(out.Objects, v385)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode220(out *jwriter.Writer, in BrowseOffice365ListVirtualAccountsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Objects\":"
		out.RawString(prefix)
		if in.Objects == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v386, v387 := range in.Objects {
				if v386 > 0 {
					out.RawByte(',')
				}
				(v387).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseOffice365ListVirtualAccountsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode220(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseOffice365ListVirtualAccountsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode220(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseOffice365ListVirtualAccountsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode220(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseOffice365ListVirtualAccountsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode220(l, v)
}
func easyjsonB7f3de24Decode221(in *jlexer.Lexer, out *BrowseHVResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "VirtualMachines":
			if in.IsNull() {
				in.Skip()
				out.VirtualMachines = nil
			} else {
				in.Delim('[')
				if out.VirtualMachines == nil {
					if !in.IsDelim(']') {
						out.VirtualMachines = make([]HyperVMachineInfo, 0, 0)
					} else {
						out.VirtualMachines = []HyperVMachineInfo{}
					}
				} else {
					out.VirtualMachines = (out.VirtualMachines)[:0]
				}
				for !in.IsDelim(']') {
					var v388 HyperVMachineInfo
					(v388).UnmarshalEasyJSON(in)
					out.VirtualMachines = append(out.VirtualMachines, v388)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode221(out *jwriter.Writer, in BrowseHVResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"VirtualMachines\":"
		out.RawString(prefix)
		if in.VirtualMachines == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v389, v390 := range in.VirtualMachines {
				if v389 > 0 {
					out.RawByte(',')
				}
				(v390).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseHVResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode221(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseHVResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode221(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseHVResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode221(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseHVResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode221(l, v)
}
func easyjsonB7f3de24Decode222(in *jlexer.Lexer, out *BrowseEDBResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Databases":
			if in.IsNull() {
				in.Skip()
				out.Databases = nil
			} else {
				in.Delim('[')
				if out.Databases == nil {
					if !in.IsDelim(']') {
						out.Databases = make([]EDBFileInfo, 0, 1)
					} else {
						out.Databases = []EDBFileInfo{}
					}
				} else {
					out.Databases = (out.Databases)[:0]
				}
				for !in.IsDelim(']') {
					var v391 EDBFileInfo
					(v391).UnmarshalEasyJSON(in)
					out.Databases = append(out.Databases, v391)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode222(out *jwriter.Writer, in BrowseEDBResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Databases\":"
		out.RawString(prefix)
		if in.Databases == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v392, v393 := range in.Databases {
				if v392 > 0 {
					out.RawByte(',')
				}
				(v393).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseEDBResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode222(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseEDBResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode222(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseEDBResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode222(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseEDBResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode222(l, v)
}
func easyjsonB7f3de24Decode223(in *jlexer.Lexer, out *BrowseDiskDrivesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "Disks":
			if in.IsNull() {
				in.Skip()
				out.Disks = nil
			} else {
				in.Delim('[')
				if out.Disks == nil {
					if !in.IsDelim(']') {
						out.Disks = make([]DiskDrive, 0, 0)
					} else {
						out.Disks = []DiskDrive{}
					}
				} else {
					out.Disks = (out.Disks)[:0]
				}
				for !in.IsDelim(']') {
					var v394 DiskDrive
					(v394).UnmarshalEasyJSON(in)
					out.Disks = append(out.Disks, v394)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode223(out *jwriter.Writer, in BrowseDiskDrivesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Disks\":"
		out.RawString(prefix)
		if in.Disks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v395, v396 := range in.Disks {
				if v395 > 0 {
					out.RawByte(',')
				}
				(v396).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowseDiskDrivesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode223(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowseDiskDrivesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode223(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowseDiskDrivesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode223(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowseDiskDrivesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode223(l, v)
}
func easyjsonB7f3de24Decode224(in *jlexer.Lexer, out *BrandingProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ProductName":
			out.ProductName = string(in.String())
		case "CompanyName":
			out.CompanyName = string(in.String())
		case "HelpURL":
			out.HelpURL = string(in.String())
		case "HelpIsPopup":
			out.HelpIsPopup = bool(in.Bool())
		case "DefaultLoginServerURL":
			out.DefaultLoginServerURL = string(in.String())
		case "TileBackgroundColor":
			out.TileBackgroundColor = string(in.String())
		case "AccountRegisterURL":
			out.AccountRegisterURL = string(in.String())
		case "HideBackgroundLogo":
			out.HideBackgroundLogo = bool(in.Bool())
		case "CloudStorageName":
			out.CloudStorageName = string(in.String())
		case "AdminHidePreBuiltClientOption":
			out.AdminHidePreBuiltClientOption = bool(in.Bool())
		case "AdminHideBrandedCloudStorage":
			out.AdminHideBrandedCloudStorage = bool(in.Bool())
		case "BuildMode":
			out.BuildMode = ClientBrandingBuildMode(in.Int())
		case "PathIcoFile":
			out.PathIcoFile = string(in.String())
		case "PathIcnsFile":
			out.PathIcnsFile = string(in.String())
		case "PathMenuBarIcnsFile":
			out.PathMenuBarIcnsFile = string(in.String())
		case "PathEulaRtf":
			out.PathEulaRtf = string(in.String())
		case "PathTilePng":
			out.PathTilePng = string(in.String())
		case "PathHeaderImage":
			out.PathHeaderImage = string(in.String())
		case "PathAppIconImage":
			out.PathAppIconImage = string(in.String())
		case "PackageIdentifier":
			out.PackageIdentifier = string(in.String())
		case "WindowsCodeSignMethod":
			out.WindowsCodeSignMethod = WindowsCodesignMethod(in.Int())
		case "WindowsCodeSignPKCS12FilePath":
			out.WindowsCodeSignPKCS12FilePath = string(in.String())
		case "WindowsCodeSignPKCS12PasswordFormat":
			out.WindowsCodeSignPKCS12PasswordFormat = uint64(in.Uint64())
		case "WindowsCodeSignPKCS12Password":
			out.WindowsCodeSignPKCS12Password = string(in.String())
		case "WindowsCodeSignPKCS11Engine":
			out.WindowsCodeSignPKCS11Engine = string(in.String())
		case "WindowsCodeSignPKCS11Module":
			out.WindowsCodeSignPKCS11Module = string(in.String())
		case "WindowsCodeSignPKCS11Certfile":
			out.WindowsCodeSignPKCS11Certfile = string(in.String())
		case "WindowsCodeSignPKCS11KeyID":
			out.WindowsCodeSignPKCS11KeyID = string(in.String())
		case "WindowsCodeSignPKCS11PasswordFormat":
			out.WindowsCodeSignPKCS11PasswordFormat = uint64(in.Uint64())
		case "WindowsCodeSignPKCS11Password":
			out.WindowsCodeSignPKCS11Password = string(in.String())
		case "WindowsCodeSignAzureVaultName":
			out.WindowsCodeSignAzureVaultName = string(in.String())
		case "WindowsCodeSignAzureCertName":
			out.WindowsCodeSignAzureCertName = string(in.String())
		case "WindowsCodeSignAzureAppID":
			out.WindowsCodeSignAzureAppID = string(in.String())
		case "WindowsCodeSignAzureAppSecretFormat":
			out.WindowsCodeSignAzureAppSecretFormat = uint64(in.Uint64())
		case "WindowsCodeSignAzureAppSecret":
			out.WindowsCodeSignAzureAppSecret = string(in.String())
		case "WindowsCodeSignAzureTenantID":
			out.WindowsCodeSignAzureTenantID = string(in.String())
		case "MacOSCodeSign":
			(out.MacOSCodeSign).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode224(out *jwriter.Writer, in BrandingProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ProductName\":"
		out.RawString(prefix[1:])
		out.String(string(in.ProductName))
	}
	{
		const prefix string = ",\"CompanyName\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"HelpURL\":"
		out.RawString(prefix)
		out.String(string(in.HelpURL))
	}
	{
		const prefix string = ",\"HelpIsPopup\":"
		out.RawString(prefix)
		out.Bool(bool(in.HelpIsPopup))
	}
	{
		const prefix string = ",\"DefaultLoginServerURL\":"
		out.RawString(prefix)
		out.String(string(in.DefaultLoginServerURL))
	}
	{
		const prefix string = ",\"TileBackgroundColor\":"
		out.RawString(prefix)
		out.String(string(in.TileBackgroundColor))
	}
	{
		const prefix string = ",\"AccountRegisterURL\":"
		out.RawString(prefix)
		out.String(string(in.AccountRegisterURL))
	}
	{
		const prefix string = ",\"HideBackgroundLogo\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideBackgroundLogo))
	}
	{
		const prefix string = ",\"CloudStorageName\":"
		out.RawString(prefix)
		out.String(string(in.CloudStorageName))
	}
	{
		const prefix string = ",\"AdminHidePreBuiltClientOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.AdminHidePreBuiltClientOption))
	}
	{
		const prefix string = ",\"AdminHideBrandedCloudStorage\":"
		out.RawString(prefix)
		out.Bool(bool(in.AdminHideBrandedCloudStorage))
	}
	{
		const prefix string = ",\"BuildMode\":"
		out.RawString(prefix)
		out.Int(int(in.BuildMode))
	}
	{
		const prefix string = ",\"PathIcoFile\":"
		out.RawString(prefix)
		out.String(string(in.PathIcoFile))
	}
	{
		const prefix string = ",\"PathIcnsFile\":"
		out.RawString(prefix)
		out.String(string(in.PathIcnsFile))
	}
	{
		const prefix string = ",\"PathMenuBarIcnsFile\":"
		out.RawString(prefix)
		out.String(string(in.PathMenuBarIcnsFile))
	}
	{
		const prefix string = ",\"PathEulaRtf\":"
		out.RawString(prefix)
		out.String(string(in.PathEulaRtf))
	}
	{
		const prefix string = ",\"PathTilePng\":"
		out.RawString(prefix)
		out.String(string(in.PathTilePng))
	}
	{
		const prefix string = ",\"PathHeaderImage\":"
		out.RawString(prefix)
		out.String(string(in.PathHeaderImage))
	}
	{
		const prefix string = ",\"PathAppIconImage\":"
		out.RawString(prefix)
		out.String(string(in.PathAppIconImage))
	}
	{
		const prefix string = ",\"PackageIdentifier\":"
		out.RawString(prefix)
		out.String(string(in.PackageIdentifier))
	}
	{
		const prefix string = ",\"WindowsCodeSignMethod\":"
		out.RawString(prefix)
		out.Int(int(in.WindowsCodeSignMethod))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS12FilePath\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS12FilePath))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS12PasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WindowsCodeSignPKCS12PasswordFormat))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS12Password\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS12Password))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Engine\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Engine))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Module\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Module))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Certfile\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Certfile))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11KeyID\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11KeyID))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11PasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WindowsCodeSignPKCS11PasswordFormat))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Password\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Password))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureVaultName\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureVaultName))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureCertName\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureCertName))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureAppID\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureAppID))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureAppSecretFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WindowsCodeSignAzureAppSecretFormat))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureAppSecret\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureAppSecret))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureTenantID\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureTenantID))
	}
	{
		const prefix string = ",\"MacOSCodeSign\":"
		out.RawString(prefix)
		(in.MacOSCodeSign).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrandingProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode224(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrandingProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode224(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrandingProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode224(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrandingProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode224(l, v)
}
func easyjsonB7f3de24Decode225(in *jlexer.Lexer, out *BrandingOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BrandingStyleType":
			out.BrandingStyleType = int(in.Int())
		case "BrandName":
			out.BrandName = string(in.String())
		case "LogoImage":
			out.LogoImage = string(in.String())
		case "TopColor":
			out.TopColor = string(in.String())
		case "AccentColor":
			out.AccentColor = string(in.String())
		case "Favicon":
			out.Favicon = string(in.String())
		case "HideNewsArea":
			out.HideNewsArea = bool(in.Bool())
		case "ProductName":
			out.ProductName = string(in.String())
		case "CompanyName":
			out.CompanyName = string(in.String())
		case "HelpURL":
			out.HelpURL = string(in.String())
		case "HelpIsPopup":
			out.HelpIsPopup = bool(in.Bool())
		case "DefaultLoginServerURL":
			out.DefaultLoginServerURL = string(in.String())
		case "TileBackgroundColor":
			out.TileBackgroundColor = string(in.String())
		case "AccountRegisterURL":
			out.AccountRegisterURL = string(in.String())
		case "HideBackgroundLogo":
			out.HideBackgroundLogo = bool(in.Bool())
		case "CloudStorageName":
			out.CloudStorageName = string(in.String())
		case "AdminHidePreBuiltClientOption":
			out.AdminHidePreBuiltClientOption = bool(in.Bool())
		case "AdminHideBrandedCloudStorage":
			out.AdminHideBrandedCloudStorage = bool(in.Bool())
		case "BuildMode":
			out.BuildMode = ClientBrandingBuildMode(in.Int())
		case "PathIcoFile":
			out.PathIcoFile = string(in.String())
		case "PathIcnsFile":
			out.PathIcnsFile = string(in.String())
		case "PathMenuBarIcnsFile":
			out.PathMenuBarIcnsFile = string(in.String())
		case "PathEulaRtf":
			out.PathEulaRtf = string(in.String())
		case "PathTilePng":
			out.PathTilePng = string(in.String())
		case "PathHeaderImage":
			out.PathHeaderImage = string(in.String())
		case "PathAppIconImage":
			out.PathAppIconImage = string(in.String())
		case "PackageIdentifier":
			out.PackageIdentifier = string(in.String())
		case "WindowsCodeSignMethod":
			out.WindowsCodeSignMethod = WindowsCodesignMethod(in.Int())
		case "WindowsCodeSignPKCS12FilePath":
			out.WindowsCodeSignPKCS12FilePath = string(in.String())
		case "WindowsCodeSignPKCS12PasswordFormat":
			out.WindowsCodeSignPKCS12PasswordFormat = uint64(in.Uint64())
		case "WindowsCodeSignPKCS12Password":
			out.WindowsCodeSignPKCS12Password = string(in.String())
		case "WindowsCodeSignPKCS11Engine":
			out.WindowsCodeSignPKCS11Engine = string(in.String())
		case "WindowsCodeSignPKCS11Module":
			out.WindowsCodeSignPKCS11Module = string(in.String())
		case "WindowsCodeSignPKCS11Certfile":
			out.WindowsCodeSignPKCS11Certfile = string(in.String())
		case "WindowsCodeSignPKCS11KeyID":
			out.WindowsCodeSignPKCS11KeyID = string(in.String())
		case "WindowsCodeSignPKCS11PasswordFormat":
			out.WindowsCodeSignPKCS11PasswordFormat = uint64(in.Uint64())
		case "WindowsCodeSignPKCS11Password":
			out.WindowsCodeSignPKCS11Password = string(in.String())
		case "WindowsCodeSignAzureVaultName":
			out.WindowsCodeSignAzureVaultName = string(in.String())
		case "WindowsCodeSignAzureCertName":
			out.WindowsCodeSignAzureCertName = string(in.String())
		case "WindowsCodeSignAzureAppID":
			out.WindowsCodeSignAzureAppID = string(in.String())
		case "WindowsCodeSignAzureAppSecretFormat":
			out.WindowsCodeSignAzureAppSecretFormat = uint64(in.Uint64())
		case "WindowsCodeSignAzureAppSecret":
			out.WindowsCodeSignAzureAppSecret = string(in.String())
		case "WindowsCodeSignAzureTenantID":
			out.WindowsCodeSignAzureTenantID = string(in.String())
		case "MacOSCodeSign":
			(out.MacOSCodeSign).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode225(out *jwriter.Writer, in BrandingOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BrandingStyleType\":"
		out.RawString(prefix[1:])
		out.Int(int(in.BrandingStyleType))
	}
	{
		const prefix string = ",\"BrandName\":"
		out.RawString(prefix)
		out.String(string(in.BrandName))
	}
	{
		const prefix string = ",\"LogoImage\":"
		out.RawString(prefix)
		out.String(string(in.LogoImage))
	}
	{
		const prefix string = ",\"TopColor\":"
		out.RawString(prefix)
		out.String(string(in.TopColor))
	}
	{
		const prefix string = ",\"AccentColor\":"
		out.RawString(prefix)
		out.String(string(in.AccentColor))
	}
	{
		const prefix string = ",\"Favicon\":"
		out.RawString(prefix)
		out.String(string(in.Favicon))
	}
	{
		const prefix string = ",\"HideNewsArea\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideNewsArea))
	}
	{
		const prefix string = ",\"ProductName\":"
		out.RawString(prefix)
		out.String(string(in.ProductName))
	}
	{
		const prefix string = ",\"CompanyName\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"HelpURL\":"
		out.RawString(prefix)
		out.String(string(in.HelpURL))
	}
	{
		const prefix string = ",\"HelpIsPopup\":"
		out.RawString(prefix)
		out.Bool(bool(in.HelpIsPopup))
	}
	{
		const prefix string = ",\"DefaultLoginServerURL\":"
		out.RawString(prefix)
		out.String(string(in.DefaultLoginServerURL))
	}
	{
		const prefix string = ",\"TileBackgroundColor\":"
		out.RawString(prefix)
		out.String(string(in.TileBackgroundColor))
	}
	{
		const prefix string = ",\"AccountRegisterURL\":"
		out.RawString(prefix)
		out.String(string(in.AccountRegisterURL))
	}
	{
		const prefix string = ",\"HideBackgroundLogo\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideBackgroundLogo))
	}
	{
		const prefix string = ",\"CloudStorageName\":"
		out.RawString(prefix)
		out.String(string(in.CloudStorageName))
	}
	{
		const prefix string = ",\"AdminHidePreBuiltClientOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.AdminHidePreBuiltClientOption))
	}
	{
		const prefix string = ",\"AdminHideBrandedCloudStorage\":"
		out.RawString(prefix)
		out.Bool(bool(in.AdminHideBrandedCloudStorage))
	}
	{
		const prefix string = ",\"BuildMode\":"
		out.RawString(prefix)
		out.Int(int(in.BuildMode))
	}
	{
		const prefix string = ",\"PathIcoFile\":"
		out.RawString(prefix)
		out.String(string(in.PathIcoFile))
	}
	{
		const prefix string = ",\"PathIcnsFile\":"
		out.RawString(prefix)
		out.String(string(in.PathIcnsFile))
	}
	{
		const prefix string = ",\"PathMenuBarIcnsFile\":"
		out.RawString(prefix)
		out.String(string(in.PathMenuBarIcnsFile))
	}
	{
		const prefix string = ",\"PathEulaRtf\":"
		out.RawString(prefix)
		out.String(string(in.PathEulaRtf))
	}
	{
		const prefix string = ",\"PathTilePng\":"
		out.RawString(prefix)
		out.String(string(in.PathTilePng))
	}
	{
		const prefix string = ",\"PathHeaderImage\":"
		out.RawString(prefix)
		out.String(string(in.PathHeaderImage))
	}
	{
		const prefix string = ",\"PathAppIconImage\":"
		out.RawString(prefix)
		out.String(string(in.PathAppIconImage))
	}
	{
		const prefix string = ",\"PackageIdentifier\":"
		out.RawString(prefix)
		out.String(string(in.PackageIdentifier))
	}
	{
		const prefix string = ",\"WindowsCodeSignMethod\":"
		out.RawString(prefix)
		out.Int(int(in.WindowsCodeSignMethod))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS12FilePath\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS12FilePath))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS12PasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WindowsCodeSignPKCS12PasswordFormat))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS12Password\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS12Password))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Engine\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Engine))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Module\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Module))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Certfile\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Certfile))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11KeyID\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11KeyID))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11PasswordFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WindowsCodeSignPKCS11PasswordFormat))
	}
	{
		const prefix string = ",\"WindowsCodeSignPKCS11Password\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignPKCS11Password))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureVaultName\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureVaultName))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureCertName\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureCertName))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureAppID\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureAppID))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureAppSecretFormat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WindowsCodeSignAzureAppSecretFormat))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureAppSecret\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureAppSecret))
	}
	{
		const prefix string = ",\"WindowsCodeSignAzureTenantID\":"
		out.RawString(prefix)
		out.String(string(in.WindowsCodeSignAzureTenantID))
	}
	{
		const prefix string = ",\"MacOSCodeSign\":"
		out.RawString(prefix)
		(in.MacOSCodeSign).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrandingOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode225(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrandingOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode225(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrandingOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode225(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrandingOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode225(l, v)
}
func easyjsonB7f3de24Decode226(in *jlexer.Lexer, out *BlockInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DeviceID":
			out.DeviceID = string(in.String())
		case "DiskNodeName":
			out.DiskNodeName = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode226(out *jwriter.Writer, in BlockInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DeviceID\":"
		out.RawString(prefix[1:])
		out.String(string(in.DeviceID))
	}
	{
		const prefix string = ",\"DiskNodeName\":"
		out.RawString(prefix)
		out.String(string(in.DiskNodeName))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode226(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode226(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode226(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode226(l, v)
}
func easyjsonB7f3de24Decode227(in *jlexer.Lexer, out *BackupRuleEventTriggers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OnPCBoot":
			out.OnPCBoot = bool(in.Bool())
		case "OnPCBootIfLastJobMissed":
			out.OnPCBootIfLastJobMissed = bool(in.Bool())
		case "OnLastJobFailDoRetry":
			out.OnLastJobFailDoRetry = bool(in.Bool())
		case "LastJobFailDoRetryCount":
			out.LastJobFailDoRetryCount = uint64(in.Uint64())
		case "LastJobFailDoRetryTime":
			out.LastJobFailDoRetryTime = uint64(in.Uint64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode227(out *jwriter.Writer, in BackupRuleEventTriggers) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OnPCBoot {
		const prefix string = ",\"OnPCBoot\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.OnPCBoot))
	}
	if in.OnPCBootIfLastJobMissed {
		const prefix string = ",\"OnPCBootIfLastJobMissed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OnPCBootIfLastJobMissed))
	}
	if in.OnLastJobFailDoRetry {
		const prefix string = ",\"OnLastJobFailDoRetry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OnLastJobFailDoRetry))
	}
	if in.LastJobFailDoRetryCount != 0 {
		const prefix string = ",\"LastJobFailDoRetryCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.LastJobFailDoRetryCount))
	}
	if in.LastJobFailDoRetryTime != 0 {
		const prefix string = ",\"LastJobFailDoRetryTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.LastJobFailDoRetryTime))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackupRuleEventTriggers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode227(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackupRuleEventTriggers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode227(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackupRuleEventTriggers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode227(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackupRuleEventTriggers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode227(l, v)
}
func easyjsonB7f3de24Decode228(in *jlexer.Lexer, out *BackupRuleConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Description":
			out.Description = string(in.String())
		case "CreateTime":
			out.CreateTime = int64(in.Int64())
		case "ModifyTime":
			out.ModifyTime = int64(in.Int64())
		case "PreExec":
			if in.IsNull() {
				in.Skip()
				out.PreExec = nil
			} else {
				in.Delim('[')
				if out.PreExec == nil {
					if !in.IsDelim(']') {
						out.PreExec = make([]string, 0, 4)
					} else {
						out.PreExec = []string{}
					}
				} else {
					out.PreExec = (out.PreExec)[:0]
				}
				for !in.IsDelim(']') {
					var v397 string
					v397 = string(in.String())
					out.PreExec = append(out.PreExec, v397)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ThawExec":
			if in.IsNull() {
				in.Skip()
				out.ThawExec = nil
			} else {
				in.Delim('[')
				if out.ThawExec == nil {
					if !in.IsDelim(']') {
						out.ThawExec = make([]string, 0, 4)
					} else {
						out.ThawExec = []string{}
					}
				} else {
					out.ThawExec = (out.ThawExec)[:0]
				}
				for !in.IsDelim(']') {
					var v398 string
					v398 = string(in.String())
					out.ThawExec = append(out.ThawExec, v398)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PostExec":
			if in.IsNull() {
				in.Skip()
				out.PostExec = nil
			} else {
				in.Delim('[')
				if out.PostExec == nil {
					if !in.IsDelim(']') {
						out.PostExec = make([]string, 0, 4)
					} else {
						out.PostExec = []string{}
					}
				} else {
					out.PostExec = (out.PostExec)[:0]
				}
				for !in.IsDelim(']') {
					var v399 string
					v399 = string(in.String())
					out.PostExec = append(out.PostExec, v399)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Source":
			out.Source = string(in.String())
		case "Destination":
			out.Destination = string(in.String())
		case "SkipAlreadyRunning":
			out.SkipAlreadyRunning = bool(in.Bool())
		case "StopAfter":
			out.StopAfter = int64(in.Int64())
		case "LimitVaultSpeedBps":
			out.LimitVaultSpeedBps = int64(in.Int64())
		case "ReduceDiskConcurrency":
			out.ReduceDiskConcurrency = bool(in.Bool())
		case "UseOnDiskIndexes":
			out.UseOnDiskIndexes = bool(in.Bool())
		case "AllowZeroFilesSuccess":
			out.AllowZeroFilesSuccess = bool(in.Bool())
		case "AutoRetentionLevel":
			out.AutoRetentionLevel = AutoRetentionLevel(in.Int64())
		case "ConcurrencyCount":
			out.ConcurrencyCount = int64(in.Int64())
		case "LogLevel":
			out.LogLevel = string(in.String())
		case "Schedules":
			if in.IsNull() {
				in.Skip()
				out.Schedules = nil
			} else {
				in.Delim('[')
				if out.Schedules == nil {
					if !in.IsDelim(']') {
						out.Schedules = make([]ScheduleConfig, 0, 0)
					} else {
						out.Schedules = []ScheduleConfig{}
					}
				} else {
					out.Schedules = (out.Schedules)[:0]
				}
				for !in.IsDelim(']') {
					var v400 ScheduleConfig
					(v400).UnmarshalEasyJSON(in)
					out.Schedules = append(out.Schedules, v400)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EventTriggers":
			(out.EventTriggers).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode228(out *jwriter.Writer, in BackupRuleConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"CreateTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateTime))
	}
	{
		const prefix string = ",\"ModifyTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ModifyTime))
	}
	{
		const prefix string = ",\"PreExec\":"
		out.RawString(prefix)
		if in.PreExec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v401, v402 := range in.PreExec {
				if v401 > 0 {
					out.RawByte(',')
				}
				out.String(string(v402))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ThawExec\":"
		out.RawString(prefix)
		if in.ThawExec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v403, v404 := range in.ThawExec {
				if v403 > 0 {
					out.RawByte(',')
				}
				out.String(string(v404))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PostExec\":"
		out.RawString(prefix)
		if in.PostExec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v405, v406 := range in.PostExec {
				if v405 > 0 {
					out.RawByte(',')
				}
				out.String(string(v406))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"Destination\":"
		out.RawString(prefix)
		out.String(string(in.Destination))
	}
	{
		const prefix string = ",\"SkipAlreadyRunning\":"
		out.RawString(prefix)
		out.Bool(bool(in.SkipAlreadyRunning))
	}
	{
		const prefix string = ",\"StopAfter\":"
		out.RawString(prefix)
		out.Int64(int64(in.StopAfter))
	}
	{
		const prefix string = ",\"LimitVaultSpeedBps\":"
		out.RawString(prefix)
		out.Int64(int64(in.LimitVaultSpeedBps))
	}
	{
		const prefix string = ",\"ReduceDiskConcurrency\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReduceDiskConcurrency))
	}
	{
		const prefix string = ",\"UseOnDiskIndexes\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseOnDiskIndexes))
	}
	{
		const prefix string = ",\"AllowZeroFilesSuccess\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowZeroFilesSuccess))
	}
	{
		const prefix string = ",\"AutoRetentionLevel\":"
		out.RawString(prefix)
		out.Int64(int64(in.AutoRetentionLevel))
	}
	{
		const prefix string = ",\"ConcurrencyCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.ConcurrencyCount))
	}
	{
		const prefix string = ",\"LogLevel\":"
		out.RawString(prefix)
		out.String(string(in.LogLevel))
	}
	{
		const prefix string = ",\"Schedules\":"
		out.RawString(prefix)
		if in.Schedules == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v407, v408 := range in.Schedules {
				if v407 > 0 {
					out.RawByte(',')
				}
				(v408).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"EventTriggers\":"
		out.RawString(prefix)
		(in.EventTriggers).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackupRuleConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode228(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackupRuleConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode228(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackupRuleConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode228(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackupRuleConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode228(l, v)
}
func easyjsonB7f3de24Decode229(in *jlexer.Lexer, out *BackupJobProgress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Counter":
			out.Counter = int64(in.Int64())
		case "SentTime":
			out.SentTime = int64(in.Int64())
		case "RecievedTime":
			out.RecievedTime = int64(in.Int64())
		case "BytesDone":
			out.BytesDone = int64(in.Int64())
		case "ItemsDone":
			out.ItemsDone = int64(in.Int64())
		case "ItemsTotal":
			out.ItemsTotal = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode229(out *jwriter.Writer, in BackupJobProgress) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Counter\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Counter))
	}
	{
		const prefix string = ",\"SentTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.SentTime))
	}
	{
		const prefix string = ",\"RecievedTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.RecievedTime))
	}
	{
		const prefix string = ",\"BytesDone\":"
		out.RawString(prefix)
		out.Int64(int64(in.BytesDone))
	}
	{
		const prefix string = ",\"ItemsDone\":"
		out.RawString(prefix)
		out.Int64(int64(in.ItemsDone))
	}
	{
		const prefix string = ",\"ItemsTotal\":"
		out.RawString(prefix)
		out.Int64(int64(in.ItemsTotal))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackupJobProgress) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode229(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackupJobProgress) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode229(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackupJobProgress) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode229(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackupJobProgress) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode229(l, v)
}
func easyjsonB7f3de24Decode230(in *jlexer.Lexer, out *BackupJobDetail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GUID":
			out.GUID = string(in.String())
		case "Username":
			out.Username = string(in.String())
		case "Classification":
			out.Classification = JobClassification(in.Uint64())
		case "Status":
			out.Status = JobStatus(in.Uint64())
		case "StartTime":
			out.StartTime = int64(in.Int64())
		case "EndTime":
			out.EndTime = int64(in.Int64())
		case "RetryCount":
			out.RetryCount = int64(in.Int64())
		case "SourceGUID":
			out.SourceGUID = string(in.String())
		case "DestinationGUID":
			out.DestinationGUID = string(in.String())
		case "DeviceID":
			out.DeviceID = string(in.String())
		case "SnapshotID":
			out.SnapshotID = string(in.String())
		case "BackupRuleGUID":
			out.BackupRuleGUID = string(in.String())
		case "ClientVersion":
			out.ClientVersion = string(in.String())
		case "TotalDirectories":
			out.TotalDirectories = int64(in.Int64())
		case "TotalFiles":
			out.TotalFiles = int64(in.Int64())
		case "TotalSize":
			out.TotalSize = int64(in.Int64())
		case "TotalChunks":
			out.TotalChunks = int64(in.Int64())
		case "UploadSize":
			out.UploadSize = int64(in.Int64())
		case "DownloadSize":
			out.DownloadSize = int64(in.Int64())
		case "TotalVmCount":
			out.TotalVmCount = int64(in.Int64())
		case "TotalMailsCount":
			out.TotalMailsCount = int64(in.Int64())
		case "TotalSitesCount":
			out.TotalSitesCount = int64(in.Int64())
		case "TotalAccountsCount":
			out.TotalAccountsCount = int64(in.Int64())
		case "TotalLicensedMailsCount":
			out.TotalLicensedMailsCount = int64(in.Int64())
		case "TotalUnlicensedMailsCount":
			out.TotalUnlicensedMailsCount = int64(in.Int64())
		case "BillingCrc32":
			out.BillingCrc32 = uint32(in.Uint32())
		case "ConflictingJobID":
			out.ConflictingJobID = string(in.String())
		case "CancellationID":
			out.CancellationID = string(in.String())
		case "Progress":
			(out.Progress).UnmarshalEasyJSON(in)
		case "DestinationSizeStart":
			(out.DestinationSizeStart).UnmarshalEasyJSON(in)
		case "DestinationSizeEnd":
			(out.DestinationSizeEnd).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode230(out *jwriter.Writer, in BackupJobDetail) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"GUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.GUID))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Classification\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Classification))
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Status))
	}
	{
		const prefix string = ",\"StartTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartTime))
	}
	{
		const prefix string = ",\"EndTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndTime))
	}
	{
		const prefix string = ",\"RetryCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.RetryCount))
	}
	{
		const prefix string = ",\"SourceGUID\":"
		out.RawString(prefix)
		out.String(string(in.SourceGUID))
	}
	{
		const prefix string = ",\"DestinationGUID\":"
		out.RawString(prefix)
		out.String(string(in.DestinationGUID))
	}
	{
		const prefix string = ",\"DeviceID\":"
		out.RawString(prefix)
		out.String(string(in.DeviceID))
	}
	if in.SnapshotID != "" {
		const prefix string = ",\"SnapshotID\":"
		out.RawString(prefix)
		out.String(string(in.SnapshotID))
	}
	if in.BackupRuleGUID != "" {
		const prefix string = ",\"BackupRuleGUID\":"
		out.RawString(prefix)
		out.String(string(in.BackupRuleGUID))
	}
	{
		const prefix string = ",\"ClientVersion\":"
		out.RawString(prefix)
		out.String(string(in.ClientVersion))
	}
	{
		const prefix string = ",\"TotalDirectories\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalDirectories))
	}
	{
		const prefix string = ",\"TotalFiles\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalFiles))
	}
	{
		const prefix string = ",\"TotalSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalSize))
	}
	{
		const prefix string = ",\"TotalChunks\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalChunks))
	}
	{
		const prefix string = ",\"UploadSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.UploadSize))
	}
	{
		const prefix string = ",\"DownloadSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.DownloadSize))
	}
	if in.TotalVmCount != 0 {
		const prefix string = ",\"TotalVmCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalVmCount))
	}
	if in.TotalMailsCount != 0 {
		const prefix string = ",\"TotalMailsCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalMailsCount))
	}
	if in.TotalSitesCount != 0 {
		const prefix string = ",\"TotalSitesCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalSitesCount))
	}
	if in.TotalAccountsCount != 0 {
		const prefix string = ",\"TotalAccountsCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalAccountsCount))
	}
	if in.TotalLicensedMailsCount != 0 {
		const prefix string = ",\"TotalLicensedMailsCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalLicensedMailsCount))
	}
	if in.TotalUnlicensedMailsCount != 0 {
		const prefix string = ",\"TotalUnlicensedMailsCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalUnlicensedMailsCount))
	}
	if in.BillingCrc32 != 0 {
		const prefix string = ",\"BillingCrc32\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.BillingCrc32))
	}
	if in.ConflictingJobID != "" {
		const prefix string = ",\"ConflictingJobID\":"
		out.RawString(prefix)
		out.String(string(in.ConflictingJobID))
	}
	if in.CancellationID != "" {
		const prefix string = ",\"CancellationID\":"
		out.RawString(prefix)
		out.String(string(in.CancellationID))
	}
	if true {
		const prefix string = ",\"Progress\":"
		out.RawString(prefix)
		(in.Progress).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"DestinationSizeStart\":"
		out.RawString(prefix)
		(in.DestinationSizeStart).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"DestinationSizeEnd\":"
		out.RawString(prefix)
		(in.DestinationSizeEnd).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackupJobDetail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode230(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackupJobDetail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode230(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackupJobDetail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode230(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackupJobDetail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode230(l, v)
}
func easyjsonB7f3de24Decode231(in *jlexer.Lexer, out *BackupJobAdvancedOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SkipAlreadyRunning":
			out.SkipAlreadyRunning = bool(in.Bool())
		case "StopAfter":
			out.StopAfter = int64(in.Int64())
		case "LimitVaultSpeedBps":
			out.LimitVaultSpeedBps = int64(in.Int64())
		case "ReduceDiskConcurrency":
			out.ReduceDiskConcurrency = bool(in.Bool())
		case "UseOnDiskIndexes":
			out.UseOnDiskIndexes = bool(in.Bool())
		case "AllowZeroFilesSuccess":
			out.AllowZeroFilesSuccess = bool(in.Bool())
		case "AutoRetentionLevel":
			out.AutoRetentionLevel = AutoRetentionLevel(in.Int64())
		case "ConcurrencyCount":
			out.ConcurrencyCount = int64(in.Int64())
		case "LogLevel":
			out.LogLevel = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode231(out *jwriter.Writer, in BackupJobAdvancedOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SkipAlreadyRunning\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.SkipAlreadyRunning))
	}
	{
		const prefix string = ",\"StopAfter\":"
		out.RawString(prefix)
		out.Int64(int64(in.StopAfter))
	}
	{
		const prefix string = ",\"LimitVaultSpeedBps\":"
		out.RawString(prefix)
		out.Int64(int64(in.LimitVaultSpeedBps))
	}
	{
		const prefix string = ",\"ReduceDiskConcurrency\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReduceDiskConcurrency))
	}
	{
		const prefix string = ",\"UseOnDiskIndexes\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseOnDiskIndexes))
	}
	{
		const prefix string = ",\"AllowZeroFilesSuccess\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowZeroFilesSuccess))
	}
	{
		const prefix string = ",\"AutoRetentionLevel\":"
		out.RawString(prefix)
		out.Int64(int64(in.AutoRetentionLevel))
	}
	{
		const prefix string = ",\"ConcurrencyCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.ConcurrencyCount))
	}
	{
		const prefix string = ",\"LogLevel\":"
		out.RawString(prefix)
		out.String(string(in.LogLevel))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BackupJobAdvancedOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode231(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BackupJobAdvancedOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode231(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BackupJobAdvancedOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode231(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BackupJobAdvancedOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode231(l, v)
}
func easyjsonB7f3de24Decode232(in *jlexer.Lexer, out *B2VirtualStorageRoleSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MasterBucket":
			out.MasterBucket = string(in.String())
		case "KeyID":
			out.KeyID = string(in.String())
		case "AppKey":
			out.AppKey = string(in.String())
		case "HideDeletedFiles":
			out.HideDeletedFiles = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode232(out *jwriter.Writer, in B2VirtualStorageRoleSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MasterBucket\":"
		out.RawString(prefix[1:])
		out.String(string(in.MasterBucket))
	}
	{
		const prefix string = ",\"KeyID\":"
		out.RawString(prefix)
		out.String(string(in.KeyID))
	}
	{
		const prefix string = ",\"AppKey\":"
		out.RawString(prefix)
		out.String(string(in.AppKey))
	}
	{
		const prefix string = ",\"HideDeletedFiles\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideDeletedFiles))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v B2VirtualStorageRoleSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode232(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v B2VirtualStorageRoleSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode232(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *B2VirtualStorageRoleSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode232(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *B2VirtualStorageRoleSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode232(l, v)
}
func easyjsonB7f3de24Decode233(in *jlexer.Lexer, out *B2TransactionTotals) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ClassA":
			out.ClassA = int64(in.Int64())
		case "ClassB":
			out.ClassB = int64(in.Int64())
		case "ClassC":
			out.ClassC = int64(in.Int64())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode233(out *jwriter.Writer, in B2TransactionTotals) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ClassA\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ClassA))
	}
	{
		const prefix string = ",\"ClassB\":"
		out.RawString(prefix)
		out.Int64(int64(in.ClassB))
	}
	{
		const prefix string = ",\"ClassC\":"
		out.RawString(prefix)
		out.Int64(int64(in.ClassC))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v B2TransactionTotals) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode233(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v B2TransactionTotals) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode233(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *B2TransactionTotals) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode233(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *B2TransactionTotals) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode233(l, v)
}
func easyjsonB7f3de24Decode234(in *jlexer.Lexer, out *B2StorageExtraInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TotalTransactionsInTimeInterval":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TotalTransactionsInTimeInterval = make(map[int64]B2TransactionTotals)
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v409 B2TransactionTotals
					(v409).UnmarshalEasyJSON(in)
					(out.TotalTransactionsInTimeInterval)[key] = v409
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode234(out *jwriter.Writer, in B2StorageExtraInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TotalTransactionsInTimeInterval\":"
		out.RawString(prefix[1:])
		if in.TotalTransactionsInTimeInterval == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v410First := true
			for v410Name, v410Value := range in.TotalTransactionsInTimeInterval {
				if v410First {
					v410First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v410Name))
				out.RawByte(':')
				(v410Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v B2StorageExtraInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode234(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v B2StorageExtraInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode234(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *B2StorageExtraInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode234(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *B2StorageExtraInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode234(l, v)
}
func easyjsonB7f3de24Decode235(in *jlexer.Lexer, out *B2DestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AccountID":
			out.AccountID = string(in.String())
		case "Key":
			out.Key = string(in.String())
		case "Bucket":
			out.Bucket = string(in.String())
		case "Prefix":
			out.Prefix = string(in.String())
		case "MaxConnections":
			out.MaxConnections = int(in.Int())
		case "HideDeletedFiles":
			out.HideDeletedFiles = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode235(out *jwriter.Writer, in B2DestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccountID != "" {
		const prefix string = ",\"AccountID\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.AccountID))
	}
	if in.Key != "" {
		const prefix string = ",\"Key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	if in.Bucket != "" {
		const prefix string = ",\"Bucket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bucket))
	}
	if in.Prefix != "" {
		const prefix string = ",\"Prefix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prefix))
	}
	if in.MaxConnections != 0 {
		const prefix string = ",\"MaxConnections\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxConnections))
	}
	if in.HideDeletedFiles {
		const prefix string = ",\"HideDeletedFiles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HideDeletedFiles))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v B2DestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode235(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v B2DestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode235(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *B2DestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode235(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *B2DestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode235(l, v)
}
func easyjsonB7f3de24Decode236(in *jlexer.Lexer, out *AzureDestinationLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AZBAccountName":
			out.AZBAccountName = string(in.String())
		case "AZBAccountKey":
			out.AZBAccountKey = string(in.String())
		case "AZBContainer":
			out.AZBContainer = string(in.String())
		case "AZBRealm":
			out.AZBRealm = string(in.String())
		case "AZBPrefix":
			out.AZBPrefix = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode236(out *jwriter.Writer, in AzureDestinationLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AZBAccountName\":"
		out.RawString(prefix[1:])
		out.String(string(in.AZBAccountName))
	}
	{
		const prefix string = ",\"AZBAccountKey\":"
		out.RawString(prefix)
		out.String(string(in.AZBAccountKey))
	}
	{
		const prefix string = ",\"AZBContainer\":"
		out.RawString(prefix)
		out.String(string(in.AZBContainer))
	}
	{
		const prefix string = ",\"AZBRealm\":"
		out.RawString(prefix)
		out.String(string(in.AZBRealm))
	}
	{
		const prefix string = ",\"AZBPrefix\":"
		out.RawString(prefix)
		out.String(string(in.AZBPrefix))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AzureDestinationLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode236(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AzureDestinationLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode236(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AzureDestinationLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode236(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AzureDestinationLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode236(l, v)
}
func easyjsonB7f3de24Decode237(in *jlexer.Lexer, out *AvailableDownload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Category":
			out.Category = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Recommended":
			out.Recommended = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode237(out *jwriter.Writer, in AvailableDownload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Category\":"
		out.RawString(prefix[1:])
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Recommended\":"
		out.RawString(prefix)
		out.Bool(bool(in.Recommended))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AvailableDownload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode237(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AvailableDownload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode237(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AvailableDownload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode237(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AvailableDownload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode237(l, v)
}
func easyjsonB7f3de24Decode238(in *jlexer.Lexer, out *AuthenticationRoleOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RoleEnabled":
			out.RoleEnabled = bool(in.Bool())
		case "DatabaseCheckLevel":
			out.DatabaseCheckLevel = int(in.Int())
		case "GenerateMissedBackupEvents":
			out.GenerateMissedBackupEvents = bool(in.Bool())
		case "NoMissedBackupEventsBefore":
			out.NoMissedBackupEventsBefore = int64(in.Int64())
		case "GenerateScheduledEmails":
			out.GenerateScheduledEmails = bool(in.Bool())
		case "PruneLogsAfterDays":
			out.PruneLogsAfterDays = int(in.Int())
		case "RemoteStorage":
			if in.IsNull() {
				in.Skip()
				out.RemoteStorage = nil
			} else {
				in.Delim('[')
				if out.RemoteStorage == nil {
					if !in.IsDelim(']') {
						out.RemoteStorage = make([]RemoteStorageOption, 0, 0)
					} else {
						out.RemoteStorage = []RemoteStorageOption{}
					}
				} else {
					out.RemoteStorage = (out.RemoteStorage)[:0]
				}
				for !in.IsDelim(']') {
					var v411 RemoteStorageOption
					(v411).UnmarshalEasyJSON(in)
					out.RemoteStorage = append(out.RemoteStorage, v411)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ReplicateTo":
			if in.IsNull() {
				in.Skip()
				out.ReplicateTo = nil
			} else {
				in.Delim('[')
				if out.ReplicateTo == nil {
					if !in.IsDelim(']') {
						out.ReplicateTo = make([]ReplicaServer, 0, 0)
					} else {
						out.ReplicateTo = []ReplicaServer{}
					}
				} else {
					out.ReplicateTo = (out.ReplicateTo)[:0]
				}
				for !in.IsDelim(']') {
					var v412 ReplicaServer
					(v412).UnmarshalEasyJSON(in)
					out.ReplicateTo = append(out.ReplicateTo, v412)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GlobalOverrides":
			(out.GlobalOverrides).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode238(out *jwriter.Writer, in AuthenticationRoleOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"RoleEnabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.RoleEnabled))
	}
	{
		const prefix string = ",\"DatabaseCheckLevel\":"
		out.RawString(prefix)
		out.Int(int(in.DatabaseCheckLevel))
	}
	{
		const prefix string = ",\"GenerateMissedBackupEvents\":"
		out.RawString(prefix)
		out.Bool(bool(in.GenerateMissedBackupEvents))
	}
	{
		const prefix string = ",\"NoMissedBackupEventsBefore\":"
		out.RawString(prefix)
		out.Int64(int64(in.NoMissedBackupEventsBefore))
	}
	{
		const prefix string = ",\"GenerateScheduledEmails\":"
		out.RawString(prefix)
		out.Bool(bool(in.GenerateScheduledEmails))
	}
	{
		const prefix string = ",\"PruneLogsAfterDays\":"
		out.RawString(prefix)
		out.Int(int(in.PruneLogsAfterDays))
	}
	{
		const prefix string = ",\"RemoteStorage\":"
		out.RawString(prefix)
		if in.RemoteStorage == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v413, v414 := range in.RemoteStorage {
				if v413 > 0 {
					out.RawByte(',')
				}
				(v414).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ReplicateTo\":"
		out.RawString(prefix)
		if in.ReplicateTo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v415, v416 := range in.ReplicateTo {
				if v415 > 0 {
					out.RawByte(',')
				}
				(v416).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"GlobalOverrides\":"
		out.RawString(prefix)
		(in.GlobalOverrides).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthenticationRoleOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode238(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthenticationRoleOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode238(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthenticationRoleOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode238(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthenticationRoleOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode238(l, v)
}
func easyjsonB7f3de24Decode239(in *jlexer.Lexer, out *AmazonAWSVirtualStorageRoleSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MasterBucket":
			out.MasterBucket = string(in.String())
		case "AccessKey":
			out.AccessKey = string(in.String())
		case "SecretKey":
			out.SecretKey = string(in.String())
		case "UseObjectLock":
			out.UseObjectLock_Legacy_DoNotUse = bool(in.Bool())
		case "ObjectLockMode":
			out.ObjectLockMode = uint8(in.Uint8())
		case "ObjectLockDays":
			out.ObjectLockDays = int(in.Int())
		case "RemoveDeleted":
			out.RemoveDeleted = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode239(out *jwriter.Writer, in AmazonAWSVirtualStorageRoleSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MasterBucket\":"
		out.RawString(prefix[1:])
		out.String(string(in.MasterBucket))
	}
	{
		const prefix string = ",\"AccessKey\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"SecretKey\":"
		out.RawString(prefix)
		out.String(string(in.SecretKey))
	}
	{
		const prefix string = ",\"UseObjectLock\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseObjectLock_Legacy_DoNotUse))
	}
	{
		const prefix string = ",\"ObjectLockMode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ObjectLockMode))
	}
	{
		const prefix string = ",\"ObjectLockDays\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectLockDays))
	}
	{
		const prefix string = ",\"RemoveDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.RemoveDeleted))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AmazonAWSVirtualStorageRoleSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode239(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AmazonAWSVirtualStorageRoleSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode239(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AmazonAWSVirtualStorageRoleSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode239(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AmazonAWSVirtualStorageRoleSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode239(l, v)
}
func easyjsonB7f3de24Decode240(in *jlexer.Lexer, out *AllowedAdminUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "OrganizationID":
			out.OrganizationID = string(in.String())
		case "ExternalAuthenticationSource":
			out.ExternalAuthenticationSource = string(in.String())
		case "PasswordFormat":
			out.PasswordFormat = int(in.Int())
		case "Password":
			out.Password = string(in.String())
		case "AllowPasswordLogin":
			out.AllowPasswordLogin = bool(in.Bool())
		case "AllowPasswordAndTOTPLogin":
			out.AllowPasswordAndTOTPLogin = bool(in.Bool())
		case "AllowPasswordAndU2FLogin":
			out.AllowPasswordAndU2FLogin = bool(in.Bool())
		case "AllowPasswordAndWebAuthnLogin":
			out.AllowPasswordAndWebAuthnLogin = bool(in.Bool())
		case "U2FRegistrations":
			if in.IsNull() {
				in.Skip()
				out.U2FRegistrations = nil
			} else {
				in.Delim('[')
				if out.U2FRegistrations == nil {
					if !in.IsDelim(']') {
						out.U2FRegistrations = make([]AdminU2FRegistration, 0, 1)
					} else {
						out.U2FRegistrations = []AdminU2FRegistration{}
					}
				} else {
					out.U2FRegistrations = (out.U2FRegistrations)[:0]
				}
				for !in.IsDelim(']') {
					var v417 AdminU2FRegistration
					(v417).UnmarshalEasyJSON(in)
					out.U2FRegistrations = append(out.U2FRegistrations, v417)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "WebAuthnRegistrations":
			if in.IsNull() {
				in.Skip()
				out.WebAuthnRegistrations = nil
			} else {
				in.Delim('[')
				if out.WebAuthnRegistrations == nil {
					if !in.IsDelim(']') {
						out.WebAuthnRegistrations = make([]AdminWebAuthnRegistration, 0, 0)
					} else {
						out.WebAuthnRegistrations = []AdminWebAuthnRegistration{}
					}
				} else {
					out.WebAuthnRegistrations = (out.WebAuthnRegistrations)[:0]
				}
				for !in.IsDelim(']') {
					var v418 AdminWebAuthnRegistration
					(v418).UnmarshalEasyJSON(in)
					out.WebAuthnRegistrations = append(out.WebAuthnRegistrations, v418)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RequirePasswordChange":
			out.RequirePasswordChange = bool(in.Bool())
		case "TOTPKeyEncryptionFormat":
			out.TOTPKeyEncryptionFormat = int(in.Int())
		case "TOTPKey":
			out.TOTPKey = string(in.String())
		case "IPWhitelist":
			out.IPWhitelist = string(in.String())
		case "Permissions":
			(out.Permissions).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode240(out *jwriter.Writer, in AllowedAdminUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"OrganizationID\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationID))
	}
	if in.ExternalAuthenticationSource != "" {
		const prefix string = ",\"ExternalAuthenticationSource\":"
		out.RawString(prefix)
		out.String(string(in.ExternalAuthenticationSource))
	}
	{
		const prefix string = ",\"PasswordFormat\":"
		out.RawString(prefix)
		out.Int(int(in.PasswordFormat))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"AllowPasswordLogin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowPasswordLogin))
	}
	{
		const prefix string = ",\"AllowPasswordAndTOTPLogin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowPasswordAndTOTPLogin))
	}
	{
		const prefix string = ",\"AllowPasswordAndU2FLogin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowPasswordAndU2FLogin))
	}
	{
		const prefix string = ",\"AllowPasswordAndWebAuthnLogin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowPasswordAndWebAuthnLogin))
	}
	if len(in.U2FRegistrations) != 0 {
		const prefix string = ",\"U2FRegistrations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v419, v420 := range in.U2FRegistrations {
				if v419 > 0 {
					out.RawByte(',')
				}
				(v420).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.WebAuthnRegistrations) != 0 {
		const prefix string = ",\"WebAuthnRegistrations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v421, v422 := range in.WebAuthnRegistrations {
				if v421 > 0 {
					out.RawByte(',')
				}
				(v422).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"RequirePasswordChange\":"
		out.RawString(prefix)
		out.Bool(bool(in.RequirePasswordChange))
	}
	if in.TOTPKeyEncryptionFormat != 0 {
		const prefix string = ",\"TOTPKeyEncryptionFormat\":"
		out.RawString(prefix)
		out.Int(int(in.TOTPKeyEncryptionFormat))
	}
	if in.TOTPKey != "" {
		const prefix string = ",\"TOTPKey\":"
		out.RawString(prefix)
		out.String(string(in.TOTPKey))
	}
	if in.IPWhitelist != "" {
		const prefix string = ",\"IPWhitelist\":"
		out.RawString(prefix)
		out.String(string(in.IPWhitelist))
	}
	{
		const prefix string = ",\"Permissions\":"
		out.RawString(prefix)
		(in.Permissions).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllowedAdminUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode240(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllowedAdminUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode240(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllowedAdminUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode240(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllowedAdminUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode240(l, v)
}
func easyjsonB7f3de24Decode241(in *jlexer.Lexer, out *AdminWebAuthnRegistration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Description":
			out.Description = string(in.String())
		case "RegisterTime":
			out.RegisterTime = int64(in.Int64())
		case "Type":
			out.Type = WebAuthnDeviceType(in.Int())
		case "IsLegacyU2F":
			out.IsLegacyU2F = bool(in.Bool())
		case "ID":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				out.ID = in.Bytes()
			}
		case "Credential":
			(out.Credential).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode241(out *jwriter.Writer, in AdminWebAuthnRegistration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"RegisterTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.RegisterTime))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	if in.IsLegacyU2F {
		const prefix string = ",\"IsLegacyU2F\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLegacyU2F))
	}
	if len(in.ID) != 0 {
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Base64Bytes(in.ID)
	}
	if true {
		const prefix string = ",\"Credential\":"
		out.RawString(prefix)
		(in.Credential).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdminWebAuthnRegistration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode241(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdminWebAuthnRegistration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode241(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdminWebAuthnRegistration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode241(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdminWebAuthnRegistration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode241(l, v)
}
func easyjsonB7f3de24Decode242(in *jlexer.Lexer, out *AdminUserPermissions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PreventEditServerSettings":
			out.PreventEditServerSettings = bool(in.Bool())
		case "PreventServerShutdown":
			out.PreventServerShutdown = bool(in.Bool())
		case "PreventChangePassword":
			out.PreventChangePassword = bool(in.Bool())
		case "AllowEditBranding":
			out.AllowEditBranding = bool(in.Bool())
		case "AllowEditEmailOptions":
			out.AllowEditEmailOptions = bool(in.Bool())
		case "AllowEditRemoteStorage":
			out.AllowEditRemoteStorage = bool(in.Bool())
		case "AllowEditWebhooks":
			out.AllowEditWebhooks = bool(in.Bool())
		case "AllowEditExternalAuthSources":
			out.AllowEditExternalAuthSources = bool(in.Bool())
		case "DenyConstellationRole":
			out.DenyConstellationRole = bool(in.Bool())
		case "DenyViewServerHistory":
			out.DenyViewServerHistory = bool(in.Bool())
		case "DenyViewServerInfo":
			out.DenyViewServerInfo = bool(in.Bool())
		case "PreventDeleteStorageVault":
			out.PreventDeleteStorageVault = bool(in.Bool())
		case "PreventRequestStorageVault":
			out.PreventRequestStorageVault = bool(in.Bool())
		case "PreventAddCustomStorageVault":
			out.PreventAddCustomStorageVault = bool(in.Bool())
		case "HideCloudStorageBranding":
			out.HideCloudStorageBranding = bool(in.Bool())
		case "ShouldRestrictProviderList":
			out.ShouldRestrictProviderList = bool(in.Bool())
		case "AllowedProvidersWhenRestricted":
			if in.IsNull() {
				in.Skip()
				out.AllowedProvidersWhenRestricted = nil
			} else {
				in.Delim('[')
				if out.AllowedProvidersWhenRestricted == nil {
					if !in.IsDelim(']') {
						out.AllowedProvidersWhenRestricted = make([]uint64, 0, 8)
					} else {
						out.AllowedProvidersWhenRestricted = []uint64{}
					}
				} else {
					out.AllowedProvidersWhenRestricted = (out.AllowedProvidersWhenRestricted)[:0]
				}
				for !in.IsDelim(']') {
					var v426 uint64
					v426 = uint64(in.Uint64())
					out.AllowedProvidersWhenRestricted = append(out.AllowedProvidersWhenRestricted, v426)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AllowedUserPolicies":
			if in.IsNull() {
				in.Skip()
				out.AllowedUserPolicies = nil
			} else {
				in.Delim('[')
				if out.AllowedUserPolicies == nil {
					if !in.IsDelim(']') {
						out.AllowedUserPolicies = make([]string, 0, 4)
					} else {
						out.AllowedUserPolicies = []string{}
					}
				} else {
					out.AllowedUserPolicies = (out.AllowedUserPolicies)[:0]
				}
				for !in.IsDelim(']') {
					var v427 string
					v427 = string(in.String())
					out.AllowedUserPolicies = append(out.AllowedUserPolicies, v427)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DenySoftwareBuildRole":
			out.DenySoftwareBuildRole = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode242(out *jwriter.Writer, in AdminUserPermissions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PreventEditServerSettings {
		const prefix string = ",\"PreventEditServerSettings\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.PreventEditServerSettings))
	}
	if in.PreventServerShutdown {
		const prefix string = ",\"PreventServerShutdown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.PreventServerShutdown))
	}
	if in.PreventChangePassword {
		const prefix string = ",\"PreventChangePassword\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.PreventChangePassword))
	}
	if in.AllowEditBranding {
		const prefix string = ",\"AllowEditBranding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AllowEditBranding))
	}
	if in.AllowEditEmailOptions {
		const prefix string = ",\"AllowEditEmailOptions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AllowEditEmailOptions))
	}
	if in.AllowEditRemoteStorage {
		const prefix string = ",\"AllowEditRemoteStorage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AllowEditRemoteStorage))
	}
	if in.AllowEditWebhooks {
		const prefix string = ",\"AllowEditWebhooks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AllowEditWebhooks))
	}
	if in.AllowEditExternalAuthSources {
		const prefix string = ",\"AllowEditExternalAuthSources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AllowEditExternalAuthSources))
	}
	if in.DenyConstellationRole {
		const prefix string = ",\"DenyConstellationRole\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DenyConstellationRole))
	}
	if in.DenyViewServerHistory {
		const prefix string = ",\"DenyViewServerHistory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DenyViewServerHistory))
	}
	if in.DenyViewServerInfo {
		const prefix string = ",\"DenyViewServerInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DenyViewServerInfo))
	}
	if in.PreventDeleteStorageVault {
		const prefix string = ",\"PreventDeleteStorageVault\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.PreventDeleteStorageVault))
	}
	if in.PreventRequestStorageVault {
		const prefix string = ",\"PreventRequestStorageVault\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.PreventRequestStorageVault))
	}
	if in.PreventAddCustomStorageVault {
		const prefix string = ",\"PreventAddCustomStorageVault\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.PreventAddCustomStorageVault))
	}
	if in.HideCloudStorageBranding {
		const prefix string = ",\"HideCloudStorageBranding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HideCloudStorageBranding))
	}
	if in.ShouldRestrictProviderList {
		const prefix string = ",\"ShouldRestrictProviderList\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ShouldRestrictProviderList))
	}
	if len(in.AllowedProvidersWhenRestricted) != 0 {
		const prefix string = ",\"AllowedProvidersWhenRestricted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v428, v429 := range in.AllowedProvidersWhenRestricted {
				if v428 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v429))
			}
			out.RawByte(']')
		}
	}
	if len(in.AllowedUserPolicies) != 0 {
		const prefix string = ",\"AllowedUserPolicies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v430, v431 := range in.AllowedUserPolicies {
				if v430 > 0 {
					out.RawByte(',')
				}
				out.String(string(v431))
			}
			out.RawByte(']')
		}
	}
	if in.DenySoftwareBuildRole {
		const prefix string = ",\"DenySoftwareBuildRole\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DenySoftwareBuildRole))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdminUserPermissions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode242(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdminUserPermissions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode242(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdminUserPermissions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode242(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdminUserPermissions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode242(l, v)
}
func easyjsonB7f3de24Decode243(in *jlexer.Lexer, out *AdminU2FRegistration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Description":
			out.Description = string(in.String())
		case "RegisterTime":
			out.RegisterTime = int64(in.Int64())
		case "Registration":
			if in.IsNull() {
				in.Skip()
				out.Registration = nil
			} else {
				out.Registration = in.Bytes()
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode243(out *jwriter.Writer, in AdminU2FRegistration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"RegisterTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.RegisterTime))
	}
	{
		const prefix string = ",\"Registration\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Registration)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdminU2FRegistration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode243(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdminU2FRegistration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode243(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdminU2FRegistration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode243(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdminU2FRegistration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode243(l, v)
}
func easyjsonB7f3de24Decode244(in *jlexer.Lexer, out *AdminSecurityOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PasswordFormat":
			out.PasswordFormat = int(in.Int())
		case "Password":
			out.Password = string(in.String())
		case "AllowPasswordLogin":
			out.AllowPasswordLogin = bool(in.Bool())
		case "AllowPasswordAndTOTPLogin":
			out.AllowPasswordAndTOTPLogin = bool(in.Bool())
		case "AllowPasswordAndU2FLogin":
			out.AllowPasswordAndU2FLogin = bool(in.Bool())
		case "AllowPasswordAndWebAuthnLogin":
			out.AllowPasswordAndWebAuthnLogin = bool(in.Bool())
		case "U2FRegistrations":
			if in.IsNull() {
				in.Skip()
				out.U2FRegistrations = nil
			} else {
				in.Delim('[')
				if out.U2FRegistrations == nil {
					if !in.IsDelim(']') {
						out.U2FRegistrations = make([]AdminU2FRegistration, 0, 1)
					} else {
						out.U2FRegistrations = []AdminU2FRegistration{}
					}
				} else {
					out.U2FRegistrations = (out.U2FRegistrations)[:0]
				}
				for !in.IsDelim(']') {
					var v435 AdminU2FRegistration
					(v435).UnmarshalEasyJSON(in)
					out.U2FRegistrations = append(out.U2FRegistrations, v435)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "WebAuthnRegistrations":
			if in.IsNull() {
				in.Skip()
				out.WebAuthnRegistrations = nil
			} else {
				in.Delim('[')
				if out.WebAuthnRegistrations == nil {
					if !in.IsDelim(']') {
						out.WebAuthnRegistrations = make([]AdminWebAuthnRegistration, 0, 0)
					} else {
						out.WebAuthnRegistrations = []AdminWebAuthnRegistration{}
					}
				} else {
					out.WebAuthnRegistrations = (out.WebAuthnRegistrations)[:0]
				}
				for !in.IsDelim(']') {
					var v436 AdminWebAuthnRegistration
					(v436).UnmarshalEasyJSON(in)
					out.WebAuthnRegistrations = append(out.WebAuthnRegistrations, v436)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RequirePasswordChange":
			out.RequirePasswordChange = bool(in.Bool())
		case "TOTPKeyEncryptionFormat":
			out.TOTPKeyEncryptionFormat = int(in.Int())
		case "TOTPKey":
			out.TOTPKey = string(in.String())
		case "IPWhitelist":
			out.IPWhitelist = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode244(out *jwriter.Writer, in AdminSecurityOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PasswordFormat\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PasswordFormat))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"AllowPasswordLogin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowPasswordLogin))
	}
	{
		const prefix string = ",\"AllowPasswordAndTOTPLogin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowPasswordAndTOTPLogin))
	}
	{
		const prefix string = ",\"AllowPasswordAndU2FLogin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowPasswordAndU2FLogin))
	}
	{
		const prefix string = ",\"AllowPasswordAndWebAuthnLogin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowPasswordAndWebAuthnLogin))
	}
	if len(in.U2FRegistrations) != 0 {
		const prefix string = ",\"U2FRegistrations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v437, v438 := range in.U2FRegistrations {
				if v437 > 0 {
					out.RawByte(',')
				}
				(v438).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.WebAuthnRegistrations) != 0 {
		const prefix string = ",\"WebAuthnRegistrations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v439, v440 := range in.WebAuthnRegistrations {
				if v439 > 0 {
					out.RawByte(',')
				}
				(v440).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"RequirePasswordChange\":"
		out.RawString(prefix)
		out.Bool(bool(in.RequirePasswordChange))
	}
	if in.TOTPKeyEncryptionFormat != 0 {
		const prefix string = ",\"TOTPKeyEncryptionFormat\":"
		out.RawString(prefix)
		out.Int(int(in.TOTPKeyEncryptionFormat))
	}
	if in.TOTPKey != "" {
		const prefix string = ",\"TOTPKey\":"
		out.RawString(prefix)
		out.String(string(in.TOTPKey))
	}
	if in.IPWhitelist != "" {
		const prefix string = ",\"IPWhitelist\":"
		out.RawString(prefix)
		out.String(string(in.IPWhitelist))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdminSecurityOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode244(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdminSecurityOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode244(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdminSecurityOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode244(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdminSecurityOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode244(l, v)
}
func easyjsonB7f3de24Decode245(in *jlexer.Lexer, out *AdminResourceResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "ResourceHash":
			out.ResourceHash = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode245(out *jwriter.Writer, in AdminResourceResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"ResourceHash\":"
		out.RawString(prefix)
		out.String(string(in.ResourceHash))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdminResourceResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode245(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdminResourceResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode245(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdminResourceResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode245(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdminResourceResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode245(l, v)
}
func easyjsonB7f3de24Decode246(in *jlexer.Lexer, out *AdminOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Policy":
			(out.Policy).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode246(out *jwriter.Writer, in AdminOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Policy\":"
		out.RawString(prefix[1:])
		(in.Policy).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdminOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode246(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdminOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode246(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdminOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode246(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdminOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode246(l, v)
}
func easyjsonB7f3de24Decode247(in *jlexer.Lexer, out *AdminEmailOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FromEmail":
			out.FromEmail = string(in.String())
		case "FromName":
			out.FromName = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode247(out *jwriter.Writer, in AdminEmailOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FromEmail\":"
		out.RawString(prefix[1:])
		out.String(string(in.FromEmail))
	}
	{
		const prefix string = ",\"FromName\":"
		out.RawString(prefix)
		out.String(string(in.FromName))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdminEmailOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode247(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdminEmailOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode247(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdminEmailOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode247(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdminEmailOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode247(l, v)
}
func easyjsonB7f3de24Decode248(in *jlexer.Lexer, out *AdminAccountPropertiesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OrganizationID":
			out.OrganizationID = string(in.String())
		case "Permissions":
			(out.Permissions).UnmarshalEasyJSON(in)
		case "Security":
			(out.Security).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode248(out *jwriter.Writer, in AdminAccountPropertiesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OrganizationID\":"
		out.RawString(prefix[1:])
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"Permissions\":"
		out.RawString(prefix)
		(in.Permissions).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Security\":"
		out.RawString(prefix)
		(in.Security).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdminAccountPropertiesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode248(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdminAccountPropertiesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode248(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdminAccountPropertiesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode248(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdminAccountPropertiesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode248(l, v)
}
func easyjsonB7f3de24Decode249(in *jlexer.Lexer, out *AddBucketResponseMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = int(in.Int())
		case "Message":
			out.Message = string(in.String())
		case "NewBucketID":
			out.NewBucketID = string(in.String())
		case "NewBucketKey":
			out.NewBucketKey = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7f3de24Encode249(out *jwriter.Writer, in AddBucketResponseMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"NewBucketID\":"
		out.RawString(prefix)
		out.String(string(in.NewBucketID))
	}
	{
		const prefix string = ",\"NewBucketKey\":"
		out.RawString(prefix)
		out.String(string(in.NewBucketKey))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddBucketResponseMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7f3de24Encode249(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddBucketResponseMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7f3de24Encode249(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddBucketResponseMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7f3de24Decode249(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddBucketResponseMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7f3de24Decode249(l, v)
}
