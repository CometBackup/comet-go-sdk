// Autogenerated, do not edit directly
package cometsdk

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"net/url"
	"strings"
)

//
// CONSTANTS
//

const APPLICATION_VERSION string = "22.12.2"
const APPLICATION_VERSION_MAJOR int = 22
const APPLICATION_VERSION_MINOR int = 12
const APPLICATION_VERSION_REVISION int = 2

// AutoRetentionLevel: The system will automatically choose how often to run an automatic Retention
// Pass after each backup job.
const BACKUPJOBAUTORETENTION_AUTOMATIC AutoRetentionLevel = 0

// AutoRetentionLevel: The system will run a Retention Pass after every single backup job. This is
// more system-intensive, but is the most responsive at freeing storage space.
const BACKUPJOBAUTORETENTION_IMMEDIATE AutoRetentionLevel = 1

// AutoRetentionLevel: The system will follow the automatic ruleset for a 'Low Power' device.
const BACKUPJOBAUTORETENTION_LESS_OFTEN AutoRetentionLevel = 3

// AutoRetentionLevel: The system will follow the automatic ruleset for a 'High Power' device.
const BACKUPJOBAUTORETENTION_MORE_OFTEN AutoRetentionLevel = 2

// ClientBrandingBuildMode: Public-Doc: The software client will be custom-built by this Comet
// Server, allowing custom branding, default server URL, and codesigning.
const CLIENTBRANDINGBUILD_CUSTOM ClientBrandingBuildMode = 0

// ClientBrandingBuildMode: Public-Doc: A pre-built software client will be served, with
// Comet-branding, no server URL, and Comet codesigning.
const CLIENTBRANDINGBUILD_PREBUILT ClientBrandingBuildMode = 1

// CompressMode:
const COMPRESS_DEFAULT CompressMode = COMPRESS_LVL_4

// CompressMode:
const COMPRESS_INVALID CompressMode = 0

// CompressMode:
const COMPRESS_LVL_1 CompressMode = 1

// CompressMode:
const COMPRESS_LVL_2 CompressMode = 2

// CompressMode:
const COMPRESS_LVL_3 CompressMode = 3

// CompressMode:
const COMPRESS_LVL_4 CompressMode = 4

// CompressMode:
const COMPRESS_LVL_5 CompressMode = 5

// CompressMode:
const COMPRESS_MAX CompressMode = COMPRESS_LVL_5

// LanguageCode:
const DEFAULT_LANGUAGE LanguageCode = "en_US"
const DEFAULT_TIMEZONE string = "UTC"
const DESTINATIONTYPE_ALL uint64 = 1101
const DESTINATIONTYPE_AZUREBLOB uint64 = 1005
const DESTINATIONTYPE_B2 uint64 = 1008
const DESTINATIONTYPE_COMET uint64 = 1003
const DESTINATIONTYPE_FTP uint64 = 1004
const DESTINATIONTYPE_LATEST uint64 = 1100
const DESTINATIONTYPE_LOCALCOPY uint64 = 1002
const DESTINATIONTYPE_S3 uint64 = 1000
const DESTINATIONTYPE_SFTP uint64 = 1001
const DESTINATIONTYPE_SPANNED uint64 = 1006
const DESTINATIONTYPE_STORJ uint64 = 1009
const DESTINATIONTYPE_SWIFT uint64 = 1007
const DESTINATIONTYPE___INVALID uint64 = 0

// SftpAuthMode:
const DESTINATION_SFTP_AUTHMODE_NATIVE SftpAuthMode = 0

// SftpAuthMode:
const DESTINATION_SFTP_AUTHMODE_PASSWORD SftpAuthMode = 1

// SftpAuthMode:
const DESTINATION_SFTP_AUTHMODE_PRIVATEKEY SftpAuthMode = 2

// EmailReportType:
const EMAILREPORTTYPE_IMMEDIATE EmailReportType = 0

// EmailReportType:
const EMAILREPORTTYPE_SUMMARY EmailReportType = 1

// EmailDeliveryType: Legacy alias
const EMAIL_DELIVERY_BUILTIN EmailDeliveryType = EMAIL_DELIVERY_MX_DIRECT

// EmailDeliveryType:
const EMAIL_DELIVERY_DISABLED EmailDeliveryType = "disabled"

// EmailDeliveryType:
const EMAIL_DELIVERY_INHERIT EmailDeliveryType = ""

// EmailDeliveryType:
const EMAIL_DELIVERY_MX_DIRECT EmailDeliveryType = "builtin"

// EmailDeliveryType: changed for clarity
// Deprecated: This const has been deprecated since Comet version 22.12.1
const EMAIL_DELIVERY_NONE EmailDeliveryType = EMAIL_DELIVERY_INHERIT

// EmailDeliveryType:
const EMAIL_DELIVERY_SMTP EmailDeliveryType = "smtp"

// EmailDeliveryType:
const EMAIL_DELIVERY_SMTP_SSL EmailDeliveryType = "smtp-ssl"
const EMAIL_WORKER_STATE_CALCULATING int = 2
const EMAIL_WORKER_STATE_NOT_STARTED int = 0
const EMAIL_WORKER_STATE_SENDING int = 4
const EMAIL_WORKER_STATE_STARTED int = 1
const EMAIL_WORKER_STATE_WAITING int = 3
const ENCRYPTIONMETHOD_UNCONFIGURED uint64 = 0
const ENGINE_BUILTIN_EXCHANGEEDB string = "engine1/exchangeedb"
const ENGINE_BUILTIN_FILE string = "engine1/file"
const ENGINE_BUILTIN_HYPERV string = "engine1/hyperv"
const ENGINE_BUILTIN_MONGODB string = "engine1/mongodb"
const ENGINE_BUILTIN_MSOFFICE string = "engine1/winmsofficemail"
const ENGINE_BUILTIN_MSSQL string = "engine1/mssql"
const ENGINE_BUILTIN_MYSQL string = "engine1/mysql"
const ENGINE_BUILTIN_STDOUT string = "engine1/stdout"
const ENGINE_BUILTIN_SYSTEMSTATE string = "engine1/systemstate"
const ENGINE_BUILTIN_VSSWRITER string = "engine1/vsswriter"
const ENGINE_BUILTIN_WINDISK string = "engine1/windisk"
const ENGINE_BUILTIN_WINDOWSSYSTEM string = "engine1/windowssystem"

// FtpsModeType:
const FTPS_MODE_EXPLICIT FtpsModeType = 2

// FtpsModeType:
const FTPS_MODE_IMPLICIT FtpsModeType = 1

// FtpsModeType:
const FTPS_MODE_PLAINTEXT FtpsModeType = 0

// JobClassification:
const JOB_CLASSIFICATION_BACKUP JobClassification = 4001

// JobClassification:
const JOB_CLASSIFICATION_DEEPVERIFY JobClassification = 4010

// JobClassification: A specific snapshot has been deleted via the Restore wizard.
const JOB_CLASSIFICATION_DELETE_CUSTOM JobClassification = 4005

// JobClassification:
const JOB_CLASSIFICATION_IMPORT JobClassification = 4008

// JobClassification: Repair indexes
const JOB_CLASSIFICATION_REINDEX JobClassification = 4009

// JobClassification: Explicitly re-measuring the size of a Vault (right-click > Advanced menu).
const JOB_CLASSIFICATION_REMEASURE JobClassification = 4006

// JobClassification:
const JOB_CLASSIFICATION_RESTORE JobClassification = 4002

// JobClassification: Automatic or manual retention cleaning pass.
const JOB_CLASSIFICATION_RETENTION JobClassification = 4003

// JobClassification: Software uninstall
const JOB_CLASSIFICATION_UNINSTALL JobClassification = 4011

// JobClassification:
const JOB_CLASSIFICATION_UNKNOWN JobClassification = 4000

// JobClassification: Another process needed exclusive Vault access (e.g. for retention) but the
// process died. This task cleans up exclusive lockfiles.
const JOB_CLASSIFICATION_UNLOCK JobClassification = 4004

// JobClassification: Software update
const JOB_CLASSIFICATION_UPDATE JobClassification = 4007

// JobClassification:
const JOB_CLASSIFICATION__MAX JobClassification = 4999

// JobClassification:
const JOB_CLASSIFICATION__MIN JobClassification = 4000

// JobStatus:
const JOB_STATUS_FAILED_ABANDONED JobStatus = 7007

// JobStatus:
const JOB_STATUS_FAILED_CANCELLED JobStatus = 7005

// JobStatus:
const JOB_STATUS_FAILED_ERROR JobStatus = 7002

// JobStatus:
const JOB_STATUS_FAILED_QUOTA JobStatus = 7003

// JobStatus:
const JOB_STATUS_FAILED_SCHEDULEMISSED JobStatus = 7004

// JobStatus:
const JOB_STATUS_FAILED_SKIPALREADYRUNNING JobStatus = 7006

// JobStatus:
const JOB_STATUS_FAILED_TIMEOUT JobStatus = 7000

// JobStatus:
const JOB_STATUS_FAILED_WARNING JobStatus = 7001

// JobStatus:
const JOB_STATUS_FAILED__MAX JobStatus = 7999

// JobStatus:
const JOB_STATUS_FAILED__MIN JobStatus = 7000

// JobStatus:
const JOB_STATUS_RUNNING_ACTIVE JobStatus = 6001

// JobStatus: Unused
const JOB_STATUS_RUNNING_INDETERMINATE JobStatus = 6000

// JobStatus: A backup job that was marked as stopped or abandoned, but has somehow continued to run
const JOB_STATUS_RUNNING_REVIVED JobStatus = 6002

// JobStatus:
const JOB_STATUS_RUNNING__MAX JobStatus = 6999

// JobStatus:
const JOB_STATUS_RUNNING__MIN JobStatus = 6000

// JobStatus:
const JOB_STATUS_STOP_SUCCESS JobStatus = 5000

// JobStatus:
const JOB_STATUS_STOP_SUCCESS__MAX JobStatus = 5999

// JobStatus:
const JOB_STATUS_STOP_SUCCESS__MIN JobStatus = 5000

// LDAPSecurityMethod:
const LDAPSECURITYMETHOD_LDAPS LDAPSecurityMethod = "ldaps"

// LDAPSecurityMethod:
const LDAPSECURITYMETHOD_PLAIN LDAPSecurityMethod = "plain"

// LDAPSecurityMethod:
const LDAPSECURITYMETHOD_STARTTLS LDAPSecurityMethod = "starttls"

// MacOSCodesignLevel:
const MACOSCODESIGN_LEVEL_SIGN MacOSCodesignLevel = 0

// MacOSCodesignLevel:
const MACOSCODESIGN_LEVEL_SIGN_NOTARISE MacOSCodesignLevel = 1

// MacOSCodesignLevel:
const MACOSCODESIGN_LEVEL_SIGN_NOTARISE_STAPLE MacOSCodesignLevel = 2
const MIXED_VIRTUAL_ACCOUNT_TYPE_GROUP uint = 2
const MIXED_VIRTUAL_ACCOUNT_TYPE_SHAREPOINT_ONLY uint = 4
const MIXED_VIRTUAL_ACCOUNT_TYPE_TEAM_GROUP uint = 3
const MIXED_VIRTUAL_ACCOUNT_TYPE_USER uint = 1
const MONGODB_DEFAULT_PORT int = 27017

// MSSQLAuthMode:
const MSSQL_AUTH_NATIVE MSSQLAuthMode = "native"

// MSSQLAuthMode:
const MSSQL_AUTH_WINDOWS MSSQLAuthMode = "windows"

// MSSQLMethod:
const MSSQL_METHOD_OLEDB_32 MSSQLMethod = "OLEDB_32"

// MSSQLMethod:
const MSSQL_METHOD_OLEDB_NATIVE MSSQLMethod = "OLEDB_NATIVE"

// MSSQLRestoreOpt:
const MSSQL_RESTORE_NORECOVERY MSSQLRestoreOpt = "NO_RECOVERY"

// MSSQLRestoreOpt:
const MSSQL_RESTORE_RECOVERY MSSQLRestoreOpt = "RECOVERY"
const OFFICE365_REGION_CHINA string = "ChinaCloud"
const OFFICE365_REGION_GERMANY string = "GermanCloud"
const OFFICE365_REGION_PUBLIC string = "GlobalPublicCloud"
const OFFICE365_REGION_US_DOD string = "USGovtGccDoDCloud"
const OFFICE365_REGION_US_GOVT string = "USGovtGccCloud"

// ExtraFileExclusionOSRestriction:
const OS_ANY ExtraFileExclusionOSRestriction = 0

// ExtraFileExclusionOSRestriction:
const OS_ONLY_LINUX ExtraFileExclusionOSRestriction = 5

// ExtraFileExclusionOSRestriction:
const OS_ONLY_MACOS ExtraFileExclusionOSRestriction = 4

// ExtraFileExclusionOSRestriction:
const OS_ONLY_WINDOWS ExtraFileExclusionOSRestriction = 1

// ExtraFileExclusionOSRestriction:
const OS_ONLY_WINDOWS_X8632 ExtraFileExclusionOSRestriction = 2

// ExtraFileExclusionOSRestriction:
const OS_ONLY_WINDOWS_X8664 ExtraFileExclusionOSRestriction = 3
const PASSWORD_FORMAT_PLAINTEXT int = 0

// PSAType:
const PSA_TYPE_GENERIC PSAType = 0

// PSAType:
const PSA_TYPE_GRADIENT PSAType = 1
const RELEASE_CODENAME string = "Voyager"

// RemoteServerType:
const REMOTESERVER_AWS RemoteServerType = "aws"

// RemoteServerType:
const REMOTESERVER_B2 RemoteServerType = "b2"

// RemoteServerType:
const REMOTESERVER_COMET RemoteServerType = "comet"

// RemoteServerType:
const REMOTESERVER_CUSTOM RemoteServerType = "custom"

// RemoteServerType:
const REMOTESERVER_IDRIVEE2 RemoteServerType = "idrivee2"

// RemoteServerType:
const REMOTESERVER_LDAP RemoteServerType = "ldap"

// RemoteServerType:
const REMOTESERVER_S3_GENERIC RemoteServerType = "s3"

// RemoteServerType:
const REMOTESERVER_STORJ RemoteServerType = "storj"

// RemoteServerType:
const REMOTESERVER_WASABI RemoteServerType = "wasabi"

// ReplicatorDisplayClass:
const REPLICATOR_DISPLAYCLASS_STORAGE ReplicatorDisplayClass = 100

// ReplicatorDisplayClass:
const REPLICATOR_DISPLAYCLASS_USER ReplicatorDisplayClass = 101

// ReplicatorState:
const REPLICATOR_STATE_FILE_LIST_SYNC_FINISHED ReplicatorState = 4

// ReplicatorState:
const REPLICATOR_STATE_FILE_LIST_SYNC_RUNNING ReplicatorState = 2

// ReplicatorState:
const REPLICATOR_STATE_FILE_LIST_WORKER_STARTED ReplicatorState = 1

// ReplicatorState:
const REPLICATOR_STATE_NONE ReplicatorState = 0

// ReplicatorState:
const REPLICATOR_STATE_WORKERS_STARTED ReplicatorState = 8

// RestoreArchiveFormat: SquashFS container
const RESTOREARCHIVEFORMAT_SQFS RestoreArchiveFormat = 3

// RestoreArchiveFormat:
const RESTOREARCHIVEFORMAT_TAR RestoreArchiveFormat = 0

// RestoreArchiveFormat:
const RESTOREARCHIVEFORMAT_TARGZ RestoreArchiveFormat = 1

// RestoreArchiveFormat:
const RESTOREARCHIVEFORMAT_TARZSTD RestoreArchiveFormat = 4

// RestoreArchiveFormat:
const RESTOREARCHIVEFORMAT_ZIP RestoreArchiveFormat = 2

// RestoreType:
const RESTORETYPE_FILE RestoreType = 0

// RestoreType:
const RESTORETYPE_FILE_ARCHIVE RestoreType = 5

// RestoreType:
const RESTORETYPE_INVALID RestoreType = -1

// RestoreType:
const RESTORETYPE_MSSQL RestoreType = 11

// RestoreType:
const RESTORETYPE_MYSQL RestoreType = 10

// RestoreType:
const RESTORETYPE_NULL RestoreType = 1

// RestoreType:
const RESTORETYPE_OFFICE365_CLOUD RestoreType = 6

// RestoreType:
const RESTORETYPE_PROCESS_ARCHIVE RestoreType = 3

// RestoreType:
const RESTORETYPE_PROCESS_PERFILE RestoreType = 2

// RestoreType: RESTORETYPE_PROCESS_ARCHIVE
const RESTORETYPE_PROCESS_TARBALL RestoreType = 3

// RestoreType:
const RESTORETYPE_VMDK_FILE RestoreType = 7

// RestoreType:
const RESTORETYPE_VMDK_FILE_ARCHIVE RestoreType = 9

// RestoreType:
const RESTORETYPE_VMDK_FILE_NULL RestoreType = 8

// RestoreType:
const RESTORETYPE_WINDISK RestoreType = 4

// RetentionMode: Delete everything except for jobs matching the ranges in RetentionPolicy.Ranges.
const RETENTIONMODE_DELETE_EXCEPT RetentionMode = 802

// RetentionMode: If this mode is set in a RetentionPolicy, then RetentionPolicy.Ranges should be
// ignored.
const RETENTIONMODE_KEEP_EVERYTHING RetentionMode = 801

// RetentionRangeType: Uses Days
const RETENTIONRANGE_FIRST_JOB_FOR_EACH_LAST_X_DAYS RetentionRangeType = 903

// RetentionRangeType: Uses Months, MonthOffset
const RETENTIONRANGE_FIRST_JOB_FOR_LAST_X_MONTHS RetentionRangeType = 905

// RetentionRangeType: Uses Weeks, WeekOffset
const RETENTIONRANGE_FIRST_JOB_FOR_LAST_X_WEEKS RetentionRangeType = 906

// RetentionRangeType: Uses Days, Weeks, Months
const RETENTIONRANGE_JOBS_SINCE RetentionRangeType = 902

// RetentionRangeType: Uses Jobs
const RETENTIONRANGE_LAST_X_BACKUPS_ONE_FOR_EACH_DAY RetentionRangeType = 907

// RetentionRangeType: Uses Jobs
const RETENTIONRANGE_LAST_X_BACKUPS_ONE_FOR_EACH_MONTH RetentionRangeType = 909

// RetentionRangeType: Uses Jobs
const RETENTIONRANGE_LAST_X_BACKUPS_ONE_FOR_EACH_WEEK RetentionRangeType = 908
const RETENTIONRANGE_MAXINT int = 1125899906842624

// RetentionRangeType: Uses Jobs
const RETENTIONRANGE_MOST_RECENT_X_JOBS RetentionRangeType = 900

// RetentionRangeType: Uses Timestamp
const RETENTIONRANGE_NEWER_THAN_X RetentionRangeType = 901

// RetentionRangeType:
const RETENTIONRANGE__HIGHEST RetentionRangeType = 909

// RetentionRangeType:
const RETENTIONRANGE__LOWEST RetentionRangeType = 900

// RetentionRangeType: Removed
const RETENTIONRANGE__RESERVED904 RetentionRangeType = 904

// seconds past 00:00 local time
const SCHEDULE_FREQUENCY_DAILY uint64 = 8011
const SCHEDULE_FREQUENCY_HIGHEST uint64 = 8015

// seconds past *:00 local time
const SCHEDULE_FREQUENCY_HOURLY uint64 = 8012
const SCHEDULE_FREQUENCY_LOWEST uint64 = 8010

// seconds past 00:00 1st, local time
const SCHEDULE_FREQUENCY_MONTHLY uint64 = 8014

// epoch time
const SCHEDULE_FREQUENCY_ONCEONLY uint64 = 8010

// SecondsPast: number of seconds per period. Offset: Shunt seconds after unix epoch
const SCHEDULE_FREQUENCY_PERIODIC uint64 = 8015

// seconds past 00:00 Sunday, local time
const SCHEDULE_FREQUENCY_WEEKLY uint64 = 8013

// 2^50 (1 << 50)
const SCHEDULE_MAXINT int = 1125899906842624

// Maximum random delay (5 hours)
const SCHEDULE_MAX_RANDOM_DELAY_SECS int = 18000

// SearchClauseType:
const SEARCHCLAUSE_AND SearchClauseType = "and"

// SearchClauseType:
const SEARCHCLAUSE_NOT_AND SearchClauseType = "not_and"

// SearchClauseType:
const SEARCHCLAUSE_NOT_OR SearchClauseType = "not_or"

// SearchClauseType:
const SEARCHCLAUSE_OR SearchClauseType = "or"

// SearchClauseType:
const SEARCHCLAUSE_RULE SearchClauseType = ""
const SEARCHOPERATOR_BOOL_IS string = "bool_is"
const SEARCHOPERATOR_BOOL_NIS string = "bool_nis"
const SEARCHOPERATOR_INT_EQ string = "int_eq"
const SEARCHOPERATOR_INT_GT string = "int_gt"
const SEARCHOPERATOR_INT_GTE string = "int_gte"
const SEARCHOPERATOR_INT_LT string = "int_lt"
const SEARCHOPERATOR_INT_LTE string = "int_lte"
const SEARCHOPERATOR_INT_NEQ string = "int_neq"
const SEARCHOPERATOR_STRING_CONTAINS string = "str_contains"
const SEARCHOPERATOR_STRING_CONTAINS_CI string = "str_contains_ci"
const SEARCHOPERATOR_STRING_ENDSWITH string = "str_endswith"
const SEARCHOPERATOR_STRING_ENDSWITH_CI string = "str_endswith_ci"
const SEARCHOPERATOR_STRING_EQ string = "str_eq"
const SEARCHOPERATOR_STRING_EQ_CI string = "str_eq_ci"
const SEARCHOPERATOR_STRING_NCONTAINS string = "str_ncontains"
const SEARCHOPERATOR_STRING_NCONTAINS_CI string = "str_ncontains_ci"
const SEARCHOPERATOR_STRING_NENDSWITH string = "str_nendswith"
const SEARCHOPERATOR_STRING_NENDSWITH_CI string = "str_nendswith_ci"
const SEARCHOPERATOR_STRING_NEQ string = "str_neq"
const SEARCHOPERATOR_STRING_NEQ_CI string = "str_neq_ci"
const SEARCHOPERATOR_STRING_NREGEXMATCH string = "str_nregexmatch"
const SEARCHOPERATOR_STRING_NSTARTSWITH string = "str_nstartswith"
const SEARCHOPERATOR_STRING_NSTARTSWITH_CI string = "str_nstartswith_ci"
const SEARCHOPERATOR_STRING_REGEXMATCH string = "str_regexmatch"
const SEARCHOPERATOR_STRING_STARTSWITH string = "str_startswith"
const SEARCHOPERATOR_STRING_STARTSWITH_CI string = "str_startswith_ci"
const SERVICE_CALENDAR uint = 1
const SERVICE_CONTACT uint = 2
const SERVICE_MAIL uint = 4
const SERVICE_ONEDRIVE uint = 16
const SERVICE_SHAREPOINT uint = 8

// DefaultSettingMode:
const SETTING_ENFORCED_OFF DefaultSettingMode = 4

// DefaultSettingMode:
const SETTING_ENFORCED_ON DefaultSettingMode = 3

// DefaultSettingMode:
const SETTING_OPTIONAL_DEFAULT_OFF DefaultSettingMode = 2

// DefaultSettingMode:
const SETTING_OPTIONAL_DEFAULT_ON DefaultSettingMode = 1

// DefaultSettingMode:
const SETTING_SYSTEM_DEFAULT DefaultSettingMode = 0

// Severity:
const SEVERITY_ERROR Severity = "E"

// Severity:
const SEVERITY_INFO Severity = "I"

// Severity:
const SEVERITY_WARNING Severity = "W"

// StreamableEventType: Data is the profile object
const SEVT_ACCOUNT_NEW StreamableEventType = 4100

// StreamableEventType: Data is the username
const SEVT_ACCOUNT_REMOVED StreamableEventType = 4101

// StreamableEventType: Data is the profile object
const SEVT_ACCOUNT_UPDATED StreamableEventType = 4102

// StreamableEventType: Data is the string bucket ref
const SEVT_BUCKET_NEW StreamableEventType = 4300

// StreamableEventType:
const SEVT_JOB_COMPLETED StreamableEventType = 4201

// StreamableEventType:
const SEVT_JOB_NEW StreamableEventType = 4200

// StreamableEventType: Event is emitted when the webhook is registered, or when the server starts
// up. The Data associated is ServerMetaVersionInfo
const SEVT_META_HELLO StreamableEventType = 4000

// StreamableEventType:
const SEVT__MAX StreamableEventType = 4999

// StreamableEventType:
const SEVT__MIN StreamableEventType = 4000

// SSHAuthMode:
const SSHCONNECTION_AUTHMODE_PASSWORD SSHAuthMode = 1

// SSHAuthMode: n.b. change values
const SSHCONNECTION_AUTHMODE_PRIVATEKEY SSHAuthMode = 2

// SSHAuthMode:
const SSHCONNECTION_AUTHMODE__INVALID SSHAuthMode = 0

// StoredObjectType:
const STOREDOBJECTTYPE_DIRECTORY StoredObjectType = "dir"

// StoredObjectType: "dir"
const STOREDOBJECTTYPE_EMAILFOLDER StoredObjectType = "mailfolder"

// StoredObjectType: "file"
const STOREDOBJECTTYPE_EMAILMESSAGE StoredObjectType = "emailmessage"

// StoredObjectType:
const STOREDOBJECTTYPE_FILE StoredObjectType = "file"

// StoredObjectType:
const STOREDOBJECTTYPE_MSSITE StoredObjectType = "mssite"

// StoredObjectType:
const STOREDOBJECTTYPE_MSSITEITEMENTITY StoredObjectType = "mssiteitementity"

// StoredObjectType:
const STOREDOBJECTTYPE_MSSITELISTDRIVEENTITY StoredObjectType = "mssitelistdriveentity"

// StoredObjectType:
const STOREDOBJECTTYPE_MSSITELISTENTITY StoredObjectType = "mssitelistentity"

// StoredObjectType:
const STOREDOBJECTTYPE_MSSITE_TEAM StoredObjectType = "mssiteteam"

// StoredObjectType: "dir"
const STOREDOBJECTTYPE_OFFICECALENDAR StoredObjectType = "calendar"

// StoredObjectType: "file"
const STOREDOBJECTTYPE_OFFICECALENDAREVENT StoredObjectType = "calendarevent"

// StoredObjectType: "file"
const STOREDOBJECTTYPE_OFFICECONTACT StoredObjectType = "contact"

// StoredObjectType: "dir"
const STOREDOBJECTTYPE_OFFICECONTACTFOLDER StoredObjectType = "contactfolder"

// StoredObjectType:
const STOREDOBJECTTYPE_SYMLINK StoredObjectType = "symlink"

// StoredObjectType:
const STOREDOBJECTTYPE_UNIXBLOCKDEVICE StoredObjectType = "dev"

// StoredObjectType:
const STOREDOBJECTTYPE_UNIXCHARDEVICE StoredObjectType = "chardev"

// StoredObjectType:
const STOREDOBJECTTYPE_UNIXFIFO StoredObjectType = "fifo"

// StoredObjectType:
const STOREDOBJECTTYPE_UNIXSOCKET StoredObjectType = "socket"

// StoredObjectType:
const STOREDOBJECTTYPE_VMDK_DIRECTORY StoredObjectType = "vmdkdir"

// StoredObjectType:
const STOREDOBJECTTYPE_VMDK_FILE StoredObjectType = "vmdkfile"

// StoredObjectType:
const STOREDOBJECTTYPE_VMDK_SYMLINK StoredObjectType = "vmdksymlink"

// StoredObjectType:
const STOREDOBJECTTYPE_VMDK_WINEFS StoredObjectType = "vmdkwinefs"

// StoredObjectType:
const STOREDOBJECTTYPE_WINEFS StoredObjectType = "winefs"
const TOTPRequiredError string = "ERR_TOTP_REQUIRED"

// UpdateStatus:
const UPDATESTATUS_INELIGIBLE UpdateStatus = 1

// UpdateStatus:
const UPDATESTATUS_NOT_SEEN UpdateStatus = 0

// UpdateStatus:
const UPDATESTATUS_PENDING UpdateStatus = 2

// UpdateStatus:
const UPDATESTATUS_REQUEST_MADE UpdateStatus = 3

// UpdateStatus:
const UPDATESTATUS_UPDATE_CONFIRMED UpdateStatus = 5

// UpdateStatus: Device reconnected with bad version
const UPDATESTATUS_UPDATE_FAILED UpdateStatus = 4
const UnknownDeviceError string = "ERR_UNKNOWN_DEVICE"
const UnsupportVmdkFileSystem string = "ERR_UNSUPPORT_VMDK_FILE_SYSTEM"

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__ANDROID WebAuthnDeviceType = 2

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__APPLE WebAuthnDeviceType = 3

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__HARDWARE_TOKEN WebAuthnDeviceType = 1

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__TPM_GENERIC WebAuthnDeviceType = 4

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__TPM_LINUX WebAuthnDeviceType = 6

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__TPM_WINDOWS WebAuthnDeviceType = 5

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__UNKNOWN WebAuthnDeviceType = 0

//
// DATA TYPES
//

type AutoRetentionLevel int64
type BucketPropertyList map[string]BucketProperties
type BucketUsageMap map[string]BucketUsageInfo
type ClientBrandingBuildMode int
type CompressMode int
type DefaultSettingMode int
type DefaultSourceOSRestriction int
type EmailDeliveryType string
type EmailReportType int
type ExtraFileExclusionOSRestriction int
type FtpsModeType int
type JobClassification uint64
type JobStatus uint64
type LDAPSecurityMethod string
type LanguageCode string
type LiveUserConnectionID string
type LiveUserConnectionMap map[LiveUserConnectionID]LiveUserConnection
type LogDay int
type MSSQLAuthMode string
type MSSQLMethod string
type MSSQLRestoreOpt string
type MacOSCodesignLevel int
type NewsEntries map[string]NewsEntry
type PSAType int
type RemoteServerType string
type ReplicaDeletionStrategy string
type ReplicatorDisplayClass int
type ReplicatorState int
type RestoreArchiveFormat int
type RestoreOffice365Credential Office365Credential
type RestoreType int
type RetentionMode int64
type RetentionRangeType int64
type SSHAuthMode uint64
type SearchClauseType string
type SearchOperatorType string
type Severity string
type SftpAuthMode uint64
type StoredObjectType string
type StreamableEventType int
type UpdateStatus int
type WebAuthnAuthenticationExtensions map[string]interface{}
type WebAuthnDeviceType int

type AddBucketResponseMessage struct {
	Status       int
	Message      string
	NewBucketID  string
	NewBucketKey string
}

type AdminAccountPropertiesResponse struct {
	OrganizationID string
	Permissions    AdminUserPermissions
	Security       AdminSecurityOptions
}

type AdminEmailOptions struct {
	FromEmail string
	FromName  string
}

type AdminResourceResponse struct {
	Status       int
	Message      string
	ResourceHash string
}

type AdminSecurityOptions struct {
	PasswordFormat            int
	Password                  string
	AllowPasswordLogin        bool
	AllowPasswordAndTOTPLogin bool
	// Deprecated: This member has been deprecated since Comet version 21.12.0
	AllowPasswordAndU2FLogin      bool
	AllowPasswordAndWebAuthnLogin bool
	// Deprecated: This member has been deprecated since Comet version 21.12.0
	U2FRegistrations        []AdminU2FRegistration      `json:",omitempty"`
	WebAuthnRegistrations   []AdminWebAuthnRegistration `json:",omitempty"`
	TOTPKeyEncryptionFormat int                         `json:",omitempty"`
	TOTPKey                 string                      `json:",omitempty"`
	IPWhitelist             string                      `json:",omitempty"`
}

// Deprecated: This struct has been deprecated since Comet version 21.12.0
type AdminU2FRegistration struct {
	Description  string
	RegisterTime int64
	Registration []byte
}

type AdminUserPermissions struct {
	PreventEditServerSettings bool `json:",omitempty"`
	PreventServerShutdown     bool `json:",omitempty"`
	PreventChangePassword     bool `json:",omitempty"`
	AllowEditBranding         bool `json:",omitempty"`
	AllowEditEmailOptions     bool `json:",omitempty"`
	AllowEditRemoteStorage    bool `json:",omitempty"`
	AllowEditWebhooks         bool `json:",omitempty"`
	DenyConstellationRole     bool `json:",omitempty"`
}

type AdminWebAuthnRegistration struct {
	Description  string
	RegisterTime int64
	Type         WebAuthnDeviceType
	IsLegacyU2F  bool               `json:",omitempty"`
	ID           []byte             `json:",omitempty"`
	Credential   WebAuthnCredential `json:",omitempty"`
}

type AllowedAdminUser struct {
	Username                     string
	OrganizationID               string
	ExternalAuthenticationSource string `json:",omitempty"`
	PasswordFormat               int
	Password                     string
	AllowPasswordLogin           bool
	AllowPasswordAndTOTPLogin    bool
	// Deprecated: This member has been deprecated since Comet version 21.12.0
	AllowPasswordAndU2FLogin      bool
	AllowPasswordAndWebAuthnLogin bool
	// Deprecated: This member has been deprecated since Comet version 21.12.0
	U2FRegistrations        []AdminU2FRegistration      `json:",omitempty"`
	WebAuthnRegistrations   []AdminWebAuthnRegistration `json:",omitempty"`
	TOTPKeyEncryptionFormat int                         `json:",omitempty"`
	TOTPKey                 string                      `json:",omitempty"`
	IPWhitelist             string                      `json:",omitempty"`
	Permissions             AdminUserPermissions
}

type AmazonAWSVirtualStorageRoleSettings struct {
	MasterBucket string
	AccessKey    string
	SecretKey    string
}

type AuthenticationRoleOptions struct {
	RoleEnabled                bool
	DatabaseCheckLevel         int
	GenerateMissedBackupEvents bool
	NoMissedBackupEventsBefore int64
	GenerateScheduledEmails    bool
	PruneLogsAfterDays         int
	RemoteStorage              []RemoteStorageOption
	ReplicateTo                []ReplicaServer
	GlobalOverrides            GlobalOverrideOptions `json:",omitempty"`
}

type AvailableDownload struct {
	Category    string
	Description string
	Recommended bool
}

type AzureDestinationLocation struct {
	AZBAccountName string
	AZBAccountKey  string
	AZBContainer   string
	AZBRealm       string
	AZBPrefix      string
}

type B2DestinationLocation struct {
	AccountID string `json:",omitempty"`
	Key       string `json:",omitempty"`
	Bucket    string `json:",omitempty"`
	Prefix    string `json:",omitempty"`
	// Deprecated: This member has been deprecated since Comet version 21.9.7
	MaxConnections   int  `json:",omitempty"`
	HideDeletedFiles bool `json:",omitempty"`
}

type B2StorageExtraInfo struct {
	TotalTransactionsInTimeInterval map[int64]B2TransactionTotals
}

type B2TransactionTotals struct {
	ClassA int64
	ClassB int64
	ClassC int64
}

type B2VirtualStorageRoleSettings struct {
	MasterBucket     string
	KeyID            string
	AppKey           string
	HideDeletedFiles bool
}

type BackupJobAdvancedOptions struct {
	SkipAlreadyRunning    bool
	StopAfter             int64
	LimitVaultSpeedBps    int64
	ReduceDiskConcurrency bool
	UseOnDiskIndexes      bool
	AllowZeroFilesSuccess bool
	AutoRetentionLevel    AutoRetentionLevel
}

type BackupJobDetail struct {
	GUID                      string
	Username                  string
	Classification            JobClassification
	Status                    JobStatus
	StartTime                 int64
	EndTime                   int64
	SourceGUID                string
	DestinationGUID           string
	DeviceID                  string
	SnapshotID                string `json:",omitempty"`
	ClientVersion             string
	TotalDirectories          int64
	TotalFiles                int64
	TotalSize                 int64
	TotalChunks               int64
	UploadSize                int64
	DownloadSize              int64
	TotalVmCount              int64             `json:",omitempty"`
	TotalMailsCount           int64             `json:",omitempty"`
	TotalSitesCount           int64             `json:",omitempty"`
	TotalAccountsCount        int64             `json:",omitempty"`
	TotalLicensedMailsCount   int64             `json:",omitempty"`
	TotalUnlicensedMailsCount int64             `json:",omitempty"`
	CancellationID            string            `json:",omitempty"`
	Progress                  BackupJobProgress `json:",omitempty"`
	DestinationSizeStart      SizeMeasurement   `json:",omitempty"`
	DestinationSizeEnd        SizeMeasurement   `json:",omitempty"`
}

type BackupJobProgress struct {
	Counter      int64
	SentTime     int64
	RecievedTime int64
	BytesDone    int64
	ItemsDone    int64
}

type BackupRuleConfig struct {
	Description           string
	CreateTime            int64
	ModifyTime            int64
	PreExec               []string
	ThawExec              []string
	PostExec              []string
	Source                string
	Destination           string
	SkipAlreadyRunning    bool
	StopAfter             int64
	LimitVaultSpeedBps    int64
	ReduceDiskConcurrency bool
	UseOnDiskIndexes      bool
	AllowZeroFilesSuccess bool
	AutoRetentionLevel    AutoRetentionLevel
	Schedules             []ScheduleConfig
	EventTriggers         BackupRuleEventTriggers
}

type BackupRuleEventTriggers struct {
	OnPCBoot                bool `json:",omitempty"`
	OnPCBootIfLastJobMissed bool `json:",omitempty"`
}

type BrandingOptions struct {
	BrandName                           string
	LogoImage                           string
	TopColor                            string
	Favicon                             string
	HideNewsArea                        bool
	ProductName                         string
	CompanyName                         string
	HelpURL                             string
	HelpIsPopup                         bool
	DefaultLoginServerURL               string
	TileBackgroundColor                 string
	AccountRegisterURL                  string
	HideBackgroundLogo                  bool
	BuildMode                           ClientBrandingBuildMode
	PathIcoFile                         string
	PathIcnsFile                        string
	PathMenuBarIcnsFile                 string
	PathEulaRtf                         string
	PathTilePng                         string
	PathHeaderImage                     string
	PathAppIconImage                    string
	PackageIdentifier                   string
	WindowsCodeSignPKCS12FilePath       string
	WindowsCodeSignPKCS12PasswordFormat uint64
	WindowsCodeSignPKCS12Password       string
	WindowsCodeSignPKCS11Engine         string
	WindowsCodeSignPKCS11Module         string
	WindowsCodeSignPKCS11Certfile       string
	WindowsCodeSignPKCS11KeyID          string
	WindowsCodeSignPKCS11PasswordFormat uint64
	WindowsCodeSignPKCS11Password       string
	MacOSCodeSign                       MacOSCodeSignProperties
}

type BrandingProperties struct {
	ProductName                         string
	CompanyName                         string
	HelpURL                             string
	HelpIsPopup                         bool
	DefaultLoginServerURL               string
	TileBackgroundColor                 string
	AccountRegisterURL                  string
	HideBackgroundLogo                  bool
	BuildMode                           ClientBrandingBuildMode
	PathIcoFile                         string
	PathIcnsFile                        string
	PathMenuBarIcnsFile                 string
	PathEulaRtf                         string
	PathTilePng                         string
	PathHeaderImage                     string
	PathAppIconImage                    string
	PackageIdentifier                   string
	WindowsCodeSignPKCS12FilePath       string
	WindowsCodeSignPKCS12PasswordFormat uint64
	WindowsCodeSignPKCS12Password       string
	WindowsCodeSignPKCS11Engine         string
	WindowsCodeSignPKCS11Module         string
	WindowsCodeSignPKCS11Certfile       string
	WindowsCodeSignPKCS11KeyID          string
	WindowsCodeSignPKCS11PasswordFormat uint64
	WindowsCodeSignPKCS11Password       string
	MacOSCodeSign                       MacOSCodeSignProperties
}

type BrowseDiskDrivesResponse struct {
	Status  int
	Message string
	Disks   []DiskDrive
}

type BrowseEDBResponse struct {
	Status    int
	Message   string
	Databases []EDBFileInfo
}

type BrowseHVResponse struct {
	Status          int
	Message         string
	VirtualMachines []HyperVMachineInfo
}

type BrowseOffice365ListVirtualAccountsResponse struct {
	Status  int
	Message string
	Objects []Office365MixedVirtualAccount
}

type BrowseOffice365ObjectsResponse struct {
	Status  int
	Message string
	Objects []Office365ObjectInfo
}

type BrowseSQLServerResponse struct {
	Status  int
	Message string
	Objects map[string]string
}

type BrowseVSSResponse struct {
	Status     int
	Message    string
	VSSWriters map[string]VSSWriterInfo
}

type BucketProperties struct {
	OrganizationID     string
	CreateTime         int64
	ReadWriteKeyFormat int
	ReadWriteKey       string
	Size               SizeMeasurement
}

type BucketUsageInfo struct {
	AccessKey       string
	ExistsOnServers []int
	InUseBy         []UserOnServer
}

type CometAPIResponseMessage struct {
	Status  int
	Message string
}

type CometDestinationLocation struct {
	CometServer    string
	CometBucket    string
	CometBucketKey string
}

type ConstellationCheckReport struct {
	CheckStarted   int64
	CheckCompleted int64
	Usage          BucketUsageMap
}

type ConstellationRoleOptions struct {
	RoleEnabled      bool
	DeleteUnusedData bool
	Servers          []RemoteServerAddress
}

type ConstellationStats struct {
	LastCheckStart        int64
	TotalChecksStarted    int64
	TotalBucketsDeleted   int64
	ChecksCurrentlyActive int64
}

type ConstellationStatusAPIResponse struct {
	DeletionEnabled bool
	Targets         []string
	TargetNames     []string `json:",omitempty"`
	Stats           ConstellationStats
}

type ContentMeasurement struct {
	MeasureStarted   int64
	MeasureCompleted int64
	Components       []ContentMeasurementComponent
}

type ContentMeasurementComponent struct {
	Bytes  int64
	UsedBy []string
}

type CountJobsResponse struct {
	Count int64
}

type CreateGroupPolicyResponse struct {
	Status     int
	Message    string
	PolicyHash string
}

type CustomRemoteBucketSettings struct {
	URL string
}

type DaysOfWeekConfig struct {
	Sunday    bool
	Monday    bool
	Tuesday   bool
	Wednesday bool
	Thursday  bool
	Friday    bool
	Saturday  bool
}

type DefaultEmailReportPolicy struct {
	ShouldOverrideDefaultReports bool
	Reports                      []EmailReportConfig
}

type DefaultSourceWithOSRestriction struct {
	SourceConfig SourceConfig
	RestrictOS   DefaultSourceOSRestriction
}

type DestinationConfig struct {
	Description                      string
	CreateTime                       int64
	ModifyTime                       int64
	PreExec                          []string
	ThawExec                         []string
	PostExec                         []string
	DestinationType                  uint64
	CometServer                      string
	CometBucket                      string
	CometBucketKey                   string
	S3Server                         string
	S3UsesTLS                        bool
	S3AccessKey                      string
	S3SecretKey                      string
	S3BucketName                     string
	S3Subdir                         string
	S3CustomRegion                   string
	S3UsesV2Signing                  bool
	SFTPServer                       string
	SFTPUsername                     string
	SFTPRemotePath                   string
	SFTPAuthMode                     SftpAuthMode
	SFTPPassword                     string
	SFTPPrivateKey                   string
	SFTPCustomAuth_UseKnownHostsFile bool
	SFTPCustomAuth_KnownHostsFile    string
	FTPServer                        string
	FTPUsername                      string
	FTPPassword                      string
	FTPBaseUseHomeDirectory          bool
	FTPCustomBaseDirectory           string
	FTPSMode                         FtpsModeType
	FTPPort                          int
	FTPMaxConnections                int
	FTPAcceptInvalidSSL              bool
	AZBAccountName                   string
	AZBAccountKey                    string
	AZBContainer                     string
	AZBRealm                         string
	AZBPrefix                        string
	LocalcopyPath                    string
	LocalcopyWinSMBUsername          string
	LocalcopyWinSMBPassword          string
	LocalcopyWinSMBPasswordFormat    uint64
	Swift                            SwiftDestinationLocation
	B2                               B2DestinationLocation
	Storj                            StorjDestinationLocation
	SpanTargets                      []DestinationLocation
	SpanUseStaticSlots               bool
	EncryptionKeyEncryptionMethod    uint64
	EncryptedEncryptionKey           string
	RepoInitTimestamp                int64
	StorageLimitEnabled              bool
	StorageLimitBytes                int64
	Statistics                       DestinationStatistics `json:",omitempty"`
	DefaultRetention                 RetentionPolicy
	RebrandStorage                   bool
}

type DestinationLocation struct {
	DestinationType                  uint64
	CometServer                      string
	CometBucket                      string
	CometBucketKey                   string
	S3Server                         string
	S3UsesTLS                        bool
	S3AccessKey                      string
	S3SecretKey                      string
	S3BucketName                     string
	S3Subdir                         string
	S3CustomRegion                   string
	S3UsesV2Signing                  bool
	SFTPServer                       string
	SFTPUsername                     string
	SFTPRemotePath                   string
	SFTPAuthMode                     SftpAuthMode
	SFTPPassword                     string
	SFTPPrivateKey                   string
	SFTPCustomAuth_UseKnownHostsFile bool
	SFTPCustomAuth_KnownHostsFile    string
	FTPServer                        string
	FTPUsername                      string
	FTPPassword                      string
	FTPBaseUseHomeDirectory          bool
	FTPCustomBaseDirectory           string
	FTPSMode                         FtpsModeType
	FTPPort                          int
	FTPMaxConnections                int
	FTPAcceptInvalidSSL              bool
	AZBAccountName                   string
	AZBAccountKey                    string
	AZBContainer                     string
	AZBRealm                         string
	AZBPrefix                        string
	LocalcopyPath                    string
	LocalcopyWinSMBUsername          string
	LocalcopyWinSMBPassword          string
	LocalcopyWinSMBPasswordFormat    uint64
	Swift                            SwiftDestinationLocation
	B2                               B2DestinationLocation
	Storj                            StorjDestinationLocation
	SpanTargets                      []DestinationLocation
	SpanUseStaticSlots               bool
}

type DestinationStatistics struct {
	ClientProvidedSize                 SizeMeasurement
	ClientProvidedContent              ContentMeasurement
	LastSuccessfulDeepVerify_GUID      string `json:",omitempty"`
	LastSuccessfulDeepVerify_StartTime int64  `json:",omitempty"`
	LastSuccessfulDeepVerify_EndTime   int64  `json:",omitempty"`
}

type DeviceConfig struct {
	FriendlyName     string
	RegistrationTime int64                      `json:",omitempty"`
	PlatformVersion  OSInfo                     `json:",omitempty"`
	Sources          map[string]SourceBasicInfo `json:",omitempty"`
	DeviceTimezone   string                     `json:",omitempty"`
}

type DiskDrive struct {
	ID           string
	DeviceName   string
	Caption      string
	Model        string
	SerialNumber string
	Size         int64
	Partitions   []Partition
	Flags        int64
	Cylinders    int64
	Heads        int64
	Sectors      int64
	SectorSize   int64
}

type DispatcherAdminSourcesResponse struct {
	Status        int
	Message       string
	ImportSources map[string]string
}

type DispatcherStoredObjectsResponse struct {
	Status        int
	Message       string
	StoredObjects []StoredObject
}

type DispatcherVaultSnapshotsResponse struct {
	Status    int
	Message   string
	Snapshots []VaultSnapshot
}

type DispatcherWindiskSnapshotResponse struct {
	Status          int
	Message         string
	WindiskSnapshot []DiskDrive
}

type EDBFileInfo struct {
	Name                   string
	GUID                   string `json:"Guid"`
	ServerName             string
	CircularLoggingEnabled bool
}

type EmailOptions struct {
	FromEmail                   string
	FromName                    string
	Mode                        EmailDeliveryType
	EmailReportingOptions       []EmailReportingOption `json:",omitempty"`
	SMTPHost                    string                 `json:",omitempty"`
	SMTPPort                    int                    `json:",omitempty"`
	SMTPUsername                string                 `json:",omitempty"`
	SMTPPassword                string                 `json:",omitempty"`
	SMTPAllowInvalidCertificate bool                   `json:",omitempty"`
	SMTPAllowUnencrypted        bool                   `json:",omitempty"`
}

type EmailReportConfig struct {
	ReportType       EmailReportType
	SummaryFrequency []ScheduleConfig
	Filter           SearchClause
}

type EmailReportGeneratedPreview struct {
	Status             int
	Message            string
	From               string
	To                 []string
	EmailSubject       string
	EmailBodyHTML      string
	EmailBodyPlaintext string
}

type EmailReportingOption struct {
	EmailReportConfig EmailReportConfig
	LanguageCode      LanguageCode
	LocalTimezone     string
	Recipients        []string
}

type ExternalAuthenticationSource struct {
	Type          RemoteServerType
	Description   string
	RemoteAddress string                                   `json:",omitempty"`
	Username      string                                   `json:",omitempty"`
	Password      string                                   `json:",omitempty"`
	LDAP          ExternalLDAPAuthenticationSourceSettings `json:",omitempty"`
	B2            B2VirtualStorageRoleSettings             `json:",omitempty"`
	Wasabi        WasabiVirtualStorageRoleSettings         `json:",omitempty"`
	Custom        CustomRemoteBucketSettings               `json:",omitempty"`
	S3            S3GenericVirtualStorageRole              `json:",omitempty"`
	// Amazon AWS - Virtual Storage Role
	AWS                AmazonAWSVirtualStorageRoleSettings `json:",omitempty"`
	Storj              StorjVirtualStorageRoleSetting      `json:",omitempty"`
	NewUserPermissions AdminUserPermissions
}

type ExternalLDAPAuthenticationSourceServer struct {
	Hostname         string
	Port             int
	SecurityMethod   LDAPSecurityMethod
	AcceptInvalidSSL bool
}

type ExternalLDAPAuthenticationSourceSettings struct {
	Hostname         string
	Port             int
	SecurityMethod   LDAPSecurityMethod
	AcceptInvalidSSL bool
	FallbackServers  []ExternalLDAPAuthenticationSourceServer
	BindUser         string
	BindPassword     string
	SearchDN         string
	SearchFilter     string
}

type ExtraFileExclusion struct {
	Exclude    string
	Regex      bool
	RestrictOS ExtraFileExclusionOSRestriction
}

type FTPDestinationLocation struct {
	FTPServer               string
	FTPUsername             string
	FTPPassword             string
	FTPBaseUseHomeDirectory bool
	FTPCustomBaseDirectory  string
	FTPSMode                FtpsModeType
	FTPPort                 int
	FTPMaxConnections       int
	FTPAcceptInvalidSSL     bool
}

type GetGroupPolicyResponse struct {
	Status     int
	Message    string
	Policy     GroupPolicy
	PolicyHash string
}

type GetProfileAndHashResponseMessage struct {
	Status      int
	Message     string
	ProfileHash string
	Profile     UserProfileConfig
}

type GetProfileHashResponseMessage struct {
	Status      int
	Message     string
	ProfileHash string
}

type GlobalOverrideOptions struct {
	RandomDelaySecs uint64 `json:",omitempty"`
}

type GroupPolicy struct {
	Description       string
	OrganizationID    string
	Policy            UserPolicy
	DefaultUserPolicy bool
}

type HTTPConnectorOptions struct {
	ListenAddress__DONOTUSEDIRECTLY string `json:"ListenAddress"`
	SSLCertPath                     string `json:",omitempty"`
	SSLIntermediate                 string `json:",omitempty"`
	SSLCertKey                      string `json:",omitempty"`
	AutoSSLDomains                  string `json:",omitempty"`
	SSLPfxPath                      string `json:",omitempty"`
	SSLPfxPassword                  string `json:",omitempty"`
}

type HourSchedConfig struct {
	Hour    uint64
	Minutes uint64
}

type HyperVMachineInfo struct {
	ID          string
	DisplayName string `json:"Name"`
}

type InstallCreds struct {
	Username  string
	Password  string
	Server    string
	AutoLogin bool
}

type InstallToken struct {
	Username   string
	Server     string
	Token      string
	CreateTime int64
	Used       bool
	ExpireTime int64
}

type InstallTokenResponse struct {
	Status       int
	Message      string
	InstallToken InstallToken
}

// JobEntry is a single entry within a job report.
type JobEntry struct {
	Time     int64
	Severity Severity
	Message  string
}

type LicenseOptions struct {
	Email        string `json:",omitempty"`
	SerialNumber string
}

type LiveUserConnection struct {
	Username                string
	DeviceID                string
	ReportedVersion         string
	ReportedPlatform        string
	ReportedPlatformVersion OSInfo `json:",omitempty"`
	DeviceTimeZone          string `json:",omitempty"`
	IPAddress               string `json:",omitempty"`
	ConnectionTime          int64
	AllowsFilenames         bool
}

type LocalDestinationLocation struct {
	LocalcopyPath                 string
	LocalcopyWinSMBUsername       string
	LocalcopyWinSMBPassword       string
	LocalcopyWinSMBPasswordFormat uint64
}

type LocalStorageDirectory struct {
	Path string
}

type MSSQLConnection struct {
	Type         string
	Username     string
	Password     string
	Hostname     string
	InstanceName string
	Method       string
}

type MSSQLLoginArgs struct {
	Instance           string
	AuthMode           MSSQLAuthMode
	Username           string
	Password           string
	MethodIsOledb32Bit bool
	RestoreNoRecovery  bool
}

type MacOSCodeSignProperties struct {
	Level                 MacOSCodesignLevel
	SignLocally           bool
	SSHServer             SSHConnection
	CertificateName       string
	AppCertificateName    string
	AppleID               string
	AppleIDPass           string
	AppleIDPassFormat     uint64
	CertificateFile       string
	AppCertificateFile    string
	PfxFilePassword       string
	PfxFilePasswordFormat uint64
	NotaryAPIIssuerID     string
	NotaryAPIKeyID        string
	NotaryAPIKeyFile      string
}

type MongoDBConnection struct {
	Server                  string
	Port                    int
	Username                string
	Password                string
	AuthenticationDB        string
	MongoShellPath          string
	MongodumpPath           string
	ReadPreference          string
	UseReplica              bool
	ReplicaName             string
	ReplicaMembers          []string
	UseSSL                  bool
	ClientSSLPEMPath        string
	ServerSSLPEMPath        string
	SSLClientKeyPassword    string
	AllowInvalidCertificate bool
	AllowInvalidHostname    bool
	UseSSH                  bool
	SSHConnection           SSHConnection `json:",omitempty"`
}

type MySQLConnection struct {
	Host                   string
	Port                   string
	Username               string
	Password               string
	UseTLS                 bool
	TLSSkipVerify          bool
	TLSCustomServerCAPath  string
	TLSCustomClientCrtPath string
	TLSCustomClientKeyPath string
}

type NewBucketDetail struct {
	NewBucketID  string
	NewBucketKey string
}

type NewsEntry struct {
	OrganizationID string
	DateTime       int64
	TextContent    string
}

type OSInfo struct {
	Version      string `json:"version,omitempty"`
	Distribution string `json:"distribution,omitempty"`
	Build        string `json:"build,omitempty"`
}

type Office365Connection struct {
	FeatureFlag          string
	Credential           Office365Credential
	CustomSetting        Office365CustomSetting
	MailboxUniqueMembers []string
	SiteUniqueMembers    []string
	CustomSettingV2      Office365CustomSettingV2
}

type Office365Credential struct {
	AppID    string
	TenantID string
	Secret   string
	AppCert  string
	Region   string
}

// Deprecated: This struct has been deprecated since Comet version 21.9.xx
type Office365CustomSetting struct {
	MailboxStrategy string
	SiteStrategy    string
	MailboxUserIDs  []string
	MailboxGroupIDs []string
	SiteIDs         []string
}

type Office365CustomSettingV2 struct {
	Organization        bool
	BackupOptions       map[string]uint `json:",omitempty"`
	MemberBackupOptions map[string]uint `json:",omitempty"`
}

type Office365MixedVirtualAccount struct {
	ID                   string   `json:"id"`
	Type                 uint     `json:",omitempty"`
	DisplayName          string   `json:",omitempty"`
	Mail                 string   `json:",omitempty"`
	JobTitle             string   `json:",omitempty"`
	SiteID               string   `json:",omitempty"`
	WebID                string   `json:",omitempty"`
	WebURL               string   `json:",omitempty"`
	UserPrincipalName    string   `json:",omitempty"`
	EnabledServiceOption uint     `json:",omitempty"`
	Members              []string `json:",omitempty"`
	ServiceOptions       uint     `json:",omitempty"`
	MemberServiceOptions uint     `json:",omitempty"`
	HasLicense           bool     `json:"hasLicense,omitempty"`
}

type Office365ObjectInfo struct {
	GUID    string
	Name    string
	Type    string
	Value   string
	Members []string
}

type Organization struct {
	Name                string
	Hosts               []string
	SoftwareBuildRole   SoftwareBuildRoleOptions
	Branding            BrandingOptions
	RemoteStorage       []RemoteStorageOption
	ConstellationRole   ConstellationRoleOptions
	WebhookOptions      map[string]WebhookOption
	PSAConfigs          []PSAConfig
	Email               EmailOptions
	IsSuspended         bool
	ExperimentalOptions []string `json:",omitempty"`
}

type OrganizationLoginURLResponse struct {
	LoginURL string
}

type OrganizationResponse struct {
	Status       int
	Message      string
	ID           string
	Organization Organization
}

type PSAConfig struct {
	URL           string
	CustomHeaders map[string]string `json:",omitempty"`
	Type          PSAType
	PartnerKey    string `json:",omitempty"`
}

type Partition struct {
	DeviceName                string
	Filesystem                string
	VolumeName                string
	VolumeGuid                string
	VolumeSerial              string
	MountPoints               []string
	ReadOffset                int64
	Size                      int64
	UsedSize                  int64
	Flags                     int64
	BytesPerFilesystemCluster int64
}

type PrivateBrandingProperties struct {
	BuildMode                           ClientBrandingBuildMode
	PathIcoFile                         string
	PathIcnsFile                        string
	PathMenuBarIcnsFile                 string
	PathEulaRtf                         string
	PathTilePng                         string
	PathHeaderImage                     string
	PathAppIconImage                    string
	PackageIdentifier                   string
	WindowsCodeSignPKCS12FilePath       string
	WindowsCodeSignPKCS12PasswordFormat uint64
	WindowsCodeSignPKCS12Password       string
	WindowsCodeSignPKCS11Engine         string
	WindowsCodeSignPKCS11Module         string
	WindowsCodeSignPKCS11Certfile       string
	WindowsCodeSignPKCS11KeyID          string
	WindowsCodeSignPKCS11PasswordFormat uint64
	WindowsCodeSignPKCS11Password       string
	MacOSCodeSign                       MacOSCodeSignProperties
}

type ProtectedItemEngineTypePolicy struct {
	ShouldRestrictEngineTypeList    bool
	AllowedEngineTypeWhenRestricted []string
}

type PublicBrandingProperties struct {
	ProductName           string
	CompanyName           string
	HelpURL               string
	HelpIsPopup           bool
	DefaultLoginServerURL string
	TileBackgroundColor   string
	AccountRegisterURL    string
	HideBackgroundLogo    bool
}

type RatelimitOptions struct {
	Rules []RatelimitRule `json:",omitempty"`
}

type RatelimitRule struct {
	MatchRegex     string
	BytesPerSecond uint64
}

type RegisterOfficeApplicationBeginResponse struct {
	Continuation    string
	VerificationURL string
	UserCode        string
}

type RegisterOfficeApplicationCheckResponse struct {
	Continuation string
	Completed    bool
	Error        string
	Result       Office365Credential `json:",omitempty"`
}

type RemoteServerAddress struct {
	Type          RemoteServerType
	Description   string
	RemoteAddress string                                   `json:",omitempty"`
	Username      string                                   `json:",omitempty"`
	Password      string                                   `json:",omitempty"`
	LDAP          ExternalLDAPAuthenticationSourceSettings `json:",omitempty"`
	B2            B2VirtualStorageRoleSettings             `json:",omitempty"`
	Wasabi        WasabiVirtualStorageRoleSettings         `json:",omitempty"`
	Custom        CustomRemoteBucketSettings               `json:",omitempty"`
	S3            S3GenericVirtualStorageRole              `json:",omitempty"`
	// Amazon AWS - Virtual Storage Role
	AWS   AmazonAWSVirtualStorageRoleSettings `json:",omitempty"`
	Storj StorjVirtualStorageRoleSetting      `json:",omitempty"`
}

type RemoteStorageOption struct {
	Type          RemoteServerType
	Description   string
	RemoteAddress string                                   `json:",omitempty"`
	Username      string                                   `json:",omitempty"`
	Password      string                                   `json:",omitempty"`
	LDAP          ExternalLDAPAuthenticationSourceSettings `json:",omitempty"`
	B2            B2VirtualStorageRoleSettings             `json:",omitempty"`
	Wasabi        WasabiVirtualStorageRoleSettings         `json:",omitempty"`
	Custom        CustomRemoteBucketSettings               `json:",omitempty"`
	S3            S3GenericVirtualStorageRole              `json:",omitempty"`
	// Amazon AWS - Virtual Storage Role
	AWS                 AmazonAWSVirtualStorageRoleSettings `json:",omitempty"`
	Storj               StorjVirtualStorageRoleSetting      `json:",omitempty"`
	StorageLimitEnabled bool
	StorageLimitBytes   int64
	RebrandStorage      bool
}

type ReplicaServer struct {
	Type          RemoteServerType
	Description   string
	RemoteAddress string                                   `json:",omitempty"`
	Username      string                                   `json:",omitempty"`
	Password      string                                   `json:",omitempty"`
	LDAP          ExternalLDAPAuthenticationSourceSettings `json:",omitempty"`
	B2            B2VirtualStorageRoleSettings             `json:",omitempty"`
	Wasabi        WasabiVirtualStorageRoleSettings         `json:",omitempty"`
	Custom        CustomRemoteBucketSettings               `json:",omitempty"`
	S3            S3GenericVirtualStorageRole              `json:",omitempty"`
	// Amazon AWS - Virtual Storage Role
	AWS                     AmazonAWSVirtualStorageRoleSettings `json:",omitempty"`
	Storj                   StorjVirtualStorageRoleSetting      `json:",omitempty"`
	ReplicaDeletionStrategy ReplicaDeletionStrategy             `json:",omitempty"`
}

type ReplicatorStateAPIResponse struct {
	Description          string
	RemoteServerID       string
	DisplayClass         ReplicatorDisplayClass
	ActiveWorkers        int32
	TotalWorkers         int
	State                ReplicatorState
	ItemsQueued          int
	BytesQueued          int64
	LastWorkerSubmitTime int64
	CurrentTime          int64
	ItemsReplicated      int64
	BytesReplicated      int64
}

type RequestStorageVaultResponseMessage struct {
	Status        int
	Message       string
	DestinationID string
}

type RestoreJobAdvancedOptions struct {
	Type                   RestoreType
	OverwriteExistingFiles bool
	OverwriteIfNewer       bool
	DestIsOriginalLocation bool
	DestPath               string
	ExactDestPaths         []string
	ArchiveFormat          RestoreArchiveFormat
	Office365Credential    RestoreOffice365Credential `json:",omitempty"`
	Username               string
	Password               string
	Host                   string
	Port                   string
	UseSsl                 bool
	SslAllowInvalid        bool
	SslCaFile              string
	SslCrtFile             string
	SslKeyFile             string
	MsSqlConnection        MSSQLLoginArgs `json:",omitempty"`
}

type RetentionPolicy struct {
	Mode   RetentionMode
	Ranges []RetentionRange
}

type RetentionRange struct {
	Type        RetentionRangeType
	Timestamp   int64
	Jobs        int64
	Days        int64
	Weeks       int64
	Months      int64
	WeekOffset  int64
	MonthOffset int64
}

type S3DestinationLocation struct {
	S3Server        string
	S3UsesTLS       bool
	S3AccessKey     string
	S3SecretKey     string
	S3BucketName    string
	S3Subdir        string
	S3CustomRegion  string
	S3UsesV2Signing bool
}

type S3GenericVirtualStorageRole struct {
	S3Endpoint   string
	IAMEndpoint  string
	MasterBucket string
	AccessKey    string
	SecretKey    string
}

type SFTPDestinationLocation struct {
	SFTPServer                       string
	SFTPUsername                     string
	SFTPRemotePath                   string
	SFTPAuthMode                     SftpAuthMode
	SFTPPassword                     string
	SFTPPrivateKey                   string
	SFTPCustomAuth_UseKnownHostsFile bool
	SFTPCustomAuth_KnownHostsFile    string
}

type SSHConnection struct {
	SSHServer                       string
	SSHUsername                     string
	SSHAuthMode                     SSHAuthMode
	SSHPassword                     string
	SSHPrivateKey                   string
	SSHCustomAuth_UseKnownHostsFile bool
	SSHCustomAuth_KnownHostsFile    string
}

type ScheduleConfig struct {
	FrequencyType   uint64
	SecondsPast     uint64
	Offset          int64 `json:",omitempty"`
	RestrictRuntime bool
	FromTime        HourSchedConfig
	ToTime          HourSchedConfig
	RestrictDays    bool
	DaysSelect      DaysOfWeekConfig
	RandomDelaySecs uint64 `json:",omitempty"`
}

type SearchClause struct {
	ClauseType     SearchClauseType
	RuleField      string
	RuleOperator   SearchOperatorType
	RuleValue      string
	ClauseChildren []SearchClause `json:",omitempty"`
}

type SelfBackupExportOptions struct {
	Location              DestinationLocation
	EncryptionKey         string
	EncryptionKeyFormat   uint64
	Compression           CompressMode
	ExcludeJobsDB         bool
	RestrictToSingleOrgID string `json:",omitempty"`
	Index                 int
}

type SelfBackupOptions struct {
	Targets []SelfBackupTarget
}

type SelfBackupStatistics struct {
	CurrentRunStart int64
	LastRunStart    int64
	LastRunEnd      int64
	LastRunSuccess  bool
	LastRunSize     int64
}

type SelfBackupTarget struct {
	Schedule              []ScheduleConfig
	ScheduleTimezone      string
	RetentionPolicy       RetentionPolicy
	Location              DestinationLocation
	EncryptionKey         string
	EncryptionKeyFormat   uint64
	Compression           CompressMode
	ExcludeJobsDB         bool
	RestrictToSingleOrgID string `json:",omitempty"`
	Index                 int
}

type ServerConfigOptions struct {
	AdminUsers               []AllowedAdminUser
	AuthenticationRole       AuthenticationRoleOptions
	Branding                 BrandingOptions
	ConstellationRole        ConstellationRoleOptions
	ConstellationRole_Legacy ConstellationRoleOptions `json:"OverseerRole,omitempty"`
	Email                    EmailOptions
	ExperimentalOptions      []string `json:",omitempty"`
	ExternalAdminUserSources map[string]ExternalAuthenticationSource
	IPRateLimit              RatelimitOptions
	License                  LicenseOptions
	ListenAddresses          []HTTPConnectorOptions
	Organizations            map[string]Organization
	PSAConfigs               []PSAConfig
	SelfBackup               SelfBackupOptions
	SessionSettings          SessionOptions
	SoftwareBuildRole        SoftwareBuildRoleOptions
	StorageRole              StorageRoleOptions
	TrustXForwardedFor       bool
	WebhookOptions           map[string]WebhookOption
}

type ServerConfigOptionsBrandingFragment struct {
	Branding BrandingOptions
}

type ServerConfigOptionsSoftwareBuildRoleFragment struct {
	SoftwareBuildRole SoftwareBuildRoleOptions
}

type ServerMetaBrandingProperties struct {
	BrandName                     string
	ProductName                   string
	HasImage                      bool
	ImageEtag                     string
	TopColor                      string
	HideNewsArea                  bool
	AllowUnauthenticatedDownloads bool
	AllowAuthenticatedDownloads   bool
	PruneLogsAfterDays            int64
	ExpiredInSeconds              int64
}

type ServerMetaVersionInfo struct {
	Version                                        string
	VersionCodename                                string
	StorageRole                                    bool
	AuthenticationRole                             bool
	SoftwareBuildRole                              bool
	ConstellationRole_Legacy                       bool `json:"OverseerRole"`
	ConstellationRole                              bool
	ExperimentalOptions                            []string `json:",omitempty"`
	ServerStartTime                                int64
	ServerStartHash                                string
	CurrentTime                                    int64
	ServerLicenseHash                              string
	ServerLicenseFeaturesAll                       bool
	ServerLicenseFeatureSet                        uint32
	LicenseValidUntil                              int64
	EmailsSentSuccessfully                         int64
	EmailsSentErrors                               int64
	EmailsWaitingInQueue                           int64
	ScheduledEmailThreadCurrentState               int64
	ScheduledEmailThreadLastCalculateDurationNanos int64
	ScheduledEmailThreadWaitingUntil               int64
	ScheduledEmailThreadLastWakeTime               int64
	ScheduledEmailThreadLastWakeSentEmails         bool
	SelfBackup                                     []SelfBackupStatistics
}

type SessionKeyRegeneratedResponse struct {
	Status      int
	Message     string
	SessionKey  string
	SessionType string
}

type SessionOptions struct {
	ExpiredInSeconds uint64
}

type SizeMeasurement struct {
	Size             int64
	MeasureStarted   int64
	MeasureCompleted int64
}

type SoftwareBuildRoleOptions struct {
	RoleEnabled                   bool
	AllowUnauthenticatedDownloads bool
}

type SoftwareUpdateNewsResponse struct {
	LatestStable     string   `json:"latest_stable"`
	LatestPrerelease string   `json:"latest_prerelease"`
	DownloadsURL     string   `json:"downloads_url"`
	WhatsNew         []string `json:"updates_info"`
}

type SourceBasicInfo struct {
	Description                  string
	O365AccountCount             int64
	Size                         int64
	OverrideDestinationRetention map[string]RetentionPolicy `json:",omitempty"`
}

type SourceConfig struct {
	Engine                       string
	Description                  string
	OwnerDevice                  string
	CreateTime                   int64
	ModifyTime                   int64
	PreExec                      []string
	ThawExec                     []string
	PostExec                     []string
	EngineProps                  map[string]string
	OverrideDestinationRetention map[string]RetentionPolicy `json:",omitempty"`
	Statistics                   SourceStatistics           `json:",omitempty"`
}

type SourceIncludePattern struct {
	TopDirectory string
	Value        string
}

type SourceStatistics struct {
	LastBackupJob           BackupJobDetail
	LastSuccessfulBackupJob BackupJobDetail
}

type SpannedDestinationLocation struct {
	SpanTargets        []DestinationLocation
	SpanUseStaticSlots bool
}

type SpannedStorageExtraInfo struct {
	Targets []StorageFreeSpaceInfo
}

type StatResult struct {
	Buckets        int64
	Users          int64
	Devices        int64
	Boosters       int64
	NetworkDevices int64
}

type StorageFreeSpaceInfo struct {
	Unlimited      bool
	UsedPercent    float32
	AvailableBytes uint64
	Spanned        SpannedStorageExtraInfo `json:",omitempty"`
	B2             B2StorageExtraInfo      `json:",omitempty"`
}

type StorageRoleOptions struct {
	RoleEnabled         bool
	Storage             DestinationLocation
	LocalStorage_Legacy []LocalStorageDirectory `json:"LocalStorage,omitempty"`
	ReplicateTo         []ReplicaServer
}

type StorageVaultProviderPolicy struct {
	ShouldRestrictProviderList     bool
	AllowedProvidersWhenRestricted []uint64
}

type StoredObject struct {
	Name       string `json:"name"`
	ModifyTime int64  `json:"mtime"`
	// One of the STOREDOBJECTTYPE_... constant values
	Type                string `json:"type"`
	Subtree             string `json:"subtree"`
	Size                uint64 `json:"size"`
	DisplayName         string `json:"dname,omitempty"`
	ItemClass           string `json:"itemClass,omitempty"`
	From                string `json:"from,omitempty"`
	To                  string `json:"to,omitempty"`
	ReceivedDateTime    int64  `json:"rtime,omitempty"`
	HasAttachments      bool   `json:"has_attachments,omitempty"`
	StartTime           int64  `json:"stime,omitempty"`
	EndTime             int64  `json:"etime,omitempty"`
	RecursiveCountKnown bool   `json:"r,omitempty"`
	RecursiveFiles      uint64 `json:"f,omitempty"`
	RecursiveBytes      uint64 `json:"b,omitempty"`
	RecursiveFolders    uint64 `json:"d,omitempty"`
}

type StorjDestinationLocation struct {
	SatelliteAddress  string
	APIKey            string
	Passphrase        string
	StorjBucket       string
	StorjBucketPrefix string `json:",omitempty"`
}

type StorjVirtualStorageRoleSetting struct {
	SatelliteAddress string
	APIKey           string
	Passphrase       string
	Bucket           string
}

type StreamableEvent struct {
	OwnerOrganizationID string
	Type                StreamableEventType
	Data                interface{} `json:",omitempty"`
}

type SwiftDestinationLocation struct {
	Username               string `json:",omitempty"`
	APIKey                 string `json:",omitempty"`
	Region                 string `json:",omitempty"`
	AuthURL                string `json:",omitempty"`
	Domain                 string `json:",omitempty"`
	Tenant                 string `json:",omitempty"`
	TenantDomain           string `json:",omitempty"`
	TenantID               string `json:",omitempty"`
	TrustID                string `json:",omitempty"`
	AuthToken              string `json:",omitempty"`
	Prefix                 string `json:",omitempty"`
	Container              string `json:",omitempty"`
	DefaultContainerPolicy string `json:",omitempty"`
}

type TestResponse struct {
	Status  int
	Message string
	Exists  bool
}

type TotpRegeneratedResponse struct {
	Status      int
	Message     string
	Image       string
	URL         string
	ProfileHash string
}

// Deprecated: This struct has been deprecated since Comet version 21.12.0
type U2FRegisterRequest struct {
	Challenge string
	Version   string
}

// Deprecated: This struct has been deprecated since Comet version 21.12.0
type U2FRegisteredKey struct {
	AppID     string
	KeyHandle string
	Version   string
}

// Deprecated: This struct has been deprecated since Comet version 21.12.0
type U2FRegistrationChallengeResponse struct {
	Status           int
	Message          string
	ChallengeID      string
	AppID            string
	RegisteredKeys   []U2FRegisteredKey
	RegisterRequests []U2FRegisterRequest
}

// Deprecated: This struct has been deprecated since Comet version 21.12.0
type U2FSignRequest struct {
	ChallengeID    string
	ChallengeData  string
	AppID          string
	RegisteredKeys []U2FRegisteredKey
}

// Deprecated: This struct has been deprecated since Comet version 21.12.0
type U2FSignResponse struct {
	ChallengeID string
	KeyHandle   string
	Signature   string
	ClientData  string
}

type UninstallConfig struct {
	UninstallFlag    bool
	RemoveConfigFile bool
}

type UpdateCampaignDeviceStatus struct {
	Status UpdateStatus
}

// This data structure describes which devices should receive a remote software upgrade. Both the
// target version criteria (UpgradeOlder/ReinstallCurrentVer/DowngradeNewer) and the target device
// criteria (ApplyDeviceFilter/DeviceFilter) must be met in order for the remote upgrade to be
// applied.
type UpdateCampaignOptions struct {
	Active              bool
	UpgradeOlder        bool
	ReinstallCurrentVer bool
	DowngradeNewer      bool
	ForceUpgradeRunning bool
	ApplyDeviceFilter   bool
	DeviceFilter        SearchClause
}

type UpdateCampaignProperties struct {
	Active              bool
	UpgradeOlder        bool
	ReinstallCurrentVer bool
	DowngradeNewer      bool
	ForceUpgradeRunning bool
	ApplyDeviceFilter   bool
	DeviceFilter        SearchClause
	StartTime           int64
	TargetVersion       string
}

type UpdateCampaignStatus struct {
	Active              bool
	UpgradeOlder        bool
	ReinstallCurrentVer bool
	DowngradeNewer      bool
	ForceUpgradeRunning bool
	ApplyDeviceFilter   bool
	DeviceFilter        SearchClause
	StartTime           int64
	TargetVersion       string
	Devices             []UpdateCampaignStatusDeviceEntry
}

type UpdateCampaignStatusDeviceEntry struct {
	Username string
	DeviceID string
	Status   UpdateStatus
}

type UserCustomEmailSettings struct {
	Reports []EmailReportConfig
}

type UserOnServer struct {
	ServerID int
	Username string
}

type UserPolicy struct {
	PreventRequestStorageVault       bool
	PreventAddCustomStorageVault     bool
	PreventEditStorageVault          bool
	HideCloudStorageBranding         bool
	PreventDeleteStorageVault        bool
	StorageVaultProviders            StorageVaultProviderPolicy
	PreventNewProtectedItem          bool
	PreventEditProtectedItem         bool
	PreventDeleteProtectedItem       bool
	ProtectedItemEngineTypes         ProtectedItemEngineTypePolicy
	FileAndFolderMandatoryExclusions []ExtraFileExclusion `json:",omitempty"`
	ModeScheduleSkipAlreadyRunning   DefaultSettingMode   `json:",omitempty"`
	ModeAdminResetPassword           DefaultSettingMode   `json:",omitempty"`
	ModeAdminViewFilenames           DefaultSettingMode   `json:",omitempty"`
	ModeRequireUserResetPassword     DefaultSettingMode   `json:",omitempty"`
	PreventDeleteSingleSnapshots     bool
	PreventChangeAccountPassword     bool
	PreventChangeEmailSettings       bool
	PreventChangeAccountName         bool
	PreventOpenAppUI                 bool
	RequirePasswordOpenAppUI         bool
	HideAppImport                    bool
	HideAppVersion                   bool
	PreventOpenWebUI                 bool
	PreventViewDeviceNames           bool
	DefaultEmailReports              DefaultEmailReportPolicy
	DefaultStorageVaultRetention     RetentionPolicy
	EnforceStorageVaultRetention     bool
	PreventProtectedItemRetention    bool
	DefaultSources                   map[string]SourceConfig
	DefaultSourcesBackupRules        map[string]BackupRuleConfig
	DefaultSourcesWithOSRestriction  map[string]DefaultSourceWithOSRestriction
	DefaultBackupRules               map[string]BackupRuleConfig
	RandomDelaySecs                  uint64 `json:",omitempty"`
}

// This is the main data structure for a user's profile.
type UserProfileConfig struct {
	Username      string
	AccountName   string
	LocalTimezone string
	LanguageCode  string
	// Tenant
	OrganizationID        string `json:",omitempty"`
	Emails                []string
	OverrideEmailSettings map[string]UserCustomEmailSettings
	SendEmailReports      bool
	// Storage Vaults
	Destinations map[string]DestinationConfig
	// Protected Items
	Sources                         map[string]SourceConfig
	BackupRules                     map[string]BackupRuleConfig
	Devices                         map[string]DeviceConfig
	IsSuspended                     bool
	AllProtectedItemsQuotaEnabled   bool
	AllProtectedItemsQuotaBytes     int64
	MaximumDevices                  int64
	QuotaOffice365ProtectedAccounts int64
	// If the PolicyID field is set to a non-empty string, the Comet Server will enforce the contents
	// of the Policy field based on the matching server's policy. Otherwise if the PolicyID field is
	// set to an empty string, the administrator may configure any custom values in the Policy field.
	PolicyID string
	Policy   UserPolicy
	// To change the user's password, use the AdminResetUserPassword API instead of accessing these
	// fields directly. Otherwise, other encrypted fields in the user profile may become corrupted.
	PasswordFormat            int
	PasswordHash              string
	PasswordRecovery          string `json:",omitempty"`
	AllowPasswordLogin        bool
	AllowPasswordAndTOTPLogin bool
	TOTPKeyEncryptionFormat   int
	TOTPKey                   string
	RequirePasswordChange     bool
	CreateTime                int64
	CreationGUID              string
	ServerConfig              UserServerConfig `json:",omitempty"`
}

type UserProfileFragment struct {
	Username string
}

type UserServerConfig struct {
	RandomDelaySecs uint64 `json:",omitempty"`
}

type VMDKSnapshotViewOptions struct {
	Enabled       bool
	PartitionGUID string
	ListPath      string
}

type VSSComponent struct {
	Path       string
	Name       string
	CType      string
	Selectable bool
}

type VSSWriterInfo struct {
	DisplayName string
	Components  []VSSComponent
}

type VaultSnapshot struct {
	Snapshot            string
	Source              string
	CreateTime          int64
	HasOriginalPathInfo bool
}

type WasabiVirtualStorageRoleSettings struct {
	MasterBucket string
	AccessKey    string
	SecretKey    string
}

type WebAuthnAuthenticatorSelection struct {
	AuthenticatorAttachment string `json:"authenticatorAttachment,omitempty"`
	RequireResidentKey      bool   `json:"requireResidentKey,omitempty"`
	ResidentKey             string `json:"residentKey,omitempty"`
	UserVerification        string `json:"userVerification,omitempty"`
}

type WebAuthnCredential struct {
	PublicKey       []byte
	AttestationType string
	AAGUID          []byte
	SignCount       uint32
	CloneWarning    bool
}

type WebAuthnCredentialAssertion struct {
	Response WebAuthnPublicKeyCredentialRequestOptions `json:"publicKey"`
}

type WebAuthnCredentialDescriptor struct {
	Type         string   `json:"type"`
	CredentialID []byte   `json:"id"`
	Transport    []string `json:"transports,omitempty"`
}

type WebAuthnCredentialEntity struct {
	Name string `json:"name"`
	Icon string `json:"icon,omitempty"`
}

type WebAuthnCredentialParameter struct {
	Type      string `json:"type"`
	Algorithm int    `json:"alg"`
}

type WebAuthnPublicKeyCredentialCreationOptions struct {
	Challenge              []byte                           `json:"challenge"`
	RelyingParty           WebAuthnRelyingPartyEntity       `json:"rp"`
	User                   WebAuthnUserEntity               `json:"user"`
	Parameters             []WebAuthnCredentialParameter    `json:"pubKeyCredParams,omitempty"`
	AuthenticatorSelection WebAuthnAuthenticatorSelection   `json:"authenticatorSelection,omitempty"`
	Timeout                int                              `json:"timeout,omitempty"`
	CredentialExcludeList  []WebAuthnCredentialDescriptor   `json:"excludeCredentials,omitempty"`
	Extensions             WebAuthnAuthenticationExtensions `json:"extensions,omitempty"`
	Attestation            string                           `json:"attestation,omitempty"`
}

type WebAuthnPublicKeyCredentialRequestOptions struct {
	Challenge          []byte                           `json:"challenge"`
	Timeout            int                              `json:"timeout,omitempty"`
	RelyingPartyID     string                           `json:"rpId,omitempty"`
	AllowedCredentials []WebAuthnCredentialDescriptor   `json:"allowCredentials,omitempty"`
	UserVerification   string                           `json:"userVerification,omitempty"`
	Extensions         WebAuthnAuthenticationExtensions `json:"extensions,omitempty"`
}

type WebAuthnRegistrationChallengeResponse struct {
	Status                    int
	Message                   string
	ChallengeID               string
	CredentialCreationOptions WebAuthnPublicKeyCredentialCreationOptions
}

type WebAuthnRelyingPartyEntity struct {
	Name string `json:"name"`
	Icon string `json:"icon,omitempty"`
	ID   string `json:"id"`
}

type WebAuthnSignRequest struct {
	ChallengeID string
	Assertion   WebAuthnCredentialAssertion
}

type WebAuthnSignResponse struct {
	ChallengeID    string
	CredentialJSON string
}

type WebAuthnUserEntity struct {
	Name        string `json:"name"`
	Icon        string `json:"icon,omitempty"`
	DisplayName string `json:"displayName,omitempty"`
	ID          []byte `json:"id"`
}

type WebInterfaceBrandingProperties struct {
	BrandName    string
	LogoImage    string
	TopColor     string
	Favicon      string
	HideNewsArea bool
}

type WebhookOption struct {
	URL                   string
	WhiteListedEventTypes []StreamableEventType
	CustomHeaders         map[string]string
}

type WinSMBAuth struct {
	SharePath      string
	Username       string
	Password       string
	PasswordFormat uint64
}

type WindowsCodeSignProperties struct {
	WindowsCodeSignPKCS12FilePath       string
	WindowsCodeSignPKCS12PasswordFormat uint64
	WindowsCodeSignPKCS12Password       string
	WindowsCodeSignPKCS11Engine         string
	WindowsCodeSignPKCS11Module         string
	WindowsCodeSignPKCS11Certfile       string
	WindowsCodeSignPKCS11KeyID          string
	WindowsCodeSignPKCS11PasswordFormat uint64
	WindowsCodeSignPKCS11Password       string
}

//
// DEFAULT CLIENT STRUCT
//

// CometAPIClient is the base struct for all request methods
type CometAPIClient struct {
	ServerURL string
	Username  string
	Password  string
}

// NewCometAPIClient constructs and returns an instance of CometAPIClient
func NewCometAPIClient(serverURL, username, password string) (*CometAPIClient, error) {
	_, err := url.ParseRequestURI(serverURL)
	if err != nil {
		return nil, err
	}

	return &CometAPIClient{
		ServerURL: serverURL,
		Username:  username,
		Password:  password,
	}, nil
}

// Request is a convenience method wrapping a basic http request
func (this *CometAPIClient) Request(contentType, method, path string, data map[string][]string) ([]byte, error) {
	u, err := url.ParseRequestURI(this.ServerURL)
	if err != nil {
		return nil, err
	}
	u.Path = path

	// req.Body must be set later on
	req, err := http.NewRequest(strings.ToUpper(method), u.String(), nil)
	if err != nil {
		return nil, err
	}

	switch contentType {
	case "application/x-www-form-urlencoded":
		body := url.Values{}
		if data != nil {
			body = url.Values(data)
		}
		body.Set("AuthType", "Password")
		body.Set("Username", this.Username)
		body.Set("Password", this.Password)
		// This is deprecated and needs to switch to io.NopCloser once using Go 1.16+
		req.Body = ioutil.NopCloser(strings.NewReader(body.Encode()))

		req.Header.Add("Content-Type", contentType)
	case "multipart/form-data":
		body := bytes.Buffer{}
		m := multipart.NewWriter(&body)
		for key, values := range data {
			for _, value := range values {
				m.WriteField(key, value)
			}
		}
		// Same as above, ioutil.NopCloser is deprecated
		req.Body = ioutil.NopCloser(&body)

		req.Header.Add("Content-Type", m.FormDataContentType())
		req.Header.Add("X-Comet-Admin-AuthType", "Password")
		req.Header.Add("X-Comet-Admin-Username", this.Username)
		req.Header.Add("X-Comet-Admin-Password", this.Password)
	default:
		return nil, fmt.Errorf("Unexpected content type: %s", contentType)
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return nil, fmt.Errorf("HTTP request failed (code %d): %v", resp.StatusCode, resp.Status)
	}

	respBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	// Test for CometAPIResponseMessage (Error)
	carm := &CometAPIResponseMessage{}
	err = json.Unmarshal(respBody, carm)
	if err == nil && carm.Message != "" && carm.Status != 0 && carm.Status >= 400 {
		return nil, fmt.Errorf("Error returned from API (code %d): %s", carm.Status, carm.Message)
	}

	return respBody, nil
}

//
// DEFAULT CLIENT METHODS
//

// AdminAccountProperties: Retrieve properties about the current admin account
// Some key parameters are obscured, but the obscured values are safely recognised by the
// corresponding AdminAccountSetProperties API.
//
// You must supply administrator authentication credentials to use this API.
func (this *CometAPIClient) AdminAccountProperties() (*AdminAccountPropertiesResponse, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/account/properties", nil)
	if err != nil {
		return nil, err
	}

	result := &AdminAccountPropertiesResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAccountRegenerateTotp: Generate a new TOTP secret
// The secret is returned as a `data-uri` image of a QR code. The new secret is immediately applied
// to the current admin account.
//
// You must supply administrator authentication credentials to use this API.
func (this *CometAPIClient) AdminAccountRegenerateTotp() (*TotpRegeneratedResponse, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/account/regenerate-totp", nil)
	if err != nil {
		return nil, err
	}

	result := &TotpRegeneratedResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAccountSessionRevoke: Revoke a session key (log out)
//
// You must supply administrator authentication credentials to use this API.
func (this *CometAPIClient) AdminAccountSessionRevoke() (*CometAPIResponseMessage, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/account/session-revoke", nil)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAccountSessionStart: Generate a session key (log in)
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// SelfAddress: (Optional) External URL of this server
func (this *CometAPIClient) AdminAccountSessionStart(SelfAddress *string) (*SessionKeyRegeneratedResponse, error) {
	data := map[string][]string{}
	var err error

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/account/session-start", data)
	if err != nil {
		return nil, err
	}

	result := &SessionKeyRegeneratedResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAccountSessionStartAsUser: Generate a session key for an end-user (log in as end-user)
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// TargetUser: Target account username
func (this *CometAPIClient) AdminAccountSessionStartAsUser(TargetUser string) (*SessionKeyRegeneratedResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/account/session-start-as-user", data)
	if err != nil {
		return nil, err
	}

	result := &SessionKeyRegeneratedResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAccountSetProperties: Update settings for your own admin account
// Updating your account password requires you to supply your current password.
// To set a new plaintext password, use a password format of 0 (PASSWORD_FORMAT_PLAINTEXT).
// This API does not currently allow you to modify your TOTP secret or IP whitelist.
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// Security: Updated account properties
func (this *CometAPIClient) AdminAccountSetProperties(Security AdminSecurityOptions) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(Security)
	if err != nil {
		return nil, err
	}
	data["Security"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/account/set-properties", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAccountU2fRequestRegistrationChallenge: Register a new FIDO U2F token
// Browser support for U2F is ending in February 2022. WebAuthn is backwards
// compatible with U2F keys, and Comet will automatically migrate existing U2F keys
// to allow their use with the WebAuthn endpoints.
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// SelfAddress: External URL of this server, used as U2F AppID and Facet
func (this *CometAPIClient) AdminAccountU2fRequestRegistrationChallenge(SelfAddress string) (*U2FRegistrationChallengeResponse, error) {
	data := map[string][]string{}
	var err error

	data["SelfAddress"] = []string{SelfAddress}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/account/u2f/request-registration-challenge", data)
	if err != nil {
		return nil, err
	}

	result := &U2FRegistrationChallengeResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAccountU2fSubmitChallengeResponse: Register a new FIDO U2F token
// Browser support for U2F is ending in February 2022. WebAuthn is backwards
// compatible with U2F keys, and Comet will automatically migrate existing U2F keys
// to allow their use with the WebAuthn endpoints.
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// U2FChallengeID: Associated value from AdminAccountU2fRequestRegistrationChallenge API
// U2FClientData: U2F response data supplied by hardware token
// U2FRegistrationData: U2F response data supplied by hardware token
// U2FVersion: U2F response data supplied by hardware token
// Description: (Optional) Description of the token
func (this *CometAPIClient) AdminAccountU2fSubmitChallengeResponse(U2FChallengeID string, U2FClientData string, U2FRegistrationData string, U2FVersion string, Description *string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["U2FChallengeID"] = []string{U2FChallengeID}

	data["U2FClientData"] = []string{U2FClientData}

	data["U2FRegistrationData"] = []string{U2FRegistrationData}

	data["U2FVersion"] = []string{U2FVersion}

	if Description != nil {
		data["Description"] = []string{*Description}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/account/u2f/submit-challenge-response", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAccountValidateTotp: Validate the TOTP code before turning 2fa(TOTP) on
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// TOTPCode: Six-digit code after scanning barcode image
func (this *CometAPIClient) AdminAccountValidateTotp(TOTPCode string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TOTPCode"] = []string{TOTPCode}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/account/validate-totp", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAccountWebauthnRequestRegistrationChallenge: Register a new FIDO2 WebAuthn token
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// SelfAddress: External URL of this server, used as WebAuthn ID
func (this *CometAPIClient) AdminAccountWebauthnRequestRegistrationChallenge(SelfAddress string) (*WebAuthnRegistrationChallengeResponse, error) {
	data := map[string][]string{}
	var err error

	data["SelfAddress"] = []string{SelfAddress}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/account/webauthn/request-registration-challenge", data)
	if err != nil {
		return nil, err
	}

	result := &WebAuthnRegistrationChallengeResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAccountWebauthnSubmitChallengeResponse: Register a new FIDO2 WebAuthn token
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// SelfAddress: External URL of this server, used as WebAuthn ID
// ChallengeID: Associated value from AdminAccountWebAuthnRequestRegistrationChallenge API
// Credential: JSON-encoded credential
func (this *CometAPIClient) AdminAccountWebauthnSubmitChallengeResponse(SelfAddress string, ChallengeID string, Credential string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["SelfAddress"] = []string{SelfAddress}

	data["ChallengeID"] = []string{ChallengeID}

	data["Credential"] = []string{Credential}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/account/webauthn/submit-challenge-response", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAddUser: Add a new user account
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: New account username
// TargetPassword: New account password
// StoreRecoveryCode: (Optional) If set to 1, store and keep a password recovery code for the
// generated user (>= 18.3.9)
// RequirePasswordChange: (Optional) If set to 1, require to reset password at the first login for
// the generated user (>= 20.3.4)
// TargetOrganization: (Optional) If present, create the user account on behalf of another
// organization. Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)
func (this *CometAPIClient) AdminAddUser(TargetUser string, TargetPassword string, StoreRecoveryCode *int, RequirePasswordChange *int, TargetOrganization *string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetUser"] = []string{TargetUser}

	data["TargetPassword"] = []string{TargetPassword}

	if StoreRecoveryCode != nil {
		b, err = json.Marshal(StoreRecoveryCode)
		if err != nil {
			return nil, err
		}
		data["StoreRecoveryCode"] = []string{string(b)}
	}

	if RequirePasswordChange != nil {
		b, err = json.Marshal(RequirePasswordChange)
		if err != nil {
			return nil, err
		}
		data["RequirePasswordChange"] = []string{string(b)}
	}

	if TargetOrganization != nil {
		data["TargetOrganization"] = []string{*TargetOrganization}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/add-user", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAddUserFromProfile: Add a new user account (with all information)
// This allows you to create a new account and set all its properties at once (e.g. during account
// replication). Developers creating a signup form may find it simpler to use the AdminAddUser and
// AdminGetUserProfile / AdminSetUserProfile APIs separately.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: New account username
// ProfileData: New account profile
// TargetOrganization: (Optional) If present, create the user account on behalf of another
// organization. Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)
func (this *CometAPIClient) AdminAddUserFromProfile(TargetUser string, ProfileData UserProfileConfig, TargetOrganization *string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetUser"] = []string{TargetUser}

	b, err = json.Marshal(ProfileData)
	if err != nil {
		return nil, err
	}
	data["ProfileData"] = []string{string(b)}

	if TargetOrganization != nil {
		data["TargetOrganization"] = []string{*TargetOrganization}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/add-user-from-profile", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAdminUserDelete: Delete an administrator
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
//
// - Params
// TargetUser: the username of the admin to be deleted
func (this *CometAPIClient) AdminAdminUserDelete(TargetUser string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/admin-user/delete", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAdminUserList: List administrators
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
func (this *CometAPIClient) AdminAdminUserList() ([]AllowedAdminUser, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/admin-user/list", nil)
	if err != nil {
		return nil, err
	}

	result := []AllowedAdminUser{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminAdminUserNew: Add a new administrator
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
//
// - Params
// TargetUser: the username for this new admin
// TargetPassword: the password for this new admin user
// TargetOrgID: (Optional) provide the organization ID for this user, it will default to the org of
// the authenticating user otherwise
func (this *CometAPIClient) AdminAdminUserNew(TargetUser string, TargetPassword string, TargetOrgID *string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	data["TargetPassword"] = []string{TargetPassword}

	if TargetOrgID != nil {
		data["TargetOrgID"] = []string{*TargetOrgID}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/admin-user/new", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminBrandingAvailablePlatforms: List available software download platforms
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) AdminBrandingAvailablePlatforms() (map[int]AvailableDownload, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/available-platforms", nil)
	if err != nil {
		return nil, err
	}

	result := map[int]AvailableDownload{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminBrandingGenerateClientByPlatform: Download software
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// Platform: The selected download platform, from the AdminBrandingAvailablePlatforms API
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientByPlatform(Platform int, SelfAddress *string) ([]byte, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(Platform)
	if err != nil {
		return nil, err
	}
	data["Platform"] = []string{string(b)}

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/by-platform", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminBrandingGenerateClientLinuxgeneric: Download software (Linux Server .run)
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientLinuxgeneric(SelfAddress *string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/linuxgeneric", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminBrandingGenerateClientMacosArm64: Download software (macOS arm64 pkg)
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientMacosArm64(SelfAddress *string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/macos-arm64", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminBrandingGenerateClientMacosX8664: Download software (macOS x86_64 pkg)
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientMacosX8664(SelfAddress *string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/macos-x86_64", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminBrandingGenerateClientSpkDsm6: Download software (Synology SPK for DSM 6)
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientSpkDsm6(SelfAddress *string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/spk-dsm6", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminBrandingGenerateClientSpkDsm7: Download software (Synology SPK for DSM 7)
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientSpkDsm7(SelfAddress *string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/spk-dsm7", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminBrandingGenerateClientTest: Check if a software download is available
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// Platform: The selected download platform, from the AdminBrandingAvailablePlatforms API
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientTest(Platform int, SelfAddress *string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(Platform)
	if err != nil {
		return nil, err
	}
	data["Platform"] = []string{string(b)}

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/test", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminBrandingGenerateClientWindowsAnycpuExe: Download software update (Windows AnyCPU exe)
// The exe endpoints are not recommended for end-users, as they may not be able to provide a
// codesigned installer if no custom codesigning certificate is present.
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientWindowsAnycpuExe(SelfAddress *string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/windows-anycpu-exe", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminBrandingGenerateClientWindowsAnycpuZip: Download software (Windows AnyCPU zip)
// The zip endpoints are recommended for end-users, as they may be able to provide a codesigned
// installer even when no custom codesigning certificate is present.
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientWindowsAnycpuZip(SelfAddress *string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/windows-anycpu-zip", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminBrandingGenerateClientWindowsX8632Exe: Download software update (Windows x86_32 exe)
// The exe endpoints are not recommended for end-users, as they may not be able to provide a
// codesigned installer if no custom codesigning certificate is present.
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientWindowsX8632Exe(SelfAddress *string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/windows-x86_32-exe", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminBrandingGenerateClientWindowsX8632Zip: Download software (Windows x86_32 zip)
// The zip endpoints are recommended for end-users, as they may be able to provide a codesigned
// installer even when no custom codesigning certificate is present.
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientWindowsX8632Zip(SelfAddress *string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/windows-x86_32-zip", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminBrandingGenerateClientWindowsX8664Exe: Download software update (Windows x86_64 exe)
// The exe endpoints are not recommended for end-users, as they may not be able to provide a
// codesigned installer if no custom codesigning certificate is present.
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientWindowsX8664Exe(SelfAddress *string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/windows-x86_64-exe", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminBrandingGenerateClientWindowsX8664Zip: Download software (Windows x86_64 zip)
// The zip endpoints are recommended for end-users, as they may be able to provide a codesigned
// installer even when no custom codesigning certificate is present.
//
// This API requires administrator authentication credentials, unless the server is configured to
// allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometAPIClient) AdminBrandingGenerateClientWindowsX8664Zip(SelfAddress *string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/branding/generate-client/windows-x86_64-zip", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminBulletinSubmit: Send an email bulletin to all users
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// Subject: Bulletin subject line
// Content: Bulletin message content
func (this *CometAPIClient) AdminBulletinSubmit(Subject string, Content string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["Subject"] = []string{Subject}

	data["Content"] = []string{Content}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/bulletin/submit", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminConstellationLastReport: Get Constellation bucket usage report (cached)
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Constellation Role to be enabled.
func (this *CometAPIClient) AdminConstellationLastReport() (*ConstellationCheckReport, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/constellation/last-report", nil)
	if err != nil {
		return nil, err
	}

	result := &ConstellationCheckReport{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminConstellationNewReport: Get Constellation bucket usage report (regenerate)
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Constellation Role to be enabled.
func (this *CometAPIClient) AdminConstellationNewReport() (*ConstellationCheckReport, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/constellation/new-report", nil)
	if err != nil {
		return nil, err
	}

	result := &ConstellationCheckReport{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminConstellationPruneNow: Prune unused buckets
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
// This API requires the Constellation Role to be enabled.
func (this *CometAPIClient) AdminConstellationPruneNow() (*CometAPIResponseMessage, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/constellation/prune-now", nil)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminConstellationStatus: Get Constellation status
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Constellation Role to be enabled.
func (this *CometAPIClient) AdminConstellationStatus() (*ConstellationStatusAPIResponse, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/constellation/status", nil)
	if err != nil {
		return nil, err
	}

	result := &ConstellationStatusAPIResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminCountJobsForCustomSearch: Count jobs (for custom search)
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// Query: (No description available)
func (this *CometAPIClient) AdminCountJobsForCustomSearch(Query SearchClause) (*CountJobsResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(Query)
	if err != nil {
		return nil, err
	}
	data["Query"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/count-jobs-for-custom-search", data)
	if err != nil {
		return nil, err
	}

	result := &CountJobsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminCreateInstallToken: Create token for silent installation
// Currently only supported for Windows & macOS only
// Provide the installation token to silently install the client on windows `install.exe
// /TOKEN=<installtoken>`
// Provide the installation token to silently install the client on Mac OS `sudo launchctl setenv
// BACKUP_APP_TOKEN "installtoken" && sudo /usr/sbin/installer -allowUntrusted -pkg "Comet
// Backup.pkg" -target /`
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Selected account username
// TargetPassword: Selected account password
// Server: (Optional) External URL of the authentication server that is different from the current
// server
func (this *CometAPIClient) AdminCreateInstallToken(TargetUser string, TargetPassword string, Server *string) (*InstallTokenResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	data["TargetPassword"] = []string{TargetPassword}

	if Server != nil {
		data["Server"] = []string{*Server}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/create-install-token", data)
	if err != nil {
		return nil, err
	}

	result := &InstallTokenResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDeleteUser: Delete user account
// This does not remove any storage buckets. Unused storage buckets will be cleaned up by the
// Constellation Role.
// Any stored data can not be decrypted without the user profile. Misuse can cause data loss!
// This also allows to uninstall software from active devices under the user account
// This also removes all job history for the user account.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Selected account username
// UninstallConfig: (Optional) Uninstall software configuration (>= 20.3.5)
func (this *CometAPIClient) AdminDeleteUser(TargetUser string, UninstallConfig *UninstallConfig) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetUser"] = []string{TargetUser}

	if UninstallConfig != nil {
		b, err = json.Marshal(UninstallConfig)
		if err != nil {
			return nil, err
		}
		data["UninstallConfig"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/delete-user", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDisableUserTotp: Disable user account 2FA(TOTP) authentication
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Selected account username
func (this *CometAPIClient) AdminDisableUserTotp(TargetUser string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/disable-user-totp", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherApplyRetentionRules: Instruct a live connected device to apply retention rules now
// This command is understood by Comet Backup 17.6.9 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Destination: The Storage Vault GUID
func (this *CometAPIClient) AdminDispatcherApplyRetentionRules(TargetID string, Destination string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["Destination"] = []string{Destination}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/apply-retention-rules", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherDeepverifyStorageVault: Instruct a live connected device to deeply verify Storage
// Vault content
// This command is understood by Comet Backup 18.8.2 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Destination: The Storage Vault GUID
func (this *CometAPIClient) AdminDispatcherDeepverifyStorageVault(TargetID string, Destination string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["Destination"] = []string{Destination}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/deepverify-storage-vault", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherDeleteSnapshot: Instruct a live connected device to delete a stored snapshot
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// DestinationID: The Storage Vault GUID
// SnapshotID: The backup job snapshot ID to delete
func (this *CometAPIClient) AdminDispatcherDeleteSnapshot(TargetID string, DestinationID string, SnapshotID string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["DestinationID"] = []string{DestinationID}

	data["SnapshotID"] = []string{SnapshotID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/delete-snapshot", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherDeleteSnapshots: Instruct a live connected device to delete multiple stored
// snapshots
// The target device must be running Comet 20.9.10 or later.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// DestinationID: The Storage Vault GUID
// SnapshotIDs: The backup job snapshot IDs to delete
func (this *CometAPIClient) AdminDispatcherDeleteSnapshots(TargetID string, DestinationID string, SnapshotIDs []string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	data["DestinationID"] = []string{DestinationID}

	b, err = json.Marshal(SnapshotIDs)
	if err != nil {
		return nil, err
	}
	data["SnapshotIDs"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/delete-snapshots", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherDropConnection: Disconnect a live connected device
// The device will almost certainly attempt to reconnect.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
func (this *CometAPIClient) AdminDispatcherDropConnection(TargetID string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/drop-connection", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherEmailPreview: Request HTML content of an email
// The remote device must have given consent for an MSP to browse their mail
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Snapshot: where the email belongs to
// Destination: The Storage Vault ID
// Path: of the email to view
func (this *CometAPIClient) AdminDispatcherEmailPreview(TargetID string, Snapshot string, Destination string, Path string) (*EmailReportGeneratedPreview, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["Snapshot"] = []string{Snapshot}

	data["Destination"] = []string{Destination}

	data["Path"] = []string{Path}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/email-preview", data)
	if err != nil {
		return nil, err
	}

	result := &EmailReportGeneratedPreview{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherGetDefaultLoginUrl: Get the default login URL for a tenant
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
//
// - Params
// OrganizationID: Target organization
func (this *CometAPIClient) AdminDispatcherGetDefaultLoginUrl(OrganizationID string) (*OrganizationLoginURLResponse, error) {
	data := map[string][]string{}
	var err error

	data["OrganizationID"] = []string{OrganizationID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/get-default-login-url", data)
	if err != nil {
		return nil, err
	}

	result := &OrganizationLoginURLResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherImportApply: Instruct a live connected device to import settings from an installed
// product
// This command is understood by Comet Backup 17.12.0 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// ImportSourceID: The selected import source, as found by the AdminDispatcherRequestImportSources
// API
func (this *CometAPIClient) AdminDispatcherImportApply(TargetID string, ImportSourceID string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["ImportSourceID"] = []string{ImportSourceID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/import-apply", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherKillProcess: Instruct a live connected device to disconnect
// The device will terminate its live-connection process and will not reconnect.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
func (this *CometAPIClient) AdminDispatcherKillProcess(TargetID string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/kill-process", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherListActive: List live connected devices
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// UserNameFilter: (Optional) User name filter string
func (this *CometAPIClient) AdminDispatcherListActive(UserNameFilter *string) (LiveUserConnectionMap, error) {
	data := map[string][]string{}
	var err error

	if UserNameFilter != nil {
		data["UserNameFilter"] = []string{*UserNameFilter}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/list-active", data)
	if err != nil {
		return nil, err
	}

	result := LiveUserConnectionMap{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherOffice365ListVirtualAccounts: Request a list of Office365 Resources (groups,
// sites, teams groups and users)
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Credentials: The Office365 account credential
func (this *CometAPIClient) AdminDispatcherOffice365ListVirtualAccounts(TargetID string, Credentials Office365Credential) (*BrowseOffice365ListVirtualAccountsResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(Credentials)
	if err != nil {
		return nil, err
	}
	data["Credentials"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/office365-list-virtual-accounts", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseOffice365ListVirtualAccountsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherPingDestination: Test the connection to the storage bucket
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// ExtraData: The destination location settings
func (this *CometAPIClient) AdminDispatcherPingDestination(TargetID string, ExtraData DestinationLocation) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(ExtraData)
	if err != nil {
		return nil, err
	}
	data["ExtraData"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/ping-destination", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRefetchProfile: Instruct a live connected device to refresh their profile
// This command is understood by Comet Backup 17.12.0 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
func (this *CometAPIClient) AdminDispatcherRefetchProfile(TargetID string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/refetch-profile", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRegisterOfficeApplicationBegin: Begin the process of registering a new Azure AD
// application that can access Office 365 for backup
// After calling this API, you should supply the login details to the end-user, and then begin
// polling the AdminDispatcherRegisterOfficeApplicationCheck with the supplied "Continuation"
// parameter to check on the registration process.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// EmailAddress: The email address of the Azure AD administrator
func (this *CometAPIClient) AdminDispatcherRegisterOfficeApplicationBegin(TargetID string, EmailAddress string) (*RegisterOfficeApplicationBeginResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["EmailAddress"] = []string{EmailAddress}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/register-office-application/begin", data)
	if err != nil {
		return nil, err
	}

	result := &RegisterOfficeApplicationBeginResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRegisterOfficeApplicationCheck: Check the process of registering a new Azure AD
// application that can access Office 365 for backup
// You should begin the process by calling AdminDispatcherRegisterOfficeApplicationBegin and asking
// the end-user to complete the Azure authentication steps.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Continuation: The ID returned from the AdminDispatcherRegisterOfficeApplicationBegin endpoint
func (this *CometAPIClient) AdminDispatcherRegisterOfficeApplicationCheck(TargetID string, Continuation string) (*RegisterOfficeApplicationCheckResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["Continuation"] = []string{Continuation}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/register-office-application/check", data)
	if err != nil {
		return nil, err
	}

	result := &RegisterOfficeApplicationCheckResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherReindexStorageVault: Instruct a live connected device to rebuild Storage Vault
// indexes now
// This command is understood by Comet Backup 18.6.9 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Destination: The Storage Vault GUID
func (this *CometAPIClient) AdminDispatcherReindexStorageVault(TargetID string, Destination string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["Destination"] = []string{Destination}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/reindex-storage-vault", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestBrowseDiskDrives: Request a list of physical disk drive information from a
// live connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
func (this *CometAPIClient) AdminDispatcherRequestBrowseDiskDrives(TargetID string) (*BrowseDiskDrivesResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-browse-disk-drives", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseDiskDrivesResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestBrowseExchangeEdb: Request a list of Exchange EDB databases from a live
// connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
func (this *CometAPIClient) AdminDispatcherRequestBrowseExchangeEdb(TargetID string) (*BrowseEDBResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-browse-exchange-edb", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseEDBResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestBrowseHyperv: Request a list of Hyper-V virtual machines from a live
// connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
func (this *CometAPIClient) AdminDispatcherRequestBrowseHyperv(TargetID string) (*BrowseHVResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-browse-hyperv", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseHVResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestBrowseMongodb: Request a list of tables in MongoDB database
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Credentials: The Mongo database authentication settings
func (this *CometAPIClient) AdminDispatcherRequestBrowseMongodb(TargetID string, Credentials MongoDBConnection) (*BrowseSQLServerResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(Credentials)
	if err != nil {
		return nil, err
	}
	data["Credentials"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-browse-mongodb", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseSQLServerResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestBrowseMssql: Request a list of tables in MSSQL database
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Credentials: The MSSQL database authentication settings
func (this *CometAPIClient) AdminDispatcherRequestBrowseMssql(TargetID string, Credentials MSSQLConnection) (*BrowseSQLServerResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(Credentials)
	if err != nil {
		return nil, err
	}
	data["Credentials"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-browse-mssql", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseSQLServerResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestBrowseMysql: Request a list of tables in MySQL database
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Credentials: The MySQL database authentication settings
func (this *CometAPIClient) AdminDispatcherRequestBrowseMysql(TargetID string, Credentials MySQLConnection) (*BrowseSQLServerResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(Credentials)
	if err != nil {
		return nil, err
	}
	data["Credentials"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-browse-mysql", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseSQLServerResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestBrowseVssAaw: Request a list of installed VSS Writers (Application-Aware
// Writers) from a live connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
func (this *CometAPIClient) AdminDispatcherRequestBrowseVssAaw(TargetID string) (*BrowseVSSResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-browse-vss-aaw", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseVSSResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestFilesystemObjects: Request a list of filesystem objects from a live
// connected device
// The device must have granted the administrator permission to view its filenames.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Path: (Optional) Browse objects inside this path. If empty or not present, returns the top-level
// device paths
func (this *CometAPIClient) AdminDispatcherRequestFilesystemObjects(TargetID string, Path *string) (*DispatcherStoredObjectsResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	if Path != nil {
		data["Path"] = []string{*Path}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-filesystem-objects", data)
	if err != nil {
		return nil, err
	}

	result := &DispatcherStoredObjectsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestImportSources: Request a list of import sources from a live connected
// device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
func (this *CometAPIClient) AdminDispatcherRequestImportSources(TargetID string) (*DispatcherAdminSourcesResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-import-sources", data)
	if err != nil {
		return nil, err
	}

	result := &DispatcherAdminSourcesResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestOffice365Accounts: Request a list of Office365 mailbox accounts
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Credentials: The Office365 account credential
func (this *CometAPIClient) AdminDispatcherRequestOffice365Accounts(TargetID string, Credentials Office365Credential) (*BrowseOffice365ObjectsResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(Credentials)
	if err != nil {
		return nil, err
	}
	data["Credentials"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-office365-accounts", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseOffice365ObjectsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestOffice365Sites: Request a list of Office365 sites
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Credentials: The Office365 account credential
func (this *CometAPIClient) AdminDispatcherRequestOffice365Sites(TargetID string, Credentials Office365Credential) (*BrowseOffice365ObjectsResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(Credentials)
	if err != nil {
		return nil, err
	}
	data["Credentials"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-office365-sites", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseOffice365ObjectsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestStoredObjects: Request a list of stored objects inside an existing backup
// job
// The remote device must have given consent for an MSP to browse their files.
// To service this request, the remote device must connect to the Storage Vault and load index data.
// There may be a small delay. If the remote device is running Comet 20.12.0 or later, the necessary
// index data is cached when this API is first called, for 15 minutes after the last repeated call.
// This can improve performance for interactively browsing an entire tree of stored objects.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Destination: The Storage Vault ID
// SnapshotID: The selected backup job snapshot
// TreeID: (Optional) Browse objects inside subdirectory of backup snapshot. If it is for VMDK
// single file restore, it should be the disk image's subtree ID.
// Options: (Optional) Request a list of stored objects in vmdk file
func (this *CometAPIClient) AdminDispatcherRequestStoredObjects(TargetID string, Destination string, SnapshotID string, TreeID *string, Options *VMDKSnapshotViewOptions) (*DispatcherStoredObjectsResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	data["Destination"] = []string{Destination}

	data["SnapshotID"] = []string{SnapshotID}

	if TreeID != nil {
		data["TreeID"] = []string{*TreeID}
	}

	if Options != nil {
		b, err = json.Marshal(Options)
		if err != nil {
			return nil, err
		}
		data["Options"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-stored-objects", data)
	if err != nil {
		return nil, err
	}

	result := &DispatcherStoredObjectsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestVaultSnapshots: Request a list of Storage Vault snapshots from a live
// connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Destination: The Storage Vault ID
func (this *CometAPIClient) AdminDispatcherRequestVaultSnapshots(TargetID string, Destination string) (*DispatcherVaultSnapshotsResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["Destination"] = []string{Destination}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-vault-snapshots", data)
	if err != nil {
		return nil, err
	}

	result := &DispatcherVaultSnapshotsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRequestWindiskSnapshot: Request a Disk Image snapshot with the windiskbrowse-style
// from a live connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Destination: The Storage Vault ID
// SnapshotID: The Snapshot ID
func (this *CometAPIClient) AdminDispatcherRequestWindiskSnapshot(TargetID string, Destination string, SnapshotID string) (*DispatcherWindiskSnapshotResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["Destination"] = []string{Destination}

	data["SnapshotID"] = []string{SnapshotID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/request-windisk-snapshot", data)
	if err != nil {
		return nil, err
	}

	result := &DispatcherWindiskSnapshotResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRunBackup: Instruct a live connected device to run a scheduled backup
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// BackupRule: The schedule GUID
func (this *CometAPIClient) AdminDispatcherRunBackup(TargetID string, BackupRule string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["BackupRule"] = []string{BackupRule}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/run-backup", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRunBackupCustom: Instruct a live connected device to run a backup
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Source: The Protected Item GUID
// Destination: The Storage Vault GUID
// Options: (Optional) Extra job parameters (>= 19.3.6)
func (this *CometAPIClient) AdminDispatcherRunBackupCustom(TargetID string, Source string, Destination string, Options *BackupJobAdvancedOptions) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	data["Source"] = []string{Source}

	data["Destination"] = []string{Destination}

	if Options != nil {
		b, err = json.Marshal(Options)
		if err != nil {
			return nil, err
		}
		data["Options"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/run-backup-custom", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRunRestore: Instruct a live connected device to perform a local restore
// This command is understood by Comet Backup 17.9.3 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Path: The local path to restore to
// Source: The Protected Item ID
// Destination: The Storage Vault ID
// Snapshot: (Optional) If present, restore a specific snapshot. Otherwise, restore the latest
// snapshot for the selected Protected Item + Storage Vault pair
// Paths: (Optional) If present, restore these paths only. Otherwise, restore all data (>= 19.3.0)
func (this *CometAPIClient) AdminDispatcherRunRestore(TargetID string, Path string, Source string, Destination string, Snapshot *string, Paths []string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	data["Path"] = []string{Path}

	data["Source"] = []string{Source}

	data["Destination"] = []string{Destination}

	if Snapshot != nil {
		data["Snapshot"] = []string{*Snapshot}
	}

	if Paths != nil {
		b, err = json.Marshal(Paths)
		if err != nil {
			return nil, err
		}
		data["Paths"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/run-restore", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherRunRestoreCustom: Instruct a live connected device to perform a local restore
// This command is understood by Comet Backup 18.6.0 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Source: The Protected Item ID
// Destination: The Storage Vault ID
// Options: Restore targets
// Snapshot: (Optional) If present, restore a specific snapshot. Otherwise, restore the latest
// snapshot for the selected Protected Item + Storage Vault pair
// Paths: (Optional) If present, restore these paths only. Otherwise, restore all data
func (this *CometAPIClient) AdminDispatcherRunRestoreCustom(TargetID string, Source string, Destination string, Options RestoreJobAdvancedOptions, Snapshot *string, Paths []string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	data["Source"] = []string{Source}

	data["Destination"] = []string{Destination}

	b, err = json.Marshal(Options)
	if err != nil {
		return nil, err
	}
	data["Options"] = []string{string(b)}

	if Snapshot != nil {
		data["Snapshot"] = []string{*Snapshot}
	}

	if Paths != nil {
		b, err = json.Marshal(Paths)
		if err != nil {
			return nil, err
		}
		data["Paths"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/run-restore-custom", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherUninstallSoftware: Instruct a live connected device to self-uninstall the software
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// RemoveConfigFile: Determine if the config.dat file will be deleted at the same time
func (this *CometAPIClient) AdminDispatcherUninstallSoftware(TargetID string, RemoveConfigFile bool) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(RemoveConfigFile)
	if err != nil {
		return nil, err
	}
	data["RemoveConfigFile"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/uninstall-software", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherUnlock: Instruct a live connected device to remove lock files from a Storage Vault
// Misuse can cause data loss!
// This command is understood by Comet Backup 17.9.4 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Destination: The Storage Vault GUID
func (this *CometAPIClient) AdminDispatcherUnlock(TargetID string, Destination string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["Destination"] = []string{Destination}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/unlock", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherUpdateLoginUrl: Instruct a live connected device to update its login server URL
// The device will attempt to connect to the new Auth Role Comet Server using its current username
// and password. If the test connection succeeds, the device migrates its saved connection settings
// and live connections to the new server. If the device is not registered on the new URL, or if the
// credentials are incorrect, the device remains on the current Auth Role server.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// NewURL: The new external URL of this server
// Force: (Optional) No checks will be done using previous URL
func (this *CometAPIClient) AdminDispatcherUpdateLoginUrl(TargetID string, NewURL string, Force *bool) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	data["NewURL"] = []string{NewURL}

	if Force != nil {
		b, err = json.Marshal(Force)
		if err != nil {
			return nil, err
		}
		data["Force"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/update-login-url", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminDispatcherUpdateSoftware: Instruct a live connected device to download a software update
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// This API requires the Software Build Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// SelfAddress: (Optional) The external URL of this server, used to resolve conflicts (>= 19.3.11)
func (this *CometAPIClient) AdminDispatcherUpdateSoftware(TargetID string, SelfAddress *string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/dispatcher/update-software", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminGetJobLog: Get the report log entries for a single job, in plaintext format
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// JobID: Selected job ID
func (this *CometAPIClient) AdminGetJobLog(JobID string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	data["JobID"] = []string{JobID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/get-job-log", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminGetJobLogEntries: Get the report log entries for a single job
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// JobID: Selected job ID
func (this *CometAPIClient) AdminGetJobLogEntries(JobID string) ([]JobEntry, error) {
	data := map[string][]string{}
	var err error

	data["JobID"] = []string{JobID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/get-job-log-entries", data)
	if err != nil {
		return nil, err
	}

	result := []JobEntry{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminGetJobProperties: Get properties of a single job
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// JobID: Selected job ID
func (this *CometAPIClient) AdminGetJobProperties(JobID string) (*BackupJobDetail, error) {
	data := map[string][]string{}
	var err error

	data["JobID"] = []string{JobID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/get-job-properties", data)
	if err != nil {
		return nil, err
	}

	result := &BackupJobDetail{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminGetJobsAll: Get jobs (All)
// The jobs are returned in an unspecified order.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) AdminGetJobsAll() ([]BackupJobDetail, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/get-jobs-all", nil)
	if err != nil {
		return nil, err
	}

	result := []BackupJobDetail{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminGetJobsForCustomSearch: Get jobs (for custom search)
// The jobs are returned in an unspecified order.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// Query: (No description available)
func (this *CometAPIClient) AdminGetJobsForCustomSearch(Query SearchClause) ([]BackupJobDetail, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(Query)
	if err != nil {
		return nil, err
	}
	data["Query"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/get-jobs-for-custom-search", data)
	if err != nil {
		return nil, err
	}

	result := []BackupJobDetail{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminGetJobsForDateRange: Get jobs (for date range)
// The jobs are returned in an unspecified order.
//
// If the `Start` parameter is later than `End`, they will be swapped.
//
// This API will return all jobs that either started or ended within the supplied range.
//
// Incomplete jobs have an end time of `0`. You can use this API to find only incomplete jobs by
// setting both `Start` and `End` to `0`.
//
// Prior to Comet Server 22.6.0, additional Incomplete jobs may have been returned if you specified
// non-zero arguments for both `Start` and `End`.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// Start: Timestamp (Unix)
// End: Timestamp (Unix)
func (this *CometAPIClient) AdminGetJobsForDateRange(Start int, End int) ([]BackupJobDetail, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(Start)
	if err != nil {
		return nil, err
	}
	data["Start"] = []string{string(b)}

	b, err = json.Marshal(End)
	if err != nil {
		return nil, err
	}
	data["End"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/get-jobs-for-date-range", data)
	if err != nil {
		return nil, err
	}

	result := []BackupJobDetail{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminGetJobsForUser: Get jobs (for user)
// The jobs are returned in an unspecified order.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Selected username
func (this *CometAPIClient) AdminGetJobsForUser(TargetUser string) ([]BackupJobDetail, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/get-jobs-for-user", data)
	if err != nil {
		return nil, err
	}

	result := []BackupJobDetail{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminGetJobsRecent: Get jobs (Recent and incomplete)
// The jobs are returned in an unspecified order.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) AdminGetJobsRecent() ([]BackupJobDetail, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/get-jobs-recent", nil)
	if err != nil {
		return nil, err
	}

	result := []BackupJobDetail{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminGetUserProfile: Get user account profile
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Selected account username
func (this *CometAPIClient) AdminGetUserProfile(TargetUser string) (*UserProfileConfig, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/get-user-profile", data)
	if err != nil {
		return nil, err
	}

	result := &UserProfileConfig{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminGetUserProfileAndHash: Get user account profile (atomic)
// The resulting hash parameter can be passed to the corresponding update API, to atomically ensure
// that no changes occur between get/set operations.
// The hash format is not publicly documented and may change in a future server version. Use server
// APIs to retrieve current hash values.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Selected account username
func (this *CometAPIClient) AdminGetUserProfileAndHash(TargetUser string) (*GetProfileAndHashResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/get-user-profile-and-hash", data)
	if err != nil {
		return nil, err
	}

	result := &GetProfileAndHashResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminGetUserProfileHash: Get user account profile (hash)
// The profile hash can be used to determine if a user account profile has changed.
// The hash format is not publicly documented and may change in a future server version. Use server
// APIs to retrieve current hash values.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Selected account username
func (this *CometAPIClient) AdminGetUserProfileHash(TargetUser string) (*GetProfileHashResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/get-user-profile-hash", data)
	if err != nil {
		return nil, err
	}

	result := &GetProfileHashResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminJobCancel: Cancel a running job
// A request is sent to the live-connected device, asking it to cancel the operation. This may fail
// if there is no live-connection.
// Only jobs from Comet 18.3.5 or newer can be cancelled. A job can only be cancelled if it has a
// non-empty CancellationID field in its properties.
// If the device is running Comet 21.9.5 or later, this API will wait up to ten seconds for a
// confirmation from the client.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Username
// JobID: Job ID
func (this *CometAPIClient) AdminJobCancel(TargetUser string, JobID string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	data["JobID"] = []string{JobID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/job/cancel", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminListUsers: List all user accounts
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) AdminListUsers() ([]string, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/list-users", nil)
	if err != nil {
		return nil, err
	}

	result := []string{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminListUsersFull: List all user account profiles
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) AdminListUsersFull() (map[string]UserProfileConfig, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/list-users-full", nil)
	if err != nil {
		return nil, err
	}

	result := map[string]UserProfileConfig{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaBrandingConfigGet: Get Branding configuration
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
func (this *CometAPIClient) AdminMetaBrandingConfigGet() (*ServerConfigOptionsBrandingFragment, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/branding-config/get", nil)
	if err != nil {
		return nil, err
	}

	result := &ServerConfigOptionsBrandingFragment{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaBrandingConfigSet: Set Branding configuration
// Note that file resources must be provided using a resource URI I.E
// `"resource://05ba0b90ee66bda433169581188aba8d29faa938f9464cccd651a02fdf2e5b57"`. See
// AdminMetaResourceNew for the API documentation to create new file resources.
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
//
// - Params
// BrandingConfig: Updated configuration content
func (this *CometAPIClient) AdminMetaBrandingConfigSet(BrandingConfig BrandingOptions) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(BrandingConfig)
	if err != nil {
		return nil, err
	}
	data["BrandingConfig"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/branding-config/set", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaBuildConfigGet: Get Software Build Role configuration
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
func (this *CometAPIClient) AdminMetaBuildConfigGet() (*ServerConfigOptionsSoftwareBuildRoleFragment, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/build-config/get", nil)
	if err != nil {
		return nil, err
	}

	result := &ServerConfigOptionsSoftwareBuildRoleFragment{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaBuildConfigSet: Set Build Role configuration
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
//
// - Params
// SoftwareBuildRoleConfig: Updated configuration content
func (this *CometAPIClient) AdminMetaBuildConfigSet(SoftwareBuildRoleConfig SoftwareBuildRoleOptions) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(SoftwareBuildRoleConfig)
	if err != nil {
		return nil, err
	}
	data["SoftwareBuildRoleConfig"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/build-config/set", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaConstellationConfigGet: Get Constellation configuration for the current organization
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Constellation Role to be enabled.
func (this *CometAPIClient) AdminMetaConstellationConfigGet() (*ConstellationRoleOptions, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/constellation/config/get", nil)
	if err != nil {
		return nil, err
	}

	result := &ConstellationRoleOptions{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaConstellationConfigSet: Set Constellation configuration for the current organization
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Constellation Role to be enabled.
//
// - Params
// ConstellationRoleOptions: Constellation role options to set
func (this *CometAPIClient) AdminMetaConstellationConfigSet(ConstellationRoleOptions ConstellationRoleOptions) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(ConstellationRoleOptions)
	if err != nil {
		return nil, err
	}
	data["ConstellationRoleOptions"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/constellation/config/set", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaEmailOptionsGet: Get the email options
//
// You must supply administrator authentication credentials to use this API.
func (this *CometAPIClient) AdminMetaEmailOptionsGet() (*EmailOptions, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/email-options/get", nil)
	if err != nil {
		return nil, err
	}

	result := &EmailOptions{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaEmailOptionsSet: Set the email options
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// EmailOptions: The replacement email reporting options.
func (this *CometAPIClient) AdminMetaEmailOptionsSet(EmailOptions EmailOptions) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(EmailOptions)
	if err != nil {
		return nil, err
	}
	data["EmailOptions"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/email-options/set", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaListAvailableLogDays: Get log files
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
func (this *CometAPIClient) AdminMetaListAvailableLogDays() ([]LogDay, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/list-available-log-days", nil)
	if err != nil {
		return nil, err
	}

	result := []LogDay{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaPsaConfigListGet: Get the server PSA configuration
//
// You must supply administrator authentication credentials to use this API.
func (this *CometAPIClient) AdminMetaPsaConfigListGet() ([]PSAConfig, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/psa-config-list/get", nil)
	if err != nil {
		return nil, err
	}

	result := []PSAConfig{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaPsaConfigListSet: Update the server PSA configuration
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// PSAConfigList: The replacement PSA configuration list
func (this *CometAPIClient) AdminMetaPsaConfigListSet(PSAConfigList []PSAConfig) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(PSAConfigList)
	if err != nil {
		return nil, err
	}
	data["PSAConfigList"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/psa-config-list/set", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaPsaConfigListSyncNow: Synchronize all PSA services now
// This API applies to the current Organization's PSAConfig's only.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) AdminMetaPsaConfigListSyncNow() (*CometAPIResponseMessage, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/psa-config-list/sync-now", nil)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaReadAllLogs: Get a ZIP file of all of the server's log files
// On non-Windows platforms, log content uses LF line endings. On Windows, Comet changed from LF to
// CRLF line endings in 18.3.2.
// This API does not automatically convert line endings; around the 18.3.2 timeframe, log content
// may even contain mixed line-endings.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
func (this *CometAPIClient) AdminMetaReadAllLogs() ([]byte, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/read-all-logs", nil)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminMetaReadLogs: Get log file content
// On non-Windows platforms, log content uses LF line endings. On Windows, Comet changed from LF to
// CRLF line endings in 18.3.2.
// This API does not automatically convert line endings; around the 18.3.2 timeframe, log content
// may even contain mixed line-endings.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
//
// - Params
// Log: A log day, selected from the options returned by the Get Log Files API
func (this *CometAPIClient) AdminMetaReadLogs(Log int) ([]byte, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(Log)
	if err != nil {
		return nil, err
	}
	data["Log"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/read-logs", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminMetaRemoteStorageVaultGet: Get Requesting Remote Storage Vault Config
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
func (this *CometAPIClient) AdminMetaRemoteStorageVaultGet() ([]RemoteStorageOption, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/remote-storage-vault/get", nil)
	if err != nil {
		return nil, err
	}

	result := []RemoteStorageOption{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaRemoteStorageVaultSet: Set Storage template vault options
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
//
// - Params
// RemoteStorageOptions: Updated configuration content
func (this *CometAPIClient) AdminMetaRemoteStorageVaultSet(RemoteStorageOptions []RemoteStorageOption) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(RemoteStorageOptions)
	if err != nil {
		return nil, err
	}
	data["RemoteStorageOptions"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/remote-storage-vault/set", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaResourceGet: Get a resource file
// Resources are used to upload files within the server configuration.
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// Hash: The resource identifier
func (this *CometAPIClient) AdminMetaResourceGet(Hash string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	data["Hash"] = []string{Hash}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/resource/get", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// AdminMetaResourceNew: Upload a resource file
// Resources are used to upload files within the server configuration.
// The resulting resource ID is autogenerated.
// The lifespan of an uploaded resource is undefined. Resources may be deleted automatically, but it
// should remain available until the next call to AdminMetaServerConfigSet, and will remain
// available for as long as it is referenced by the server configuration.
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// upload: The uploaded file contents, as a multipart/form-data part.
func (this *CometAPIClient) AdminMetaResourceNew(upload string) (*AdminResourceResponse, error) {
	data := map[string][]string{}
	var err error

	data["upload"] = []string{upload}

	body, err := this.Request("multipart/form-data", "POST", "/api/v1/admin/meta/resource/new", data)
	if err != nil {
		return nil, err
	}

	result := &AdminResourceResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaRestartService: Restart server
// The Comet Server process will exit. The service manager should restart the server automatically.
//
// Prior to 18.9.2, this API terminated the server immediately without returning a response. In
// 18.9.2 and later, it returns a successful response before shutting down.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
// Access to this API may be prevented on a per-administrator basis.
func (this *CometAPIClient) AdminMetaRestartService() (*CometAPIResponseMessage, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/restart-service", nil)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaSendTestEmail: Send a test email message
// This allows the Comet Server web interface to support testing different email credentials during
// setup.
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// EmailOptions: Updated configuration content
// Recipient: Target email address to send test email
func (this *CometAPIClient) AdminMetaSendTestEmail(EmailOptions EmailOptions, Recipient string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(EmailOptions)
	if err != nil {
		return nil, err
	}
	data["EmailOptions"] = []string{string(b)}

	data["Recipient"] = []string{Recipient}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/send-test-email", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaSendTestReport: Send a test admin email report
// This allows a user to send a test email report
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// EmailReportingOption: Test email reporting option for sending
func (this *CometAPIClient) AdminMetaSendTestReport(EmailReportingOption EmailReportingOption) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(EmailReportingOption)
	if err != nil {
		return nil, err
	}
	data["EmailReportingOption"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/send-test-report", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaServerConfigGet: Get server configuration
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
func (this *CometAPIClient) AdminMetaServerConfigGet() (*ServerConfigOptions, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/server-config/get", nil)
	if err != nil {
		return nil, err
	}

	result := &ServerConfigOptions{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaServerConfigNetworkInterfaces: List the available network interfaces on the PC running
// Comet Server
// Any IPv6 addresses are listed in compressed form without square-brackets.
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
func (this *CometAPIClient) AdminMetaServerConfigNetworkInterfaces() ([]string, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/server-config/network-interfaces", nil)
	if err != nil {
		return nil, err
	}

	result := []string{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaServerConfigSet: Set server configuration
// The Comet Server process will exit. The service manager should restart the server automatically.
//
// Prior to 18.9.2, this API terminated the server immediately without returning a response. In
// 18.9.2 and later, it returns a successful response before shutting down.
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
//
// - Params
// Config: Updated configuration content
func (this *CometAPIClient) AdminMetaServerConfigSet(Config ServerConfigOptions) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(Config)
	if err != nil {
		return nil, err
	}
	data["Config"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/server-config/set", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaShutdownService: Shut down server
// The Comet Server process will exit.
//
// Prior to 18.9.2, this API terminated the server immediately without returning a response. In
// 18.9.2 and later, it returns a successful response before shutting down.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
// Access to this API may be prevented on a per-administrator basis.
func (this *CometAPIClient) AdminMetaShutdownService() (*CometAPIResponseMessage, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/shutdown-service", nil)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaSoftwareUpdateNews: Get software update news from the software provider
//
// You must supply administrator authentication credentials to use this API.
func (this *CometAPIClient) AdminMetaSoftwareUpdateNews() (*SoftwareUpdateNewsResponse, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/software-update-news", nil)
	if err != nil {
		return nil, err
	}

	result := &SoftwareUpdateNewsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaStats: Get Comet Server historical statistics
// The returned key-value map is not necessarily ordered. Client-side code should sort the result
// before display.
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// Simple: Remove redundant statistics
func (this *CometAPIClient) AdminMetaStats(Simple bool) (map[int64]StatResult, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(Simple)
	if err != nil {
		return nil, err
	}
	data["Simple"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/stats", data)
	if err != nil {
		return nil, err
	}

	result := map[int64]StatResult{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaVersion: Get server properties
// Retrieve the version number and basic properties about the server.
//
// You must supply administrator authentication credentials to use this API.
func (this *CometAPIClient) AdminMetaVersion() (*ServerMetaVersionInfo, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/version", nil)
	if err != nil {
		return nil, err
	}

	result := &ServerMetaVersionInfo{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaWebhookOptionsGet: Get the server webhook configuration
//
// You must supply administrator authentication credentials to use this API.
func (this *CometAPIClient) AdminMetaWebhookOptionsGet() (map[string]WebhookOption, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/webhook-options/get", nil)
	if err != nil {
		return nil, err
	}

	result := map[string]WebhookOption{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminMetaWebhookOptionsSet: Update the server webhook configuration
// Calling this endpoint will interrupt any messages currently queued for existing webhook
// destinations.
//
// You must supply administrator authentication credentials to use this API.
//
// - Params
// WebhookOptions: The replacement webhook target options.
func (this *CometAPIClient) AdminMetaWebhookOptionsSet(WebhookOptions map[string]WebhookOption) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(WebhookOptions)
	if err != nil {
		return nil, err
	}
	data["WebhookOptions"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/meta/webhook-options/set", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminNewsGetAll: Get News entries (Admin)
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) AdminNewsGetAll() (NewsEntries, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/news/get-all", nil)
	if err != nil {
		return nil, err
	}

	result := NewsEntries{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminNewsRemove: Remove news item
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// NewsItem: Selected news item GUID
func (this *CometAPIClient) AdminNewsRemove(NewsItem string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["NewsItem"] = []string{NewsItem}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/news/remove", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminNewsSubmit: Submit news item
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// NewsContent: Content of news item
func (this *CometAPIClient) AdminNewsSubmit(NewsContent string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["NewsContent"] = []string{NewsContent}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/news/submit", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminOrganizationDelete: Delete an organization and all related users
//
// Prior to Comet 22.6.0, this API was documented as returning the OrganizationResponse type.
// However, it always has returned only a CometAPIResponseMessage.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
//
// - Params
// OrganizationID: (Optional) (No description available)
// UninstallConfig: (Optional) Uninstall software configuration
func (this *CometAPIClient) AdminOrganizationDelete(OrganizationID *string, UninstallConfig *UninstallConfig) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	if OrganizationID != nil {
		data["OrganizationID"] = []string{*OrganizationID}
	}

	if UninstallConfig != nil {
		b, err = json.Marshal(UninstallConfig)
		if err != nil {
			return nil, err
		}
		data["UninstallConfig"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/organization/delete", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminOrganizationExport: Run self-backup for a specific tenant
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
//
// - Params
// Options: The export config options
func (this *CometAPIClient) AdminOrganizationExport(Options SelfBackupExportOptions) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(Options)
	if err != nil {
		return nil, err
	}
	data["Options"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/organization/export", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminOrganizationList: List Organizations
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
func (this *CometAPIClient) AdminOrganizationList() (map[string]Organization, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/organization/list", nil)
	if err != nil {
		return nil, err
	}

	result := map[string]Organization{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminOrganizationSet: Create or Update an Organization
//
// Prior to Comet 22.6.0, the 'ID' and 'Organization' fields were not present in the response.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
//
// - Params
// OrganizationID: (Optional) (No description available)
// Organization: (Optional) (No description available)
func (this *CometAPIClient) AdminOrganizationSet(OrganizationID *string, Organization *Organization) (*OrganizationResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	if OrganizationID != nil {
		data["OrganizationID"] = []string{*OrganizationID}
	}

	if Organization != nil {
		b, err = json.Marshal(Organization)
		if err != nil {
			return nil, err
		}
		data["Organization"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/organization/set", data)
	if err != nil {
		return nil, err
	}

	result := &OrganizationResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminPoliciesDelete: Delete an existing policy object
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// PolicyID: The policy ID to update or create
func (this *CometAPIClient) AdminPoliciesDelete(PolicyID string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["PolicyID"] = []string{PolicyID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/policies/delete", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminPoliciesGet: Retrieve a single policy object
// A hash is also returned, to allow atomic modification operations.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// PolicyID: The policy ID to retrieve
func (this *CometAPIClient) AdminPoliciesGet(PolicyID string) (*GetGroupPolicyResponse, error) {
	data := map[string][]string{}
	var err error

	data["PolicyID"] = []string{PolicyID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/policies/get", data)
	if err != nil {
		return nil, err
	}

	result := &GetGroupPolicyResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminPoliciesList: List all policy object names
// For the top-level organization, the API result includes all policies for all organizations,
// unless the TargetOrganization parameter is present.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetOrganization: (Optional) If present, list the policies belonging to another organization.
// Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)
func (this *CometAPIClient) AdminPoliciesList(TargetOrganization *string) (map[string]string, error) {
	data := map[string][]string{}
	var err error

	if TargetOrganization != nil {
		data["TargetOrganization"] = []string{*TargetOrganization}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/policies/list", data)
	if err != nil {
		return nil, err
	}

	result := map[string]string{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminPoliciesListFull: Get all policy objects
// For the top-level organization, the API result includes all policies for all organizations,
// unless the TargetOrganization parameter is present.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetOrganization: (Optional) If present, list the policies belonging to another organization.
// Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)
func (this *CometAPIClient) AdminPoliciesListFull(TargetOrganization *string) (map[string]GroupPolicy, error) {
	data := map[string][]string{}
	var err error

	if TargetOrganization != nil {
		data["TargetOrganization"] = []string{*TargetOrganization}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/policies/list-full", data)
	if err != nil {
		return nil, err
	}

	result := map[string]GroupPolicy{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminPoliciesNew: Create a new policy object
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// Policy: The policy data
func (this *CometAPIClient) AdminPoliciesNew(Policy GroupPolicy) (*CreateGroupPolicyResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(Policy)
	if err != nil {
		return nil, err
	}
	data["Policy"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/policies/new", data)
	if err != nil {
		return nil, err
	}

	result := &CreateGroupPolicyResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminPoliciesSet: Update an existing policy object
// An optional hash may be used, to ensure the modification was atomic.
// This API can also be used to create a new policy object with a specific hash.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// PolicyID: The policy ID to update or create
// Policy: The policy data
// CheckPolicyHash: (Optional) An atomic verification hash as supplied by the AdminPoliciesGet API
func (this *CometAPIClient) AdminPoliciesSet(PolicyID string, Policy GroupPolicy, CheckPolicyHash *string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["PolicyID"] = []string{PolicyID}

	b, err = json.Marshal(Policy)
	if err != nil {
		return nil, err
	}
	data["Policy"] = []string{string(b)}

	if CheckPolicyHash != nil {
		data["CheckPolicyHash"] = []string{*CheckPolicyHash}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/policies/set", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminPreviewUserEmailReport: Preview an email report for a customer
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Selected account username
// EmailReportConfig: Email report configuration to preview
// EmailAddress: (Optional) Email address that may be included in the report body (>= 20.3.3)
func (this *CometAPIClient) AdminPreviewUserEmailReport(TargetUser string, EmailReportConfig EmailReportConfig, EmailAddress *string) (*EmailReportGeneratedPreview, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetUser"] = []string{TargetUser}

	b, err = json.Marshal(EmailReportConfig)
	if err != nil {
		return nil, err
	}
	data["EmailReportConfig"] = []string{string(b)}

	if EmailAddress != nil {
		data["EmailAddress"] = []string{*EmailAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/preview-user-email-report", data)
	if err != nil {
		return nil, err
	}

	result := &EmailReportGeneratedPreview{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminReplicationState: Get Replication status
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
func (this *CometAPIClient) AdminReplicationState() ([]ReplicatorStateAPIResponse, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/replication/state", nil)
	if err != nil {
		return nil, err
	}

	result := []ReplicatorStateAPIResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminRequestStorageVault: Request a new Storage Vault on behalf of a user
// This action does not respect the "Prevent creating new Storage Vaults (via Request)" policy
// setting. New Storage Vaults can be requested regardless of the policy setting.
// Prior to Comet 19.8.0, the response type was CometAPIResponseMessage (i.e. no DestinationID field
// in response).
// The StorageProvider must exist for the target user account's organization.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: The user to receive the new Storage Vault
// StorageProvider: ID for the storage template destination
// SelfAddress: (Optional) The external URL for this server. Used to resolve conflicts
func (this *CometAPIClient) AdminRequestStorageVault(TargetUser string, StorageProvider string, SelfAddress *string) (*RequestStorageVaultResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	data["StorageProvider"] = []string{StorageProvider}

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/request-storage-vault", data)
	if err != nil {
		return nil, err
	}

	result := &RequestStorageVaultResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminRequestStorageVaultProviders: Get the available options for Requesting a Storage Vault
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetOrganization: (Optional) If present, list the storage template options belonging to another
// organization. Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)
func (this *CometAPIClient) AdminRequestStorageVaultProviders(TargetOrganization *string) (map[string]string, error) {
	data := map[string][]string{}
	var err error

	if TargetOrganization != nil {
		data["TargetOrganization"] = []string{*TargetOrganization}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/request-storage-vault-providers", data)
	if err != nil {
		return nil, err
	}

	result := map[string]string{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminResetUserPassword: Reset user account password
// The user account must have a recovery code present. A new replacement recovery code will be
// generated automatically.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Selected account username
// NewPassword: New account password
// OldPassword: (Optional) Old account password. Required if no recovery code is present for the
// user account.
func (this *CometAPIClient) AdminResetUserPassword(TargetUser string, NewPassword string, OldPassword *string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	data["NewPassword"] = []string{NewPassword}

	if OldPassword != nil {
		data["OldPassword"] = []string{*OldPassword}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/reset-user-password", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminRevokeDevice: Revoke device from user account
// It's possible to simply remove the Device section from the user's profile, however, using this
// dedicated API will also gracefully handle live connections.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Selected account username
// TargetDevice: Selected Device ID
func (this *CometAPIClient) AdminRevokeDevice(TargetUser string, TargetDevice string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetUser"] = []string{TargetUser}

	data["TargetDevice"] = []string{TargetDevice}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/revoke-device", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminSelfBackupStart: Run self-backup on all targets
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
func (this *CometAPIClient) AdminSelfBackupStart() (*CometAPIResponseMessage, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/self-backup/start", nil)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminSetUserProfile: Modify user account profile
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Selected account username
// ProfileData: Modified user profile
func (this *CometAPIClient) AdminSetUserProfile(TargetUser string, ProfileData UserProfileConfig) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetUser"] = []string{TargetUser}

	b, err = json.Marshal(ProfileData)
	if err != nil {
		return nil, err
	}
	data["ProfileData"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/set-user-profile", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminSetUserProfileHash: Modify user account profile (atomic)
// The hash parameter can be determined from the corresponding API, to atomically ensure that no
// changes occur between get/set operations.
// The hash format is not publicly documented and may change in a future server version. Use server
// APIs to retrieve current hash values.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetUser: Selected account username
// ProfileData: Modified user profile
// RequireHash: Previous hash parameter
func (this *CometAPIClient) AdminSetUserProfileHash(TargetUser string, ProfileData UserProfileConfig, RequireHash string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetUser"] = []string{TargetUser}

	b, err = json.Marshal(ProfileData)
	if err != nil {
		return nil, err
	}
	data["ProfileData"] = []string{string(b)}

	data["RequireHash"] = []string{RequireHash}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/set-user-profile-hash", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminStorageBucketProperties: Retrieve properties for a single bucket
// This API can also be used to refresh the size measurement for a single bucket by passing a valid
// AfterTimestamp parameter.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Storage Role to be enabled.
//
// - Params
// BucketID: Bucket ID
// AfterTimestamp: (Optional) Allow a stale size measurement if it is at least as new as the
// supplied Unix timestamp. Timestamps in the future may produce a result clamped down to the Comet
// Server's current time. If not present, the size measurement may be arbitrarily stale.
func (this *CometAPIClient) AdminStorageBucketProperties(BucketID string, AfterTimestamp *int) (*BucketProperties, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["BucketID"] = []string{BucketID}

	if AfterTimestamp != nil {
		b, err = json.Marshal(AfterTimestamp)
		if err != nil {
			return nil, err
		}
		data["AfterTimestamp"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/storage/bucket-properties", data)
	if err != nil {
		return nil, err
	}

	result := &BucketProperties{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminStorageDeleteBucket: Delete a bucket
// All data will be removed from the server. Misuse can cause data loss!
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Storage Role to be enabled.
//
// - Params
// BucketID: Selected bucket name
func (this *CometAPIClient) AdminStorageDeleteBucket(BucketID string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["BucketID"] = []string{BucketID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/storage/delete-bucket", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminStorageFreeSpace: Retrieve available space metrics
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API requires the Storage Role to be enabled.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
//
// - Params
// BucketID: (Optional) (This parameter is not used)
func (this *CometAPIClient) AdminStorageFreeSpace(BucketID *string) (*StorageFreeSpaceInfo, error) {
	data := map[string][]string{}
	var err error

	if BucketID != nil {
		data["BucketID"] = []string{*BucketID}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/storage/free-space", data)
	if err != nil {
		return nil, err
	}

	result := &StorageFreeSpaceInfo{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminStorageListBuckets: List all buckets
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Storage Role to be enabled.
func (this *CometAPIClient) AdminStorageListBuckets() (BucketPropertyList, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/storage/list-buckets", nil)
	if err != nil {
		return nil, err
	}

	result := BucketPropertyList{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminStoragePingDestination: Ping a storage destination
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API requires the Storage Role to be enabled.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
//
// - Params
// ExtraData: The destination location settings
func (this *CometAPIClient) AdminStoragePingDestination(ExtraData DestinationLocation) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(ExtraData)
	if err != nil {
		return nil, err
	}
	data["ExtraData"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/storage/ping-destination", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminStorageRegisterBucket: Create a new bucket
// Leave the Set* parameters blank to generate a bucket with random credentials, or, supply a
// pre-hashed password for zero-knowledge operations.
// Any auto-generated credentials are returned in the response message.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Storage Role to be enabled.
//
// - Params
// SetBucketValue: (Optional) Bucket ID
// SetKeyHashFormat: (Optional) Bucket key hashing format
// SetKeyHashValue: (Optional) Bucket key hash
// SetOrganizationID: (Optional) Target organization ID (>= 20.9.0)
func (this *CometAPIClient) AdminStorageRegisterBucket(SetBucketValue *string, SetKeyHashFormat *string, SetKeyHashValue *string, SetOrganizationID *string) (*AddBucketResponseMessage, error) {
	data := map[string][]string{}
	var err error

	if SetBucketValue != nil {
		data["SetBucketValue"] = []string{*SetBucketValue}
	}

	if SetKeyHashFormat != nil {
		data["SetKeyHashFormat"] = []string{*SetKeyHashFormat}
	}

	if SetKeyHashValue != nil {
		data["SetKeyHashValue"] = []string{*SetKeyHashValue}
	}

	if SetOrganizationID != nil {
		data["SetOrganizationID"] = []string{*SetOrganizationID}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/storage/register-bucket", data)
	if err != nil {
		return nil, err
	}

	result := &AddBucketResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminUpdateCampaignStart: Start a new software update campaign
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
//
// - Params
// Options: Configure targets for the software update campaign
func (this *CometAPIClient) AdminUpdateCampaignStart(Options UpdateCampaignOptions) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(Options)
	if err != nil {
		return nil, err
	}
	data["Options"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/update-campaign/start", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// AdminUpdateCampaignStatus: Get current campaign status
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any
// other Organization.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) AdminUpdateCampaignStatus() (*UpdateCampaignStatus, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/admin/update-campaign/status", nil)
	if err != nil {
		return nil, err
	}

	result := &UpdateCampaignStatus{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// BrandingProps: Retreve basic information about this Comet Server
func (this *CometAPIClient) BrandingProps() (*ServerMetaBrandingProperties, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "GET", "/gen/branding.props", nil)
	if err != nil {
		return nil, err
	}

	result := &ServerMetaBrandingProperties{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// HybridSessionStart: Generate a session key (log in)
// This hybrid API allows you to log in to the Comet Server as either an administrator or end-user
// account.
// This API behaves like either AdminAccountSessionStart or UserWebSessionStart, depending on what
// the supplied credentials were valid for.
func (this *CometAPIClient) HybridSessionStart() (*SessionKeyRegeneratedResponse, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/hybrid/session/start", nil)
	if err != nil {
		return nil, err
	}

	result := &SessionKeyRegeneratedResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserDispatcherEmailPreview: Request HTML content of an email
// The remote device must have given consent for an MSP to browse their mail
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Snapshot: where the email belongs to
// Destination: The Storage Vault ID
// Path: of the email to view
func (this *CometAPIClient) UserDispatcherEmailPreview(TargetID string, Snapshot string, Destination string, Path string) (*EmailReportGeneratedPreview, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["Snapshot"] = []string{Snapshot}

	data["Destination"] = []string{Destination}

	data["Path"] = []string{Path}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/dispatcher/email-preview", data)
	if err != nil {
		return nil, err
	}

	result := &EmailReportGeneratedPreview{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebAccountRegenerateTotp: Generate a new TOTP secret for user (web)
// The secret is returned as a `data-uri` image of a QR code. The new secret is immediately applied
// to the current admin account.
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// ProfileHash: Previous account profile hash
func (this *CometAPIClient) UserWebAccountRegenerateTotp(ProfileHash string) (*TotpRegeneratedResponse, error) {
	data := map[string][]string{}
	var err error

	data["ProfileHash"] = []string{ProfileHash}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/account/regenerate-totp", data)
	if err != nil {
		return nil, err
	}

	result := &TotpRegeneratedResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebAccountResetPassword: Reset the password for your own user account (web)
// A new replacement recovery code will be generated if the present recovery code is not empty
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// ProfileHash: Previous account profile hash
// OldPassword: Current account password
// NewPassword: New account password
func (this *CometAPIClient) UserWebAccountResetPassword(ProfileHash string, OldPassword string, NewPassword string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["ProfileHash"] = []string{ProfileHash}

	data["OldPassword"] = []string{OldPassword}

	data["NewPassword"] = []string{NewPassword}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/account/reset-password", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebAccountValidateTotp: Validate the TOTP code before turning 2fa(TOTP) on
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// ProfileHash: Previous account profile hash
// TOTPCode: Six-digit code after scanning barcode image
func (this *CometAPIClient) UserWebAccountValidateTotp(ProfileHash string, TOTPCode string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["ProfileHash"] = []string{ProfileHash}

	data["TOTPCode"] = []string{TOTPCode}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/account/validate-totp", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherDeleteSnapshot: Instruct a live connected device to delete a stored snapshot
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// DestinationID: The Storage Vault GUID
// SnapshotID: The backup job snapshot ID to delete
func (this *CometAPIClient) UserWebDispatcherDeleteSnapshot(TargetID string, DestinationID string, SnapshotID string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["DestinationID"] = []string{DestinationID}

	data["SnapshotID"] = []string{SnapshotID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/delete-snapshot", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherDeleteSnapshots: Instruct a live connected device to delete multiple stored
// snapshots
// The target device must be running Comet 20.9.10 or later.
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// DestinationID: The Storage Vault GUID
// SnapshotIDs: The backup job snapshot IDs to delete
func (this *CometAPIClient) UserWebDispatcherDeleteSnapshots(TargetID string, DestinationID string, SnapshotIDs []string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	data["DestinationID"] = []string{DestinationID}

	b, err = json.Marshal(SnapshotIDs)
	if err != nil {
		return nil, err
	}
	data["SnapshotIDs"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/delete-snapshots", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherListActive: List live connected devices in my account
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) UserWebDispatcherListActive() (LiveUserConnectionMap, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/list-active", nil)
	if err != nil {
		return nil, err
	}

	result := LiveUserConnectionMap{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherOffice365ListVirtualAccounts: Request a list of Office365 Resources (groups,
// sites, teams groups and users)
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Credentials: The Office365 account credential
func (this *CometAPIClient) UserWebDispatcherOffice365ListVirtualAccounts(TargetID string, Credentials Office365Credential) (*BrowseOffice365ListVirtualAccountsResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(Credentials)
	if err != nil {
		return nil, err
	}
	data["Credentials"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/office365-list-virtual-accounts", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseOffice365ListVirtualAccountsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherPingDestination: Test the connection to the storage bucket
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// ExtraData: The destination location settings
func (this *CometAPIClient) UserWebDispatcherPingDestination(TargetID string, ExtraData DestinationLocation) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(ExtraData)
	if err != nil {
		return nil, err
	}
	data["ExtraData"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/ping-destination", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRegisterOfficeApplicationBegin: Begin the process of registering a new Azure AD
// application that can access Office 365 for backup
// After calling this API, you should supply the login details to the end-user, and then begin
// polling the AdminDispatcherRegisterOfficeApplicationCheck with the supplied "Continuation"
// parameter to check on the registration process.
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// EmailAddress: The email address of the Azure AD administrator
func (this *CometAPIClient) UserWebDispatcherRegisterOfficeApplicationBegin(TargetID string, EmailAddress string) (*RegisterOfficeApplicationBeginResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["EmailAddress"] = []string{EmailAddress}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/register-office-application/begin", data)
	if err != nil {
		return nil, err
	}

	result := &RegisterOfficeApplicationBeginResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRegisterOfficeApplicationCheck: Check the process of registering a new Azure AD
// application that can access Office 365 for backup
// You should begin the process by calling AdminDispatcherRegisterOfficeApplicationBegin and asking
// the end-user to complete the Azure authentication steps.
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Continuation: The ID returned from the AdminDispatcherRegisterOfficeApplicationBegin endpoint
func (this *CometAPIClient) UserWebDispatcherRegisterOfficeApplicationCheck(TargetID string, Continuation string) (*RegisterOfficeApplicationCheckResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["Continuation"] = []string{Continuation}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/register-office-application/check", data)
	if err != nil {
		return nil, err
	}

	result := &RegisterOfficeApplicationCheckResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRequestBrowseDiskDrives: Request a list of physical disk drive information from
// a live connected device
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
func (this *CometAPIClient) UserWebDispatcherRequestBrowseDiskDrives(TargetID string) (*BrowseDiskDrivesResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/request-browse-disk-drives", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseDiskDrivesResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRequestBrowseExchangeEdb: Request a list of Exchange EDB databases from a live
// connected device
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
func (this *CometAPIClient) UserWebDispatcherRequestBrowseExchangeEdb(TargetID string) (*BrowseEDBResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/request-browse-exchange-edb", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseEDBResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRequestBrowseHyperv: Request a list of Hyper-V virtual machines from a live
// connected device
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
func (this *CometAPIClient) UserWebDispatcherRequestBrowseHyperv(TargetID string) (*BrowseHVResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/request-browse-hyperv", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseHVResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRequestBrowseMongodb: Request a list of tables in MongoDB database
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Credentials: The MongoDB database authentication settings
func (this *CometAPIClient) UserWebDispatcherRequestBrowseMongodb(TargetID string, Credentials MongoDBConnection) (*BrowseSQLServerResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(Credentials)
	if err != nil {
		return nil, err
	}
	data["Credentials"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/request-browse-mongodb", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseSQLServerResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRequestBrowseMssql: Request a list of tables in MSSQL database
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Credentials: The MSSQL database authentication settings
func (this *CometAPIClient) UserWebDispatcherRequestBrowseMssql(TargetID string, Credentials MSSQLConnection) (*BrowseSQLServerResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(Credentials)
	if err != nil {
		return nil, err
	}
	data["Credentials"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/request-browse-mssql", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseSQLServerResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRequestBrowseMysql: Request a list of tables in MySQL database
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Credentials: The MySQL database authentication settings
func (this *CometAPIClient) UserWebDispatcherRequestBrowseMysql(TargetID string, Credentials MySQLConnection) (*BrowseSQLServerResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(Credentials)
	if err != nil {
		return nil, err
	}
	data["Credentials"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/request-browse-mysql", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseSQLServerResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRequestBrowseVssAaw: Request a list of installed VSS Writers (Application-Aware
// Writers) from a live connected device
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
func (this *CometAPIClient) UserWebDispatcherRequestBrowseVssAaw(TargetID string) (*BrowseVSSResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/request-browse-vss-aaw", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseVSSResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRequestOffice365Accounts: Request a list of Office365 mailbox accounts
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Credentials: The Office365 account credential
func (this *CometAPIClient) UserWebDispatcherRequestOffice365Accounts(TargetID string, Credentials Office365Credential) (*BrowseOffice365ObjectsResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(Credentials)
	if err != nil {
		return nil, err
	}
	data["Credentials"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/request-office365-accounts", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseOffice365ObjectsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRequestOffice365Sites: Request a list of Office365 sites
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Credentials: The Office365 account credential
func (this *CometAPIClient) UserWebDispatcherRequestOffice365Sites(TargetID string, Credentials Office365Credential) (*BrowseOffice365ObjectsResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	b, err = json.Marshal(Credentials)
	if err != nil {
		return nil, err
	}
	data["Credentials"] = []string{string(b)}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/request-office365-sites", data)
	if err != nil {
		return nil, err
	}

	result := &BrowseOffice365ObjectsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRequestStoredObjects: Request a list of stored objects inside an existing backup
// job
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Destination: The Storage Vault ID
// SnapshotID: The selected backup job snapshot
// TreeID: (Optional) Browse objects inside subdirectory of backup snapshot. If it is for VMDK
// single file restore, it should be the disk image's subtree ID.
// Options: (Optional) Request a list of stored objects in vmdk file
func (this *CometAPIClient) UserWebDispatcherRequestStoredObjects(TargetID string, Destination string, SnapshotID string, TreeID *string, Options *VMDKSnapshotViewOptions) (*DispatcherStoredObjectsResponse, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	data["Destination"] = []string{Destination}

	data["SnapshotID"] = []string{SnapshotID}

	if TreeID != nil {
		data["TreeID"] = []string{*TreeID}
	}

	if Options != nil {
		b, err = json.Marshal(Options)
		if err != nil {
			return nil, err
		}
		data["Options"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/request-stored-objects", data)
	if err != nil {
		return nil, err
	}

	result := &DispatcherStoredObjectsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRequestVaultSnapshots: Request a list of Storage Vault snapshots from a live
// connected device
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Destination: The Storage Vault ID
func (this *CometAPIClient) UserWebDispatcherRequestVaultSnapshots(TargetID string, Destination string) (*DispatcherVaultSnapshotsResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["Destination"] = []string{Destination}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/request-vault-snapshots", data)
	if err != nil {
		return nil, err
	}

	result := &DispatcherVaultSnapshotsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRequestWindiskSnapshot: Request a Disk Image snapshot with the
// windiskbrowse-style from a live connected device
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Destination: The Storage Vault ID
// SnapshotID: The Snapshot ID
func (this *CometAPIClient) UserWebDispatcherRequestWindiskSnapshot(TargetID string, Destination string, SnapshotID string) (*DispatcherWindiskSnapshotResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["Destination"] = []string{Destination}

	data["SnapshotID"] = []string{SnapshotID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/request-windisk-snapshot", data)
	if err != nil {
		return nil, err
	}

	result := &DispatcherWindiskSnapshotResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRunBackup: Instruct a live connected device in my account to run a scheduled
// backup
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// BackupRule: The schedule GUID
func (this *CometAPIClient) UserWebDispatcherRunBackup(TargetID string, BackupRule string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	data["BackupRule"] = []string{BackupRule}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/run-backup", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRunBackupCustom: Instruct a live connected device to run a backup
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Source: The Protected Item GUID
// Destination: The Storage Vault GUID
// Options: (Optional) Extra job parameters (>= 19.3.6)
func (this *CometAPIClient) UserWebDispatcherRunBackupCustom(TargetID string, Source string, Destination string, Options *BackupJobAdvancedOptions) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	data["Source"] = []string{Source}

	data["Destination"] = []string{Destination}

	if Options != nil {
		b, err = json.Marshal(Options)
		if err != nil {
			return nil, err
		}
		data["Options"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/run-backup-custom", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRunRestore: Instruct a live connected device in my account to perform a local
// restore
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Path: The local path to restore to
// Source: The Protected Item ID
// Destination: The Storage Vault ID
// Snapshot: (Optional) If present, restore a specific snapshot. Otherwise, restore the latest
// snapshot for the selected Protected Item + Storage Vault pair
// Paths: (Optional) If present, restore these paths only. Otherwise, restore all data (>= 19.3.0)
func (this *CometAPIClient) UserWebDispatcherRunRestore(TargetID string, Path string, Source string, Destination string, Snapshot *string, Paths []string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	data["Path"] = []string{Path}

	data["Source"] = []string{Source}

	data["Destination"] = []string{Destination}

	if Snapshot != nil {
		data["Snapshot"] = []string{*Snapshot}
	}

	if Paths != nil {
		b, err = json.Marshal(Paths)
		if err != nil {
			return nil, err
		}
		data["Paths"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/run-restore", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebDispatcherRunRestoreCustom: Instruct a live connected device in my account to perform a
// local restore
// This command is understood by Comet Backup 18.6.0 and newer.
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Source: The Protected Item ID
// Destination: The Storage Vault ID
// Options: Restore targets
// Snapshot: (Optional) If present, restore a specific snapshot. Otherwise, restore the latest
// snapshot for the selected Protected Item + Storage Vault pair
// Paths: (Optional) If present, restore these paths only. Otherwise, restore all data (>= 19.3.0)
func (this *CometAPIClient) UserWebDispatcherRunRestoreCustom(TargetID string, Source string, Destination string, Options RestoreJobAdvancedOptions, Snapshot *string, Paths []string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	data["TargetID"] = []string{TargetID}

	data["Source"] = []string{Source}

	data["Destination"] = []string{Destination}

	b, err = json.Marshal(Options)
	if err != nil {
		return nil, err
	}
	data["Options"] = []string{string(b)}

	if Snapshot != nil {
		data["Snapshot"] = []string{*Snapshot}
	}

	if Paths != nil {
		b, err = json.Marshal(Paths)
		if err != nil {
			return nil, err
		}
		data["Paths"] = []string{string(b)}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/dispatcher/run-restore-custom", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebGetJobLog: Get backup job report log, in plaintext format (Web)
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// JobID: Selected job GUID
func (this *CometAPIClient) UserWebGetJobLog(JobID string) ([]byte, error) {
	data := map[string][]string{}
	var err error

	data["JobID"] = []string{JobID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/get-job-log", data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

// UserWebGetJobLogEntries: Get backup job report log (Web)
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// JobID: Selected job GUID
func (this *CometAPIClient) UserWebGetJobLogEntries(JobID string) ([]JobEntry, error) {
	data := map[string][]string{}
	var err error

	data["JobID"] = []string{JobID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/get-job-log-entries", data)
	if err != nil {
		return nil, err
	}

	result := []JobEntry{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebGetJobProperties: Get backup job properties (Web)
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// JobID: Selected job GUID
func (this *CometAPIClient) UserWebGetJobProperties(JobID string) (*BackupJobDetail, error) {
	data := map[string][]string{}
	var err error

	data["JobID"] = []string{JobID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/get-job-properties", data)
	if err != nil {
		return nil, err
	}

	result := &BackupJobDetail{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebGetJobs: List all backup jobs (Web)
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) UserWebGetJobs() ([]BackupJobDetail, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/get-jobs", nil)
	if err != nil {
		return nil, err
	}

	result := []BackupJobDetail{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebGetJobsForCustomSearch: List all backup jobs (Web)
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) UserWebGetJobsForCustomSearch() ([]BackupJobDetail, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/get-jobs-for-custom-search", nil)
	if err != nil {
		return nil, err
	}

	result := []BackupJobDetail{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebGetUserProfileAndHash: Get user account profile (atomic)
// (Web interface version)
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) UserWebGetUserProfileAndHash() (*GetProfileAndHashResponseMessage, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/get-user-profile-and-hash", nil)
	if err != nil {
		return nil, err
	}

	result := &GetProfileAndHashResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebJobCancel: Cancel a running job
// A request is sent to the live-connected device, asking it to cancel the operation. This may fail
// if there is no live-connection.
// Only jobs from Comet 18.3.5 or newer can be cancelled. A job can only be cancelled if it has a
// non-empty CancellationID field in its properties.
// If the device is running Comet 21.9.5 or later, this API will wait up to ten seconds for a
// confirmation from the client.
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// JobID: Job ID
func (this *CometAPIClient) UserWebJobCancel(JobID string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["JobID"] = []string{JobID}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/job/cancel", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebNewsGetAll: Get News entries (Web)
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) UserWebNewsGetAll() (NewsEntries, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/news/get-all", nil)
	if err != nil {
		return nil, err
	}

	result := NewsEntries{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebRequestFilesystemObjects: Request a list of filesystem objects from the device
// The device must have granted the administrator permission to view its filenames.
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// TargetID: The live connection GUID
// Path: (Optional) Browse objects inside this path. If empty or not present, returns the top-level
// device paths
func (this *CometAPIClient) UserWebRequestFilesystemObjects(TargetID string, Path *string) (*DispatcherStoredObjectsResponse, error) {
	data := map[string][]string{}
	var err error

	data["TargetID"] = []string{TargetID}

	if Path != nil {
		data["Path"] = []string{*Path}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/request-filesystem-objects", data)
	if err != nil {
		return nil, err
	}

	result := &DispatcherStoredObjectsResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebRequestStorageVault: Request a new Storage Vault (Web)
// This action can be prevented via policy.
// Prior to Comet 19.8.0, the response type was CometAPIResponseMessage (i.e. no DestinationID field
// in response).
// The StorageProvider must exist for the target user account's organization.
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// StorageProvider: ID for the storage template destination
// SelfAddress: (Optional) The external URL for this server. Used to resolve conflicts
func (this *CometAPIClient) UserWebRequestStorageVault(StorageProvider string, SelfAddress *string) (*RequestStorageVaultResponseMessage, error) {
	data := map[string][]string{}
	var err error

	data["StorageProvider"] = []string{StorageProvider}

	if SelfAddress == nil {
		data["SelfAddress"] = []string{this.ServerURL}
	} else {
		data["SelfAddress"] = []string{*SelfAddress}
	}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/request-storage-vault", data)
	if err != nil {
		return nil, err
	}

	result := &RequestStorageVaultResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebRequestStorageVaultProviders: Get the available options for Requesting a Storage Vault
// (User Web)
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) UserWebRequestStorageVaultProviders() (map[string]string, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/request-storage-vault-providers", nil)
	if err != nil {
		return nil, err
	}

	result := map[string]string{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebSessionRevoke: Revoke a session key (log out)
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) UserWebSessionRevoke() (*CometAPIResponseMessage, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/session/revoke", nil)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebSessionStart: Generate a session key (log in)
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
func (this *CometAPIClient) UserWebSessionStart() (*SessionKeyRegeneratedResponse, error) {
	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/session/start", nil)
	if err != nil {
		return nil, err
	}

	result := &SessionKeyRegeneratedResponse{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// UserWebSetProfileHash: Set account profile (atomic, web)
//
// You must supply user authentication credentials to use this API, and the user account must be
// authorized for web access.
// This API requires the Auth Role to be enabled.
//
// - Params
// ProfileData: Updated account profile
// ProfileHash: Previous account profile hash
func (this *CometAPIClient) UserWebSetProfileHash(ProfileData UserProfileConfig, ProfileHash string) (*CometAPIResponseMessage, error) {
	data := map[string][]string{}
	var b []byte
	var err error

	b, err = json.Marshal(ProfileData)
	if err != nil {
		return nil, err
	}
	data["ProfileData"] = []string{string(b)}

	data["ProfileHash"] = []string{ProfileHash}

	body, err := this.Request("application/x-www-form-urlencoded", "POST", "/api/v1/user/web/set-profile-hash", data)
	if err != nil {
		return nil, err
	}

	result := &CometAPIResponseMessage{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}
