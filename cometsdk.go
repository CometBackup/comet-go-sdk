// Autogenerated, do not edit directly
package cometsdk

import (
	"bytes"
	"encoding/json"
	"net/http"
	"strings"
)

// CONSTANTS

// AutoRetentionLevel: The system will automatically choose how often to run an automatic Retention Pass after each backup job.
const BACKUPJOBAUTORETENTION_AUTOMATIC = 0

// AutoRetentionLevel: The system will run a Retention Pass after every single backup job. This is more system-intensive, but is the most responsive at freeing storage space.
const BACKUPJOBAUTORETENTION_IMMEDIATE = 1

// AutoRetentionLevel: The system will follow the automatic ruleset for a 'High Power' device.
const BACKUPJOBAUTORETENTION_MORE_OFTEN = 2

// AutoRetentionLevel: The system will follow the automatic ruleset for a 'Low Power' device.
const BACKUPJOBAUTORETENTION_LESS_OFTEN = 3

// JobClassification:
const JOB_CLASSIFICATION__MIN = 4000

// JobClassification:
const JOB_CLASSIFICATION_UNKNOWN = 4000

// JobClassification:
const JOB_CLASSIFICATION_BACKUP = 4001

// JobClassification:
const JOB_CLASSIFICATION_RESTORE = 4002

// JobClassification: Automatic or manual retention cleaning pass.
const JOB_CLASSIFICATION_RETENTION = 4003

// JobClassification: Another process needed exclusive Vault access (e.g. for retention) but the process died. This task cleans up exclusive lockfiles.
const JOB_CLASSIFICATION_UNLOCK = 4004

// JobClassification: A specific snapshot has been deleted via the Restore wizard.
const JOB_CLASSIFICATION_DELETE_CUSTOM = 4005

// JobClassification: Explicitly re-measuring the size of a Vault (right-click > Advanced menu).
const JOB_CLASSIFICATION_REMEASURE = 4006

// JobClassification: Software update
const JOB_CLASSIFICATION_UPDATE = 4007

// JobClassification:
const JOB_CLASSIFICATION_IMPORT = 4008

// JobClassification: Repair indexes
const JOB_CLASSIFICATION_REINDEX = 4009

// JobClassification:
const JOB_CLASSIFICATION_DEEPVERIFY = 4010

// JobClassification: Software uninstall
const JOB_CLASSIFICATION_UNINSTALL = 4011

// JobClassification:
const JOB_CLASSIFICATION__MAX = 4999

// JobStatus:
const JOB_STATUS_STOP_SUCCESS__MIN = 5000

// JobStatus:
const JOB_STATUS_STOP_SUCCESS = 5000

// JobStatus:
const JOB_STATUS_STOP_SUCCESS__MAX = 5999

// JobStatus:
const JOB_STATUS_RUNNING__MIN = 6000

// JobStatus: Unused
const JOB_STATUS_RUNNING_INDETERMINATE = 6000

// JobStatus:
const JOB_STATUS_RUNNING_ACTIVE = 6001

// JobStatus: A backup job that was marked as stopped or abandoned, but has somehow continued to run
const JOB_STATUS_RUNNING_REVIVED = 6002

// JobStatus:
const JOB_STATUS_RUNNING__MAX = 6999

// JobStatus:
const JOB_STATUS_FAILED__MIN = 7000

// JobStatus:
const JOB_STATUS_FAILED_TIMEOUT = 7000

// JobStatus:
const JOB_STATUS_FAILED_WARNING = 7001

// JobStatus:
const JOB_STATUS_FAILED_ERROR = 7002

// JobStatus:
const JOB_STATUS_FAILED_QUOTA = 7003

// JobStatus:
const JOB_STATUS_FAILED_SCHEDULEMISSED = 7004

// JobStatus:
const JOB_STATUS_FAILED_CANCELLED = 7005

// JobStatus:
const JOB_STATUS_FAILED_SKIPALREADYRUNNING = 7006

// JobStatus:
const JOB_STATUS_FAILED_ABANDONED = 7007

// JobStatus:
const JOB_STATUS_FAILED__MAX = 7999
const DESTINATIONTYPE___INVALID = 0
const DESTINATIONTYPE_S3 = 1000
const DESTINATIONTYPE_SFTP = 1001
const DESTINATIONTYPE_LOCALCOPY = 1002
const DESTINATIONTYPE_COMET = 1003
const DESTINATIONTYPE_FTP = 1004
const DESTINATIONTYPE_AZUREBLOB = 1005
const DESTINATIONTYPE_SPANNED = 1006
const DESTINATIONTYPE_SWIFT = 1007
const DESTINATIONTYPE_B2 = 1008
const DESTINATIONTYPE_LATEST = 1100
const DESTINATIONTYPE_ALL = 1101

// EmailReportType:
const EMAILREPORTTYPE_IMMEDIATE = 0

// EmailReportType:
const EMAILREPORTTYPE_SUMMARY = 1

// FtpsModeType:
const FTPS_MODE_PLAINTEXT = 0

// FtpsModeType:
const FTPS_MODE_IMPLICIT = 1

// FtpsModeType:
const FTPS_MODE_EXPLICIT = 2
const InstallerMetadataFile = "installer.json"

// Severity:
const SEVERITY_INFO = "I"

// Severity:
const SEVERITY_WARNING = "W"

// Severity:
const SEVERITY_ERROR = "E"
const MONGODB_DEFAULT_PORT = 27017
const SERVICE_CALENDAR = 1
const SERVICE_CONTACT = 2
const SERVICE_MAIL = 4
const SERVICE_SHAREPOINT = 8
const SERVICE_ONEDRIVE = 16
const MIXED_VIRTUAL_ACCOUNT_TYPE_USER = 1
const MIXED_VIRTUAL_ACCOUNT_TYPE_GROUP = 2
const MIXED_VIRTUAL_ACCOUNT_TYPE_TEAM_GROUP = 3
const MIXED_VIRTUAL_ACCOUNT_TYPE_SHAREPOINT_ONLY = 4

// RestoreType:
const RESTORETYPE_INVALID = -1

// RestoreType:
const RESTORETYPE_FILE = 0

// RestoreType:
const RESTORETYPE_NULL = 1

// RestoreType:
const RESTORETYPE_PROCESS_PERFILE = 2

// RestoreType:
const RESTORETYPE_PROCESS_ARCHIVE = 3

// RestoreType:
const RESTORETYPE_WINDISK = 4

// RestoreType:
const RESTORETYPE_FILE_ARCHIVE = 5

// RestoreType:
const RESTORETYPE_OFFICE365_CLOUD = 6

// RestoreType:
const RESTORETYPE_VMDK_FILE = 7

// RestoreType:
const RESTORETYPE_VMDK_FILE_NULL = 8

// RestoreType:
const RESTORETYPE_VMDK_FILE_ARCHIVE = 9

// RestoreType: RESTORETYPE_PROCESS_ARCHIVE
const RESTORETYPE_PROCESS_TARBALL = 3

// RestoreArchiveFormat:
const RESTOREARCHIVEFORMAT_TAR = 0

// RestoreArchiveFormat:
const RESTOREARCHIVEFORMAT_TARGZ = 1

// RestoreArchiveFormat:
const RESTOREARCHIVEFORMAT_ZIP = 2

// RestoreArchiveFormat: SquashFS container
const RESTOREARCHIVEFORMAT_SQFS = 3

// RestoreArchiveFormat:
const RESTOREARCHIVEFORMAT_TARZSTD = 4

// RetentionMode: If this mode is set in a RetentionPolicy, then RetentionPolicy.Ranges should be ignored.
const RETENTIONMODE_KEEP_EVERYTHING = 801

// RetentionMode: Delete everything except for jobs matching the ranges in RetentionPolicy.Ranges.
const RETENTIONMODE_DELETE_EXCEPT = 802

// RetentionRangeType:
const RETENTIONRANGE__LOWEST = 900

// RetentionRangeType: Uses Jobs
const RETENTIONRANGE_MOST_RECENT_X_JOBS = 900

// RetentionRangeType: Uses Timestamp
const RETENTIONRANGE_NEWER_THAN_X = 901

// RetentionRangeType: Uses Days, Weeks, Months
const RETENTIONRANGE_JOBS_SINCE = 902

// RetentionRangeType: Uses Days
const RETENTIONRANGE_FIRST_JOB_FOR_EACH_LAST_X_DAYS = 903

// RetentionRangeType: Removed
const RETENTIONRANGE__RESERVED904 = 904

// RetentionRangeType: Uses Months, MonthOffset
const RETENTIONRANGE_FIRST_JOB_FOR_LAST_X_MONTHS = 905

// RetentionRangeType: Uses Weeks, WeekOffset
const RETENTIONRANGE_FIRST_JOB_FOR_LAST_X_WEEKS = 906

// RetentionRangeType: Uses Jobs
const RETENTIONRANGE_LAST_X_BACKUPS_ONE_FOR_EACH_DAY = 907

// RetentionRangeType: Uses Jobs
const RETENTIONRANGE_LAST_X_BACKUPS_ONE_FOR_EACH_WEEK = 908

// RetentionRangeType: Uses Jobs
const RETENTIONRANGE_LAST_X_BACKUPS_ONE_FOR_EACH_MONTH = 909

// RetentionRangeType:
const RETENTIONRANGE__HIGHEST = 909
const RETENTIONRANGE_MAXINT = 1125899906842624

// SftpAuthMode:
const DESTINATION_SFTP_AUTHMODE_NATIVE = 0

// SftpAuthMode:
const DESTINATION_SFTP_AUTHMODE_PASSWORD = 1

// SftpAuthMode:
const DESTINATION_SFTP_AUTHMODE_PRIVATEKEY = 2

// SSHAuthMode:
const SSHCONNECTION_AUTHMODE__INVALID = 0

// SSHAuthMode:
const SSHCONNECTION_AUTHMODE_PASSWORD = 1

// SSHAuthMode: n.b. change values
const SSHCONNECTION_AUTHMODE_PRIVATEKEY = 2
const SCHEDULE_FREQUENCY_LOWEST = 8010

// epoch time
const SCHEDULE_FREQUENCY_ONCEONLY = 8010

// seconds past 00:00 local time
const SCHEDULE_FREQUENCY_DAILY = 8011

// seconds past *:00 local time
const SCHEDULE_FREQUENCY_HOURLY = 8012

// seconds past 00:00 Sunday, local time
const SCHEDULE_FREQUENCY_WEEKLY = 8013

// seconds past 00:00 1st, local time
const SCHEDULE_FREQUENCY_MONTHLY = 8014

// SecondsPast: number of seconds per period. Offset: Shunt seconds after unix epoch
const SCHEDULE_FREQUENCY_PERIODIC = 8015
const SCHEDULE_FREQUENCY_HIGHEST = 8015

// Maximum random delay (5 hours)
const SCHEDULE_MAX_RANDOM_DELAY_SECS = 18000

// 2^50 (1 << 50)
const SCHEDULE_MAXINT = 1125899906842624
const ENGINE_BUILTIN_FILE = "engine1/file"
const ENGINE_BUILTIN_STDOUT = "engine1/stdout"
const ENGINE_BUILTIN_MYSQL = "engine1/mysql"
const ENGINE_BUILTIN_SYSTEMSTATE = "engine1/systemstate"
const ENGINE_BUILTIN_MSSQL = "engine1/mssql"
const ENGINE_BUILTIN_WINDOWSSYSTEM = "engine1/windowssystem"
const ENGINE_BUILTIN_EXCHANGEEDB = "engine1/exchangeedb"
const ENGINE_BUILTIN_VSSWRITER = "engine1/vsswriter"
const ENGINE_BUILTIN_HYPERV = "engine1/hyperv"
const ENGINE_BUILTIN_WINDISK = "engine1/windisk"
const ENGINE_BUILTIN_MONGODB = "engine1/mongodb"
const ENGINE_BUILTIN_MSOFFICE = "engine1/winmsofficemail"

// MSSQLAuthMode:
const MSSQL_AUTH_WINDOWS = "windows"

// MSSQLAuthMode:
const MSSQL_AUTH_NATIVE = "native"

// MSSQLMethod:
const MSSQL_METHOD_OLEDB_NATIVE = "OLEDB_NATIVE"

// MSSQLMethod:
const MSSQL_METHOD_OLEDB_32 = "OLEDB_32"

// StoredObjectType:
const STOREDOBJECTTYPE_FILE = "file"

// StoredObjectType:
const STOREDOBJECTTYPE_DIRECTORY = "dir"

// StoredObjectType:
const STOREDOBJECTTYPE_SYMLINK = "symlink"

// StoredObjectType:
const STOREDOBJECTTYPE_UNIXBLOCKDEVICE = "dev"

// StoredObjectType:
const STOREDOBJECTTYPE_UNIXCHARDEVICE = "chardev"

// StoredObjectType:
const STOREDOBJECTTYPE_UNIXFIFO = "fifo"

// StoredObjectType:
const STOREDOBJECTTYPE_UNIXSOCKET = "socket"

// StoredObjectType:
const STOREDOBJECTTYPE_WINEFS = "winefs"

// StoredObjectType: "file"
const STOREDOBJECTTYPE_EMAILMESSAGE = "emailmessage"

// StoredObjectType: "dir"
const STOREDOBJECTTYPE_EMAILFOLDER = "mailfolder"

// StoredObjectType: "file"
const STOREDOBJECTTYPE_OFFICECONTACT = "contact"

// StoredObjectType: "dir"
const STOREDOBJECTTYPE_OFFICECONTACTFOLDER = "contactfolder"

// StoredObjectType: "file"
const STOREDOBJECTTYPE_OFFICECALENDAREVENT = "calendarevent"

// StoredObjectType: "dir"
const STOREDOBJECTTYPE_OFFICECALENDAR = "calendar"

// StoredObjectType:
const STOREDOBJECTTYPE_MSSITE = "mssite"

// StoredObjectType:
const STOREDOBJECTTYPE_MSSITE_TEAM = "mssiteteam"

// StoredObjectType:
const STOREDOBJECTTYPE_MSSITELISTENTITY = "mssitelistentity"

// StoredObjectType:
const STOREDOBJECTTYPE_MSSITEITEMENTITY = "mssiteitementity"

// StoredObjectType:
const STOREDOBJECTTYPE_MSSITELISTDRIVEENTITY = "mssitelistdriveentity"

// StoredObjectType:
const STOREDOBJECTTYPE_VMDK_FILE = "vmdkfile"

// StoredObjectType:
const STOREDOBJECTTYPE_VMDK_DIRECTORY = "vmdkdir"

// StoredObjectType:
const STOREDOBJECTTYPE_VMDK_WINEFS = "vmdkwinefs"

// StoredObjectType:
const STOREDOBJECTTYPE_VMDK_SYMLINK = "vmdksymlink"

// ExtraFileExclusionOSRestriction:
const OS_ANY = 0

// ExtraFileExclusionOSRestriction:
const OS_ONLY_WINDOWS = 1

// ExtraFileExclusionOSRestriction:
const OS_ONLY_WINDOWS_X8632 = 2

// ExtraFileExclusionOSRestriction:
const OS_ONLY_WINDOWS_X8664 = 3

// ExtraFileExclusionOSRestriction:
const OS_ONLY_MACOS = 4

// ExtraFileExclusionOSRestriction:
const OS_ONLY_LINUX = 5

// DefaultSettingMode:
const SETTING_SYSTEM_DEFAULT = 0

// DefaultSettingMode:
const SETTING_OPTIONAL_DEFAULT_ON = 1

// DefaultSettingMode:
const SETTING_OPTIONAL_DEFAULT_OFF = 2

// DefaultSettingMode:
const SETTING_ENFORCED_ON = 3

// DefaultSettingMode:
const SETTING_ENFORCED_OFF = 4

// LanguageCode:
const DEFAULT_LANGUAGE = "en_US"
const DEFAULT_TIMEZONE = "UTC"
const APPLICATION_VERSION = "22.6.6"
const APPLICATION_VERSION_MAJOR = 22
const APPLICATION_VERSION_MINOR = 6
const APPLICATION_VERSION_REVISION = 6
const RELEASE_CODENAME = "Voyager"
const ENCRYPTIONMETHOD_UNCONFIGURED = 0
const PASSWORD_FORMAT_PLAINTEXT = 0
const UnknownDeviceError = "ERR_UNKNOWN_DEVICE"
const TOTPRequiredError = "ERR_TOTP_REQUIRED"
const UnsupportVmdkFileSystem = "ERR_UNSUPPORT_VMDK_FILE_SYSTEM"
const EMAIL_WORKER_STATE_NOT_STARTED = 0
const EMAIL_WORKER_STATE_STARTED = 1
const EMAIL_WORKER_STATE_CALCULATING = 2
const EMAIL_WORKER_STATE_WAITING = 3
const EMAIL_WORKER_STATE_SENDING = 4

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__UNKNOWN = 0

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__HARDWARE_TOKEN = 1

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__ANDROID = 2

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__APPLE = 3

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__TPM_GENERIC = 4

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__TPM_WINDOWS = 5

// WebAuthnDeviceType:
const WEBAUTHN_DEVICE_TYPE__TPM_LINUX = 6

// UpdateStatus:
const UPDATESTATUS_NOT_SEEN = 0

// UpdateStatus:
const UPDATESTATUS_INELIGIBLE = 1

// UpdateStatus:
const UPDATESTATUS_PENDING = 2

// UpdateStatus:
const UPDATESTATUS_REQUEST_MADE = 3

// UpdateStatus: Device reconnected with bad version
const UPDATESTATUS_UPDATE_FAILED = 4

// UpdateStatus:
const UPDATESTATUS_UPDATE_CONFIRMED = 5

// ReplicatorState:
const REPLICATOR_STATE_NONE = 0

// ReplicatorState:
const REPLICATOR_STATE_FILE_LIST_WORKER_STARTED = 1

// ReplicatorState:
const REPLICATOR_STATE_FILE_LIST_SYNC_RUNNING = 2

// ReplicatorState:
const REPLICATOR_STATE_FILE_LIST_SYNC_FINISHED = 4

// ReplicatorState:
const REPLICATOR_STATE_WORKERS_STARTED = 8

// ReplicatorDisplayClass:
const REPLICATOR_DISPLAYCLASS_STORAGE = 100

// ReplicatorDisplayClass:
const REPLICATOR_DISPLAYCLASS_USER = 101

// SearchClauseType:
const SEARCHCLAUSE_RULE = ""

// SearchClauseType:
const SEARCHCLAUSE_AND = "and"

// SearchClauseType:
const SEARCHCLAUSE_OR = "or"

// SearchClauseType:
const SEARCHCLAUSE_NOT_AND = "not_and"

// SearchClauseType:
const SEARCHCLAUSE_NOT_OR = "not_or"
const SEARCHOPERATOR_STRING_EQ = "str_eq"
const SEARCHOPERATOR_STRING_NEQ = "str_neq"
const SEARCHOPERATOR_STRING_CONTAINS = "str_contains"
const SEARCHOPERATOR_STRING_NCONTAINS = "str_ncontains"
const SEARCHOPERATOR_STRING_STARTSWITH = "str_startswith"
const SEARCHOPERATOR_STRING_NSTARTSWITH = "str_nstartswith"
const SEARCHOPERATOR_STRING_ENDSWITH = "str_endswith"
const SEARCHOPERATOR_STRING_NENDSWITH = "str_nendswith"
const SEARCHOPERATOR_STRING_EQ_CI = "str_eq_ci"
const SEARCHOPERATOR_STRING_NEQ_CI = "str_neq_ci"
const SEARCHOPERATOR_STRING_CONTAINS_CI = "str_contains_ci"
const SEARCHOPERATOR_STRING_NCONTAINS_CI = "str_ncontains_ci"
const SEARCHOPERATOR_STRING_STARTSWITH_CI = "str_startswith_ci"
const SEARCHOPERATOR_STRING_NSTARTSWITH_CI = "str_nstartswith_ci"
const SEARCHOPERATOR_STRING_ENDSWITH_CI = "str_endswith_ci"
const SEARCHOPERATOR_STRING_NENDSWITH_CI = "str_nendswith_ci"
const SEARCHOPERATOR_STRING_REGEXMATCH = "str_regexmatch"
const SEARCHOPERATOR_STRING_NREGEXMATCH = "str_nregexmatch"
const SEARCHOPERATOR_INT_EQ = "int_eq"
const SEARCHOPERATOR_INT_NEQ = "int_neq"
const SEARCHOPERATOR_INT_GT = "int_gt"
const SEARCHOPERATOR_INT_GTE = "int_gte"
const SEARCHOPERATOR_INT_LT = "int_lt"
const SEARCHOPERATOR_INT_LTE = "int_lte"
const SEARCHOPERATOR_BOOL_IS = "bool_is"
const SEARCHOPERATOR_BOOL_NIS = "bool_nis"

// EmailDeliveryType:
const EMAIL_DELIVERY_NONE = ""

// EmailDeliveryType:
const EMAIL_DELIVERY_MX_DIRECT = "builtin"

// EmailDeliveryType:
const EMAIL_DELIVERY_SMTP = "smtp"

// EmailDeliveryType:
const EMAIL_DELIVERY_SMTP_SSL = "smtp-ssl"

// EmailDeliveryType: Legacy alias
const EMAIL_DELIVERY_BUILTIN = EMAIL_DELIVERY_MX_DIRECT

// RemoteServerType:
const REMOTESERVER_COMET = "comet"

// RemoteServerType:
const REMOTESERVER_LDAP = "ldap"

// RemoteServerType:
const REMOTESERVER_B2 = "b2"

// RemoteServerType:
const REMOTESERVER_WASABI = "wasabi"

// RemoteServerType:
const REMOTESERVER_CUSTOM = "custom"

// RemoteServerType:
const REMOTESERVER_S3_GENERIC = "s3"

// RemoteServerType:
const REMOTESERVER_AWS = "aws"

// LDAPSecurityMethod:
const LDAPSECURITYMETHOD_PLAIN = "plain"

// LDAPSecurityMethod:
const LDAPSECURITYMETHOD_LDAPS = "ldaps"

// LDAPSecurityMethod:
const LDAPSECURITYMETHOD_STARTTLS = "starttls"

// MacOSCodesignLevel:
const MACOSCODESIGN_LEVEL_SIGN = 0

// MacOSCodesignLevel:
const MACOSCODESIGN_LEVEL_SIGN_NOTARISE = 1

// MacOSCodesignLevel:
const MACOSCODESIGN_LEVEL_SIGN_NOTARISE_STAPLE = 2

// ClientBrandingBuildMode: Public-Doc: The software client will be custom-built by this Comet Server, allowing custom branding, default server URL, and codesigning.
const CLIENTBRANDINGBUILD_CUSTOM = 0

// ClientBrandingBuildMode: Public-Doc: A pre-built software client will be served, with Comet-branding, no server URL, and Comet codesigning.
const CLIENTBRANDINGBUILD_PREBUILT = 1

// StreamableEventType:
const SEVT__MIN = 4000

// StreamableEventType: Event is emitted when the webhook is registered, or when the server starts up. The Data associated is ServerMetaVersionInfo
const SEVT_META_HELLO = 4000

// StreamableEventType: Data is the profile object
const SEVT_ACCOUNT_NEW = 4100

// StreamableEventType: Data is the username
const SEVT_ACCOUNT_REMOVED = 4101

// StreamableEventType: Data is the profile object
const SEVT_ACCOUNT_UPDATED = 4102

// StreamableEventType:
const SEVT_JOB_NEW = 4200

// StreamableEventType:
const SEVT_JOB_COMPLETED = 4201

// StreamableEventType: Data is the string bucket ref
const SEVT_BUCKET_NEW = 4300

// StreamableEventType:
const SEVT__MAX = 4999

// CompressMode:
const COMPRESS_INVALID = 0

// CompressMode:
const COMPRESS_LVL_1 = 1

// CompressMode:
const COMPRESS_LVL_2 = 2

// CompressMode:
const COMPRESS_LVL_3 = 3

// CompressMode:
const COMPRESS_LVL_4 = 4

// CompressMode:
const COMPRESS_LVL_5 = 5

// CompressMode:
const COMPRESS_MAX = COMPRESS_LVL_5

// CompressMode:
const COMPRESS_DEFAULT = COMPRESS_LVL_4
const OFFICE365_REGION_PUBLIC = "GlobalPublicCloud"
const OFFICE365_REGION_CHINA = "ChinaCloud"
const OFFICE365_REGION_GERMANY = "GermanCloud"
const OFFICE365_REGION_US_GOVT = "USGovtGccCloud"
const OFFICE365_REGION_US_DOD = "USGovtGccDoDCloud"

// DATA TYPES

type VMDKSnapshotViewOptions struct {
	Enabled       bool   `json:"enabled"`
	PartitionGUID string `json:"partitionguid"`
	ListPath      string `json:"listpath"`
}

type SpannedStorageExtraInfo struct {
	Targets []StorageFreeSpaceInfo `json:"targets"`
}

type VaultSnapshot struct {
	Snapshot            string `json:"snapshot"`
	Source              string `json:"source"`
	CreateTime          int64  `json:"createtime"`
	HasOriginalPathInfo bool   `json:"hasoriginalpathinfo"`
}

type DispatcherWindiskSnapshotResponse struct {
	Status          int         `json:"status"`
	Message         string      `json:"message"`
	WindiskSnapshot []DiskDrive `json:"windisksnapshot"`
}

type WebAuthnRegistrationChallengeResponse struct {
	Status                    int                                        `json:"status"`
	Message                   string                                     `json:"message"`
	ChallengeID               string                                     `json:"challengeid"`
	CredentialCreationOptions WebAuthnPublicKeyCredentialCreationOptions `json:"credentialcreationoptions"`
}

type SearchClause struct {
	ClauseType     SearchClauseType   `json:"clausetype"`
	RuleField      string             `json:"rulefield"`
	RuleOperator   SearchOperatorType `json:"ruleoperator"`
	RuleValue      string             `json:"rulevalue"`
	ClauseChildren []SearchClause     `json:"clausechildren,omitempty"`
}

type EmailOptions struct {
	Mode                        EmailDeliveryType `json:"mode"`
	FromEmail                   string            `json:"fromemail"`
	FromName                    string            `json:"fromname"`
	SMTPHost                    string            `json:"smtphost,omitempty"`
	SMTPPort                    int               `json:"smtpport,omitempty"`
	SMTPUsername                string            `json:"smtpusername,omitempty"`
	SMTPPassword                string            `json:"smtppassword,omitempty"`
	SMTPAllowInvalidCertificate bool              `json:"smtpallowinvalidcertificate,omitempty"`
	SMTPAllowUnencrypted        bool              `json:"smtpallowunencrypted,omitempty"`
}

type B2VirtualStorageRoleSettings struct {
	MasterBucket     string `json:"masterbucket"`
	KeyID            string `json:"keyid"`
	AppKey           string `json:"appkey"`
	HideDeletedFiles bool   `json:"hidedeletedfiles"`
}

type WasabiVirtualStorageRoleSettings struct {
	MasterBucket string `json:"masterbucket"`
	AccessKey    string `json:"accesskey"`
	SecretKey    string `json:"secretkey"`
}

type GlobalOverrideOptions struct {
	RandomDelaySecs uint64 `json:"randomdelaysecs,omitempty"`
}

type DefaultEmailReportPolicy struct {
	ShouldOverrideDefaultReports bool                `json:"shouldoverridedefaultreports"`
	Reports                      []EmailReportConfig `json:"reports"`
}

type WebAuthnCredentialDescriptor struct {
	Type         string   `json:"type"`
	CredentialID []byte   `json:"id"`
	Transport    []string `json:"transports,omitempty"`
}

type LocalDestinationLocation struct {
	LocalcopyPath                 string `json:"localcopypath"`
	LocalcopyWinSMBUsername       string `json:"localcopywinsmbusername"`
	LocalcopyWinSMBPassword       string `json:"localcopywinsmbpassword"`
	LocalcopyWinSMBPasswordFormat uint64 `json:"localcopywinsmbpasswordformat"`
}

type SourceIncludePattern struct {
	TopDirectory string `json:"topdirectory"`
	Value        string `json:"value"`
}

type U2FSignRequest struct {
	ChallengeID    string             `json:"challengeid"`
	ChallengeData  string             `json:"challengedata"`
	AppID          string             `json:"appid"`
	RegisteredKeys []U2FRegisteredKey `json:"registeredkeys"`
}

type AvailableDownload struct {
	Category    string `json:"category"`
	Description string `json:"description"`
	Recommended bool   `json:"recommended"`
}

type EDBFileInfo struct {
	Name                   string `json:"name"`
	GUID                   string `json:"guid"`
	ServerName             string `json:"servername"`
	CircularLoggingEnabled bool   `json:"circularloggingenabled"`
}

type BrowseEDBResponse struct {
	Status    int           `json:"status"`
	Message   string        `json:"message"`
	Databases []EDBFileInfo `json:"databases"`
}

type HyperVMachineInfo struct {
	ID          string `json:"id"`
	DisplayName string `json:"name"`
}

type AdminEmailOptions struct {
	FromEmail string `json:"fromemail"`
	FromName  string `json:"fromname"`
}

type OSInfo struct {
	Version      string `json:"version,omitempty"`
	Distribution string `json:"distribution,omitempty"`
	Build        string `json:"build,omitempty"`
}

type AllowedAdminUser struct {
	Username                     string `json:"username"`
	OrganizationID               string `json:"organizationid"`
	ExternalAuthenticationSource string `json:"externalauthenticationsource,omitempty"`
	PasswordFormat               int    `json:"passwordformat"`
	Password                     string `json:"password"`
	AllowPasswordLogin           bool   `json:"allowpasswordlogin"`
	AllowPasswordAndTOTPLogin    bool   `json:"allowpasswordandtotplogin"`
	// DEPRECATED: This member has been deprecated since Comet version 21.12.0
	AllowPasswordAndU2FLogin      bool `json:"allowpasswordandu2flogin"`
	AllowPasswordAndWebAuthnLogin bool `json:"allowpasswordandwebauthnlogin"`
	// DEPRECATED: This member has been deprecated since Comet version 21.12.0
	U2FRegistrations        []AdminU2FRegistration      `json:"u2fregistrations,omitempty"`
	WebAuthnRegistrations   []AdminWebAuthnRegistration `json:"webauthnregistrations,omitempty"`
	TOTPKeyEncryptionFormat int                         `json:"totpkeyencryptionformat,omitempty"`
	TOTPKey                 string                      `json:"totpkey,omitempty"`
	IPWhitelist             string                      `json:"ipwhitelist,omitempty"`
	Permissions             AdminUserPermissions        `json:"permissions"`
}

type AuthenticationRoleOptions struct {
	RoleEnabled                bool                  `json:"roleenabled"`
	DatabaseCheckLevel         int                   `json:"databasechecklevel"`
	GenerateMissedBackupEvents bool                  `json:"generatemissedbackupevents"`
	NoMissedBackupEventsBefore int64                 `json:"nomissedbackupeventsbefore"`
	GenerateScheduledEmails    bool                  `json:"generatescheduledemails"`
	PruneLogsAfterDays         int                   `json:"prunelogsafterdays"`
	RemoteStorage              []RemoteStorageOption `json:"remotestorage"`
	ReplicateTo                []ReplicaServer       `json:"replicateto"`
	GlobalOverrides            GlobalOverrideOptions `json:"globaloverrides,omitempty"`
}

type ExternalAuthenticationSource struct {
	Type          RemoteServerType                         `json:"type"`
	Description   string                                   `json:"description"`
	RemoteAddress string                                   `json:"remoteaddress,omitempty"`
	Username      string                                   `json:"username,omitempty"`
	Password      string                                   `json:"password,omitempty"`
	LDAP          ExternalLDAPAuthenticationSourceSettings `json:"ldap,omitempty"`
	B2            B2VirtualStorageRoleSettings             `json:"b2,omitempty"`
	Wasabi        WasabiVirtualStorageRoleSettings         `json:"wasabi,omitempty"`
	Custom        CustomRemoteBucketSettings               `json:"custom,omitempty"`
	S3            S3GenericVirtualStorageRole              `json:"s3,omitempty"`
	// Amazon AWS - Virtual Storage Role
	AWS                AmazonAWSVirtualStorageRoleSettings `json:"aws,omitempty"`
	NewUserPermissions AdminUserPermissions                `json:"newuserpermissions"`
}

type VSSWriterInfo struct {
	DisplayName string         `json:"displayname"`
	Components  []VSSComponent `json:"components"`
}

type BackupRuleEventTriggers struct {
	OnPCBoot                bool `json:"onpcboot,omitempty"`
	OnPCBootIfLastJobMissed bool `json:"onpcbootiflastjobmissed,omitempty"`
}

type GroupPolicy struct {
	Description       string     `json:"description"`
	OrganizationID    string     `json:"organizationid"`
	Policy            UserPolicy `json:"policy"`
	DefaultUserPolicy bool       `json:"defaultuserpolicy"`
}

type Office365Connection struct {
	FeatureFlag          string                   `json:"featureflag"`
	Credential           Office365Credential      `json:"credential"`
	CustomSetting        Office365CustomSetting   `json:"customsetting"`
	MailboxUniqueMembers []string                 `json:"mailboxuniquemembers"`
	SiteUniqueMembers    []string                 `json:"siteuniquemembers"`
	CustomSettingV2      Office365CustomSettingV2 `json:"customsettingv2"`
}

type RetentionRange struct {
	Type        RetentionRangeType `json:"type"`
	Timestamp   int64              `json:"timestamp"`
	Jobs        int64              `json:"jobs"`
	Days        int64              `json:"days"`
	Weeks       int64              `json:"weeks"`
	Months      int64              `json:"months"`
	WeekOffset  int64              `json:"weekoffset"`
	MonthOffset int64              `json:"monthoffset"`
}

type SourceConfig struct {
	Engine                       string                     `json:"engine"`
	Description                  string                     `json:"description"`
	OwnerDevice                  string                     `json:"ownerdevice"`
	CreateTime                   int64                      `json:"createtime"`
	ModifyTime                   int64                      `json:"modifytime"`
	PreExec                      []string                   `json:"preexec"`
	ThawExec                     []string                   `json:"thawexec"`
	PostExec                     []string                   `json:"postexec"`
	EngineProps                  map[string]string          `json:"engineprops"`
	OverrideDestinationRetention map[string]RetentionPolicy `json:"overridedestinationretention,omitempty"`
	Statistics                   SourceStatistics           `json:"statistics,omitempty"`
}

type StorageFreeSpaceInfo struct {
	Unlimited      bool                    `json:"unlimited"`
	UsedPercent    float32                 `json:"usedpercent"`
	AvailableBytes uint64                  `json:"availablebytes"`
	Spanned        SpannedStorageExtraInfo `json:"spanned,omitempty"`
	B2             B2StorageExtraInfo      `json:"b2,omitempty"`
}

type U2FRegisterRequest struct {
	Challenge string `json:"challenge"`
	Version   string `json:"version"`
}

type WebAuthnCredential struct {
	PublicKey       []byte `json:"publickey"`
	AttestationType string `json:"attestationtype"`
	AAGUID          []byte `json:"aaguid"`
	SignCount       uint32 `json:"signcount"`
	CloneWarning    bool   `json:"clonewarning"`
}

type CometDestinationLocation struct {
	CometServer    string `json:"cometserver"`
	CometBucket    string `json:"cometbucket"`
	CometBucketKey string `json:"cometbucketkey"`
}

type DaysOfWeekConfig struct {
	Sunday    bool `json:"sunday"`
	Monday    bool `json:"monday"`
	Tuesday   bool `json:"tuesday"`
	Wednesday bool `json:"wednesday"`
	Thursday  bool `json:"thursday"`
	Friday    bool `json:"friday"`
	Saturday  bool `json:"saturday"`
}

type WebAuthnUserEntity struct {
	Name        string `json:"name"`
	Icon        string `json:"icon,omitempty"`
	DisplayName string `json:"displayname,omitempty"`
	ID          []byte `json:"id"`
}

type WebAuthnAuthenticatorSelection struct {
	AuthenticatorAttachment string `json:"authenticatorattachment,omitempty"`
	RequireResidentKey      bool   `json:"requireresidentkey,omitempty"`
	UserVerification        string `json:"userverification,omitempty"`
}

type CustomRemoteBucketSettings struct {
	URL string `json:"url"`
}

type StreamableEvent struct {
	OwnerOrganizationID string              `json:"ownerorganizationid"`
	Type                StreamableEventType `json:"type"`
	Data                interface{}         `json:"data,omitempty"`
}

type ProtectedItemEngineTypePolicy struct {
	ShouldRestrictEngineTypeList    bool     `json:"shouldrestrictenginetypelist"`
	AllowedEngineTypeWhenRestricted []string `json:"allowedenginetypewhenrestricted"`
}

type SSHConnection struct {
	SSHServer                       string      `json:"sshserver"`
	SSHUsername                     string      `json:"sshusername"`
	SSHAuthMode                     SSHAuthMode `json:"sshauthmode"`
	SSHPassword                     string      `json:"sshpassword"`
	SSHPrivateKey                   string      `json:"sshprivatekey"`
	SSHCustomAuth_UseKnownHostsFile bool        `json:"sshcustomauth_useknownhostsfile"`
	SSHCustomAuth_KnownHostsFile    string      `json:"sshcustomauth_knownhostsfile"`
}

type InstallTokenResponse struct {
	Status       int          `json:"status"`
	Message      string       `json:"message"`
	InstallToken InstallToken `json:"installtoken"`
}

type BrowseSQLServerResponse struct {
	Status  int               `json:"status"`
	Message string            `json:"message"`
	Objects map[string]string `json:"objects"`
}

type S3GenericVirtualStorageRole struct {
	S3Endpoint   string `json:"s3endpoint"`
	IAMEndpoint  string `json:"iamendpoint"`
	MasterBucket string `json:"masterbucket"`
	AccessKey    string `json:"accesskey"`
	SecretKey    string `json:"secretkey"`
}

type ConstellationCheckReport struct {
	CheckStarted   int64          `json:"checkstarted"`
	CheckCompleted int64          `json:"checkcompleted"`
	Usage          BucketUsageMap `json:"usage"`
}

type ServerConfigOptionsBrandingFragment struct {
	Branding BrandingOptions `json:"branding"`
}

type U2FRegistrationChallengeResponse struct {
	Status           int                  `json:"status"`
	Message          string               `json:"message"`
	ChallengeID      string               `json:"challengeid"`
	AppID            string               `json:"appid"`
	RegisteredKeys   []U2FRegisteredKey   `json:"registeredkeys"`
	RegisterRequests []U2FRegisterRequest `json:"registerrequests"`
}

type BackupJobProgress struct {
	Counter      int64 `json:"counter"`
	SentTime     int64 `json:"senttime"`
	RecievedTime int64 `json:"recievedtime"`
	BytesDone    int64 `json:"bytesdone"`
	ItemsDone    int64 `json:"itemsdone"`
}

type BackupRuleConfig struct {
	Description           string                  `json:"description"`
	CreateTime            int64                   `json:"createtime"`
	ModifyTime            int64                   `json:"modifytime"`
	PreExec               []string                `json:"preexec"`
	ThawExec              []string                `json:"thawexec"`
	PostExec              []string                `json:"postexec"`
	Source                string                  `json:"source"`
	Destination           string                  `json:"destination"`
	SkipAlreadyRunning    bool                    `json:"skipalreadyrunning"`
	StopAfter             int64                   `json:"stopafter"`
	LimitVaultSpeedBps    int64                   `json:"limitvaultspeedbps"`
	ReduceDiskConcurrency bool                    `json:"reducediskconcurrency"`
	UseOnDiskIndexes      bool                    `json:"useondiskindexes"`
	AllowZeroFilesSuccess bool                    `json:"allowzerofilessuccess"`
	AutoRetentionLevel    AutoRetentionLevel      `json:"autoretentionlevel"`
	Schedules             []ScheduleConfig        `json:"schedules"`
	EventTriggers         BackupRuleEventTriggers `json:"eventtriggers"`
}

type S3DestinationLocation struct {
	S3Server        string `json:"s3server"`
	S3UsesTLS       bool   `json:"s3usestls"`
	S3AccessKey     string `json:"s3accesskey"`
	S3SecretKey     string `json:"s3secretkey"`
	S3BucketName    string `json:"s3bucketname"`
	S3Subdir        string `json:"s3subdir"`
	S3UsesV2Signing bool   `json:"s3usesv2signing"`
}

type RequestStorageVaultResponseMessage struct {
	Status        int    `json:"status"`
	Message       string `json:"message"`
	DestinationID string `json:"destinationid"`
}

type SessionKeyRegeneratedResponse struct {
	Status      int    `json:"status"`
	Message     string `json:"message"`
	SessionKey  string `json:"sessionkey"`
	SessionType string `json:"sessiontype"`
}

type TotpRegeneratedResponse struct {
	Status      int    `json:"status"`
	Message     string `json:"message"`
	Image       string `json:"image"`
	URL         string `json:"url"`
	ProfileHash string `json:"profilehash"`
}

type ServerMetaBrandingProperties struct {
	BrandName                     string `json:"brandname"`
	ProductName                   string `json:"productname"`
	HasImage                      bool   `json:"hasimage"`
	ImageEtag                     string `json:"imageetag"`
	TopColor                      string `json:"topcolor"`
	HideNewsArea                  bool   `json:"hidenewsarea"`
	AllowUnauthenticatedDownloads bool   `json:"allowunauthenticateddownloads"`
	AllowAuthenticatedDownloads   bool   `json:"allowauthenticateddownloads"`
	PruneLogsAfterDays            int64  `json:"prunelogsafterdays"`
	ExpiredInSeconds              int64  `json:"expiredinseconds"`
}

type WebAuthnCredentialAssertion struct {
	Response WebAuthnPublicKeyCredentialRequestOptions `json:"publickey"`
}

type RatelimitOptions struct {
	Rules []RatelimitRule `json:"rules,omitempty"`
}

type AzureDestinationLocation struct {
	AZBAccountName string `json:"azbaccountname"`
	AZBAccountKey  string `json:"azbaccountkey"`
	AZBContainer   string `json:"azbcontainer"`
	AZBRealm       string `json:"azbrealm"`
	AZBPrefix      string `json:"azbprefix"`
}

type DeviceConfig struct {
	FriendlyName     string                     `json:"friendlyname"`
	RegistrationTime int64                      `json:"registrationtime,omitempty"`
	PlatformVersion  OSInfo                     `json:"platformversion,omitempty"`
	Sources          map[string]SourceBasicInfo `json:"sources,omitempty"`
	DeviceTimezone   string                     `json:"devicetimezone,omitempty"`
}

type SizeMeasurement struct {
	Size             int64 `json:"size"`
	MeasureStarted   int64 `json:"measurestarted"`
	MeasureCompleted int64 `json:"measurecompleted"`
}

type GetProfileAndHashResponseMessage struct {
	Status      int               `json:"status"`
	Message     string            `json:"message"`
	ProfileHash string            `json:"profilehash"`
	Profile     UserProfileConfig `json:"profile"`
}

type WebAuthnPublicKeyCredentialCreationOptions struct {
	Challenge              []byte                           `json:"challenge"`
	RelyingParty           WebAuthnRelyingPartyEntity       `json:"rp"`
	User                   WebAuthnUserEntity               `json:"user"`
	Parameters             []WebAuthnCredentialParameter    `json:"pubkeycredparams,omitempty"`
	AuthenticatorSelection WebAuthnAuthenticatorSelection   `json:"authenticatorselection,omitempty"`
	Timeout                int                              `json:"timeout,omitempty"`
	CredentialExcludeList  []WebAuthnCredentialDescriptor   `json:"excludecredentials,omitempty"`
	Extensions             WebAuthnAuthenticationExtensions `json:"extensions,omitempty"`
	Attestation            string                           `json:"attestation,omitempty"`
}

type BrandingOptions struct {
	BrandName                           string                  `json:"brandname"`
	LogoImage                           string                  `json:"logoimage"`
	TopColor                            string                  `json:"topcolor"`
	Favicon                             string                  `json:"favicon"`
	HideNewsArea                        bool                    `json:"hidenewsarea"`
	ProductName                         string                  `json:"productname"`
	CompanyName                         string                  `json:"companyname"`
	HelpURL                             string                  `json:"helpurl"`
	HelpIsPopup                         bool                    `json:"helpispopup"`
	DefaultLoginServerURL               string                  `json:"defaultloginserverurl"`
	TileBackgroundColor                 string                  `json:"tilebackgroundcolor"`
	AccountRegisterURL                  string                  `json:"accountregisterurl"`
	HideBackgroundLogo                  bool                    `json:"hidebackgroundlogo"`
	BuildMode                           ClientBrandingBuildMode `json:"buildmode"`
	PathIcoFile                         string                  `json:"pathicofile"`
	PathIcnsFile                        string                  `json:"pathicnsfile"`
	PathMenuBarIcnsFile                 string                  `json:"pathmenubaricnsfile"`
	PathEulaRtf                         string                  `json:"patheulartf"`
	PathTilePng                         string                  `json:"pathtilepng"`
	PathHeaderImage                     string                  `json:"pathheaderimage"`
	PathAppIconImage                    string                  `json:"pathappiconimage"`
	PackageIdentifier                   string                  `json:"packageidentifier"`
	WindowsCodeSignPKCS12FilePath       string                  `json:"windowscodesignpkcs12filepath"`
	WindowsCodeSignPKCS12PasswordFormat uint64                  `json:"windowscodesignpkcs12passwordformat"`
	WindowsCodeSignPKCS12Password       string                  `json:"windowscodesignpkcs12password"`
	WindowsCodeSignPKCS11Engine         string                  `json:"windowscodesignpkcs11engine"`
	WindowsCodeSignPKCS11Module         string                  `json:"windowscodesignpkcs11module"`
	WindowsCodeSignPKCS11Certfile       string                  `json:"windowscodesignpkcs11certfile"`
	WindowsCodeSignPKCS11KeyID          string                  `json:"windowscodesignpkcs11keyid"`
	WindowsCodeSignPKCS11PasswordFormat uint64                  `json:"windowscodesignpkcs11passwordformat"`
	WindowsCodeSignPKCS11Password       string                  `json:"windowscodesignpkcs11password"`
	MacOSCodeSign                       MacOSCodeSignProperties `json:"macoscodesign"`
}

type RemoteStorageOption struct {
	Type          RemoteServerType                         `json:"type"`
	Description   string                                   `json:"description"`
	RemoteAddress string                                   `json:"remoteaddress,omitempty"`
	Username      string                                   `json:"username,omitempty"`
	Password      string                                   `json:"password,omitempty"`
	LDAP          ExternalLDAPAuthenticationSourceSettings `json:"ldap,omitempty"`
	B2            B2VirtualStorageRoleSettings             `json:"b2,omitempty"`
	Wasabi        WasabiVirtualStorageRoleSettings         `json:"wasabi,omitempty"`
	Custom        CustomRemoteBucketSettings               `json:"custom,omitempty"`
	S3            S3GenericVirtualStorageRole              `json:"s3,omitempty"`
	// Amazon AWS - Virtual Storage Role
	AWS                 AmazonAWSVirtualStorageRoleSettings `json:"aws,omitempty"`
	StorageLimitEnabled bool                                `json:"storagelimitenabled"`
	StorageLimitBytes   int64                               `json:"storagelimitbytes"`
	RebrandStorage      bool                                `json:"rebrandstorage"`
}

type UserCustomEmailSettings struct {
	Reports []EmailReportConfig `json:"reports"`
}

type DestinationStatistics struct {
	ClientProvidedSize                 SizeMeasurement    `json:"clientprovidedsize"`
	ClientProvidedContent              ContentMeasurement `json:"clientprovidedcontent"`
	LastSuccessfulDeepVerify_GUID      string             `json:"lastsuccessfuldeepverify_guid,omitempty"`
	LastSuccessfulDeepVerify_StartTime int64              `json:"lastsuccessfuldeepverify_starttime,omitempty"`
	LastSuccessfulDeepVerify_EndTime   int64              `json:"lastsuccessfuldeepverify_endtime,omitempty"`
}

type TestResponse struct {
	Status  int    `json:"status"`
	Message string `json:"message"`
	Exists  bool   `json:"exists"`
}

type AdminUserPermissions struct {
	PreventEditServerSettings bool `json:"preventeditserversettings,omitempty"`
	PreventServerShutdown     bool `json:"preventservershutdown,omitempty"`
	PreventChangePassword     bool `json:"preventchangepassword,omitempty"`
	AllowEditBranding         bool `json:"alloweditbranding,omitempty"`
	AllowEditRemoteStorage    bool `json:"alloweditremotestorage,omitempty"`
}

type InstallToken struct {
	Username   string `json:"username"`
	Server     string `json:"server"`
	Token      string `json:"token"`
	CreateTime int64  `json:"createtime"`
	Used       bool   `json:"used"`
	ExpireTime int64  `json:"expiretime"`
}

type Office365ObjectInfo struct {
	GUID    string   `json:"guid"`
	Name    string   `json:"name"`
	Type    string   `json:"type"`
	Value   string   `json:"value"`
	Members []string `json:"members"`
}

type HTTPConnectorOptions struct {
	ListenAddress__DONOTUSEDIRECTLY string `json:"listenaddress"`
	SSLCertPath                     string `json:"sslcertpath,omitempty"`
	SSLIntermediate                 string `json:"sslintermediate,omitempty"`
	SSLCertKey                      string `json:"sslcertkey,omitempty"`
	AutoSSLDomains                  string `json:"autossldomains,omitempty"`
	SSLPfxPath                      string `json:"sslpfxpath,omitempty"`
	SSLPfxPassword                  string `json:"sslpfxpassword,omitempty"`
}

type FTPDestinationLocation struct {
	FTPServer               string       `json:"ftpserver"`
	FTPUsername             string       `json:"ftpusername"`
	FTPPassword             string       `json:"ftppassword"`
	FTPBaseUseHomeDirectory bool         `json:"ftpbaseusehomedirectory"`
	FTPCustomBaseDirectory  string       `json:"ftpcustombasedirectory"`
	FTPSMode                FtpsModeType `json:"ftpsmode"`
	FTPPort                 int          `json:"ftpport"`
	FTPMaxConnections       int          `json:"ftpmaxconnections"`
	FTPAcceptInvalidSSL     bool         `json:"ftpacceptinvalidssl"`
}

type RestoreJobAdvancedOptions struct {
	Type                   RestoreType                `json:"type"`
	OverwriteExistingFiles bool                       `json:"overwriteexistingfiles"`
	DestIsOriginalLocation bool                       `json:"destisoriginallocation"`
	DestPath               string                     `json:"destpath"`
	ExactDestPaths         []string                   `json:"exactdestpaths"`
	ArchiveFormat          RestoreArchiveFormat       `json:"archiveformat"`
	Office365Credential    RestoreOffice365Credential `json:"office365credential,omitempty"`
}

type U2FRegisteredKey struct {
	AppID     string `json:"appid"`
	KeyHandle string `json:"keyhandle"`
	Version   string `json:"version"`
}

type WebAuthnRelyingPartyEntity struct {
	Name string `json:"name"`
	Icon string `json:"icon,omitempty"`
	ID   string `json:"id"`
}

type BucketProperties struct {
	OrganizationID     string          `json:"organizationid"`
	CreateTime         int64           `json:"createtime"`
	ReadWriteKeyFormat int             `json:"readwritekeyformat"`
	ReadWriteKey       string          `json:"readwritekey"`
	Size               SizeMeasurement `json:"size"`
}

type UserProfileFragment struct {
	Username string `json:"username"`
}

type LicenseOptions struct {
	Email        string `json:"email,omitempty"`
	SerialNumber string `json:"serialnumber"`
}

type Organization struct {
	Name              string                   `json:"name"`
	Hosts             []string                 `json:"hosts"`
	SoftwareBuildRole SoftwareBuildRoleOptions `json:"softwarebuildrole"`
	Branding          BrandingOptions          `json:"branding"`
	RemoteStorage     []RemoteStorageOption    `json:"remotestorage"`
	WebhookOptions    map[string]WebhookOption `json:"webhookoptions"`
	Email             EmailOptions             `json:"email"`
	IsSuspended       bool                     `json:"issuspended"`
}

type CometAPIResponseMessage struct {
	Status  int    `json:"status"`
	Message string `json:"message"`
}

type Office365MixedVirtualAccount struct {
	ID                   string   `json:"id"`
	Type                 uint     `json:"type,omitempty"`
	DisplayName          string   `json:"displayname,omitempty"`
	Mail                 string   `json:"mail,omitempty"`
	JobTitle             string   `json:"jobtitle,omitempty"`
	SiteID               string   `json:"siteid,omitempty"`
	WebID                string   `json:"webid,omitempty"`
	WebURL               string   `json:"weburl,omitempty"`
	UserPrincipalName    string   `json:"userprincipalname,omitempty"`
	EnabledServiceOption uint     `json:"enabledserviceoption,omitempty"`
	Members              []string `json:"members,omitempty"`
	ServiceOptions       uint     `json:"serviceoptions,omitempty"`
	MemberServiceOptions uint     `json:"memberserviceoptions,omitempty"`
	HasLicense           bool     `json:"haslicense,omitempty"`
}

type AdminSecurityOptions struct {
	PasswordFormat            int    `json:"passwordformat"`
	Password                  string `json:"password"`
	AllowPasswordLogin        bool   `json:"allowpasswordlogin"`
	AllowPasswordAndTOTPLogin bool   `json:"allowpasswordandtotplogin"`
	// DEPRECATED: This member has been deprecated since Comet version 21.12.0
	AllowPasswordAndU2FLogin      bool `json:"allowpasswordandu2flogin"`
	AllowPasswordAndWebAuthnLogin bool `json:"allowpasswordandwebauthnlogin"`
	// DEPRECATED: This member has been deprecated since Comet version 21.12.0
	U2FRegistrations        []AdminU2FRegistration      `json:"u2fregistrations,omitempty"`
	WebAuthnRegistrations   []AdminWebAuthnRegistration `json:"webauthnregistrations,omitempty"`
	TOTPKeyEncryptionFormat int                         `json:"totpkeyencryptionformat,omitempty"`
	TOTPKey                 string                      `json:"totpkey,omitempty"`
	IPWhitelist             string                      `json:"ipwhitelist,omitempty"`
}

type EmailReportGeneratedPreview struct {
	Status             int      `json:"status"`
	Message            string   `json:"message"`
	From               string   `json:"from"`
	To                 []string `json:"to"`
	EmailSubject       string   `json:"emailsubject"`
	EmailBodyHTML      string   `json:"emailbodyhtml"`
	EmailBodyPlaintext string   `json:"emailbodyplaintext"`
}

type WebAuthnCredentialEntity struct {
	Name string `json:"name"`
	Icon string `json:"icon,omitempty"`
}

type UpdateCampaignDeviceStatus struct {
	Status UpdateStatus `json:"status"`
}

type ServerConfigOptions struct {
	ExperimentalOptions      []string                                `json:"experimentaloptions,omitempty"`
	WebhookOptions           map[string]WebhookOption                `json:"webhookoptions"`
	License                  LicenseOptions                          `json:"license"`
	Branding                 BrandingOptions                         `json:"branding"`
	AdminUsers               []AllowedAdminUser                      `json:"adminusers"`
	Organizations            map[string]Organization                 `json:"organizations"`
	ExternalAdminUserSources map[string]ExternalAuthenticationSource `json:"externaladminusersources"`
	ListenAddresses          []HTTPConnectorOptions                  `json:"listenaddresses"`
	TrustXForwardedFor       bool                                    `json:"trustxforwardedfor"`
	IPRateLimit              RatelimitOptions                        `json:"ipratelimit"`
	Email                    EmailOptions                            `json:"email"`
	AuthenticationRole       AuthenticationRoleOptions               `json:"authenticationrole"`
	StorageRole              StorageRoleOptions                      `json:"storagerole"`
	SoftwareBuildRole        SoftwareBuildRoleOptions                `json:"softwarebuildrole"`
	ConstellationRole        ConstellationRoleOptions                `json:"constellationrole"`
	ConstellationRole_Legacy ConstellationRoleOptions                `json:"overseerrole,omitempty"`
	SelfBackup               SelfBackupOptions                       `json:"selfbackup"`
	SessionSettings          SessionOptions                          `json:"sessionsettings"`
}

type NewsEntry struct {
	OrganizationID string `json:"organizationid"`
	DateTime       int64  `json:"datetime"`
	TextContent    string `json:"textcontent"`
}

type ContentMeasurement struct {
	MeasureStarted   int64                         `json:"measurestarted"`
	MeasureCompleted int64                         `json:"measurecompleted"`
	Components       []ContentMeasurementComponent `json:"components"`
}

// JobEntry is a single entry within a job report.
type JobEntry struct {
	Time     int64    `json:"time"`
	Severity Severity `json:"severity"`
	Message  string   `json:"message"`
}

type MongoDBConnection struct {
	Server                  string        `json:"server"`
	Port                    int           `json:"port"`
	Username                string        `json:"username"`
	Password                string        `json:"password"`
	AuthenticationDB        string        `json:"authenticationdb"`
	MongoShellPath          string        `json:"mongoshellpath"`
	MongodumpPath           string        `json:"mongodumppath"`
	ReadPreference          string        `json:"readpreference"`
	UseReplica              bool          `json:"usereplica"`
	ReplicaName             string        `json:"replicaname"`
	ReplicaMembers          []string      `json:"replicamembers"`
	UseSSL                  bool          `json:"usessl"`
	ClientSSLPEMPath        string        `json:"clientsslpempath"`
	ServerSSLPEMPath        string        `json:"serversslpempath"`
	SSLClientKeyPassword    string        `json:"sslclientkeypassword"`
	AllowInvalidCertificate bool          `json:"allowinvalidcertificate"`
	AllowInvalidHostname    bool          `json:"allowinvalidhostname"`
	UseSSH                  bool          `json:"usessh"`
	SSHConnection           SSHConnection `json:"sshconnection,omitempty"`
}

type StorageVaultProviderPolicy struct {
	ShouldRestrictProviderList     bool     `json:"shouldrestrictproviderlist"`
	AllowedProvidersWhenRestricted []uint64 `json:"allowedproviderswhenrestricted"`
}

type AddBucketResponseMessage struct {
	Status       int    `json:"status"`
	Message      string `json:"message"`
	NewBucketID  string `json:"newbucketid"`
	NewBucketKey string `json:"newbucketkey"`
}

type BrowseHVResponse struct {
	Status          int                 `json:"status"`
	Message         string              `json:"message"`
	VirtualMachines []HyperVMachineInfo `json:"virtualmachines"`
}

type WebAuthnSignRequest struct {
	ChallengeID string                      `json:"challengeid"`
	Assertion   WebAuthnCredentialAssertion `json:"assertion"`
}

type PublicBrandingProperties struct {
	ProductName           string `json:"productname"`
	CompanyName           string `json:"companyname"`
	HelpURL               string `json:"helpurl"`
	HelpIsPopup           bool   `json:"helpispopup"`
	DefaultLoginServerURL string `json:"defaultloginserverurl"`
	TileBackgroundColor   string `json:"tilebackgroundcolor"`
	AccountRegisterURL    string `json:"accountregisterurl"`
	HideBackgroundLogo    bool   `json:"hidebackgroundlogo"`
}

type ExternalLDAPAuthenticationSourceServer struct {
	Hostname         string             `json:"hostname"`
	Port             int                `json:"port"`
	SecurityMethod   LDAPSecurityMethod `json:"securitymethod"`
	AcceptInvalidSSL bool               `json:"acceptinvalidssl"`
}

type ServerConfigOptionsSoftwareBuildRoleFragment struct {
	SoftwareBuildRole SoftwareBuildRoleOptions `json:"softwarebuildrole"`
}

type ConstellationRoleOptions struct {
	RoleEnabled      bool                  `json:"roleenabled"`
	DeleteUnusedData bool                  `json:"deleteunuseddata"`
	Servers          []RemoteServerAddress `json:"servers"`
}

type OrganizationResponse struct {
	Status       int          `json:"status"`
	Message      string       `json:"message"`
	ID           string       `json:"id"`
	Organization Organization `json:"organization"`
}

type EmailReportConfig struct {
	ReportType       EmailReportType  `json:"reporttype"`
	SummaryFrequency []ScheduleConfig `json:"summaryfrequency"`
	Filter           SearchClause     `json:"filter"`
}

type VSSComponent struct {
	Path       string `json:"path"`
	Name       string `json:"name"`
	CType      string `json:"ctype"`
	Selectable bool   `json:"selectable"`
}

type AmazonAWSVirtualStorageRoleSettings struct {
	MasterBucket string `json:"masterbucket"`
	AccessKey    string `json:"accesskey"`
	SecretKey    string `json:"secretkey"`
}

type RetentionPolicy struct {
	Mode   RetentionMode    `json:"mode"`
	Ranges []RetentionRange `json:"ranges"`
}

type UninstallConfig struct {
	UninstallFlag    bool `json:"uninstallflag"`
	RemoveConfigFile bool `json:"removeconfigfile"`
}

type LiveUserConnection struct {
	Username                string `json:"username"`
	DeviceID                string `json:"deviceid"`
	ReportedVersion         string `json:"reportedversion"`
	ReportedPlatform        string `json:"reportedplatform"`
	ReportedPlatformVersion OSInfo `json:"reportedplatformversion,omitempty"`
	DeviceTimeZone          string `json:"devicetimezone,omitempty"`
	IPAddress               string `json:"ipaddress,omitempty"`
	ConnectionTime          int64  `json:"connectiontime"`
	AllowsFilenames         bool   `json:"allowsfilenames"`
}

type GetProfileHashResponseMessage struct {
	Status      int    `json:"status"`
	Message     string `json:"message"`
	ProfileHash string `json:"profilehash"`
}

type ConstellationStatusAPIResponse struct {
	DeletionEnabled bool               `json:"deletionenabled"`
	Targets         []string           `json:"targets"`
	TargetNames     []string           `json:"targetnames,omitempty"`
	Stats           ConstellationStats `json:"stats"`
}

type WebAuthnCredentialParameter struct {
	Type      string `json:"type"`
	Algorithm int    `json:"alg"`
}

type SelfBackupOptions struct {
	Targets []SelfBackupTarget `json:"targets"`
}

type B2DestinationLocation struct {
	AccountID string `json:"accountid,omitempty"`
	Key       string `json:"key,omitempty"`
	Bucket    string `json:"bucket,omitempty"`
	Prefix    string `json:"prefix,omitempty"`
	// DEPRECATED: This member has been deprecated since Comet version 21.9.7
	MaxConnections   int  `json:"maxconnections,omitempty"`
	HideDeletedFiles bool `json:"hidedeletedfiles,omitempty"`
}

type ContentMeasurementComponent struct {
	Bytes  int64    `json:"bytes"`
	UsedBy []string `json:"usedby"`
}

type HourSchedConfig struct {
	Hour    uint64 `json:"hour"`
	Minutes uint64 `json:"minutes"`
}

type AdminWebAuthnRegistration struct {
	Description  string             `json:"description"`
	RegisterTime int64              `json:"registertime"`
	Type         WebAuthnDeviceType `json:"type"`
	IsLegacyU2F  bool               `json:"islegacyu2f,omitempty"`
	ID           []byte             `json:"id,omitempty"`
	Credential   WebAuthnCredential `json:"credential,omitempty"`
}

type UpdateCampaignStatus struct {
	Active              bool                              `json:"active"`
	UpgradeOlder        bool                              `json:"upgradeolder"`
	ReinstallCurrentVer bool                              `json:"reinstallcurrentver"`
	DowngradeNewer      bool                              `json:"downgradenewer"`
	ForceUpgradeRunning bool                              `json:"forceupgraderunning"`
	ApplyDeviceFilter   bool                              `json:"applydevicefilter"`
	DeviceFilter        SearchClause                      `json:"devicefilter"`
	StartTime           int64                             `json:"starttime"`
	TargetVersion       string                            `json:"targetversion"`
	Devices             []UpdateCampaignStatusDeviceEntry `json:"devices"`
}

type UserOnServer struct {
	ServerID int    `json:"serverid"`
	Username string `json:"username"`
}

type ReplicaServer struct {
	Type          RemoteServerType                         `json:"type"`
	Description   string                                   `json:"description"`
	RemoteAddress string                                   `json:"remoteaddress,omitempty"`
	Username      string                                   `json:"username,omitempty"`
	Password      string                                   `json:"password,omitempty"`
	LDAP          ExternalLDAPAuthenticationSourceSettings `json:"ldap,omitempty"`
	B2            B2VirtualStorageRoleSettings             `json:"b2,omitempty"`
	Wasabi        WasabiVirtualStorageRoleSettings         `json:"wasabi,omitempty"`
	Custom        CustomRemoteBucketSettings               `json:"custom,omitempty"`
	S3            S3GenericVirtualStorageRole              `json:"s3,omitempty"`
	// Amazon AWS - Virtual Storage Role
	AWS                     AmazonAWSVirtualStorageRoleSettings `json:"aws,omitempty"`
	ReplicaDeletionStrategy ReplicaDeletionStrategy             `json:"replicadeletionstrategy,omitempty"`
}

type DispatcherAdminSourcesResponse struct {
	Status        int               `json:"status"`
	Message       string            `json:"message"`
	ImportSources map[string]string `json:"importsources"`
}

type BrowseVSSResponse struct {
	Status     int                      `json:"status"`
	Message    string                   `json:"message"`
	VSSWriters map[string]VSSWriterInfo `json:"vsswriters"`
}

type InstallCreds struct {
	Username  string `json:"username"`
	Password  string `json:"password"`
	Server    string `json:"server"`
	AutoLogin bool   `json:"autologin"`
}

type WebhookOption struct {
	URL                   string                `json:"url"`
	WhiteListedEventTypes []StreamableEventType `json:"whitelistedeventtypes"`
	CustomHeaders         map[string]string     `json:"customheaders"`
}

type StorageRoleOptions struct {
	RoleEnabled         bool                    `json:"roleenabled"`
	Storage             DestinationLocation     `json:"storage"`
	LocalStorage_Legacy []LocalStorageDirectory `json:"localstorage,omitempty"`
	ReplicateTo         []ReplicaServer         `json:"replicateto"`
}

type Office365CustomSetting struct {
	MailboxStrategy string   `json:"mailboxstrategy"`
	SiteStrategy    string   `json:"sitestrategy"`
	MailboxUserIDs  []string `json:"mailboxuserids"`
	MailboxGroupIDs []string `json:"mailboxgroupids"`
	SiteIDs         []string `json:"siteids"`
}

type UserPolicy struct {
	PreventRequestStorageVault       bool                                      `json:"preventrequeststoragevault"`
	PreventAddCustomStorageVault     bool                                      `json:"preventaddcustomstoragevault"`
	PreventEditStorageVault          bool                                      `json:"preventeditstoragevault"`
	HideCloudStorageBranding         bool                                      `json:"hidecloudstoragebranding"`
	PreventDeleteStorageVault        bool                                      `json:"preventdeletestoragevault"`
	StorageVaultProviders            StorageVaultProviderPolicy                `json:"storagevaultproviders"`
	PreventNewProtectedItem          bool                                      `json:"preventnewprotecteditem"`
	PreventEditProtectedItem         bool                                      `json:"preventeditprotecteditem"`
	PreventDeleteProtectedItem       bool                                      `json:"preventdeleteprotecteditem"`
	ProtectedItemEngineTypes         ProtectedItemEngineTypePolicy             `json:"protecteditemenginetypes"`
	FileAndFolderMandatoryExclusions []ExtraFileExclusion                      `json:"fileandfoldermandatoryexclusions,omitempty"`
	ModeScheduleSkipAlreadyRunning   DefaultSettingMode                        `json:"modescheduleskipalreadyrunning,omitempty"`
	ModeAdminResetPassword           DefaultSettingMode                        `json:"modeadminresetpassword,omitempty"`
	ModeAdminViewFilenames           DefaultSettingMode                        `json:"modeadminviewfilenames,omitempty"`
	ModeRequireUserResetPassword     DefaultSettingMode                        `json:"moderequireuserresetpassword,omitempty"`
	PreventDeleteSingleSnapshots     bool                                      `json:"preventdeletesinglesnapshots"`
	PreventChangeAccountPassword     bool                                      `json:"preventchangeaccountpassword"`
	PreventChangeEmailSettings       bool                                      `json:"preventchangeemailsettings"`
	PreventChangeAccountName         bool                                      `json:"preventchangeaccountname"`
	PreventOpenAppUI                 bool                                      `json:"preventopenappui"`
	RequirePasswordOpenAppUI         bool                                      `json:"requirepasswordopenappui"`
	HideAppImport                    bool                                      `json:"hideappimport"`
	HideAppVersion                   bool                                      `json:"hideappversion"`
	PreventOpenWebUI                 bool                                      `json:"preventopenwebui"`
	PreventViewDeviceNames           bool                                      `json:"preventviewdevicenames"`
	DefaultEmailReports              DefaultEmailReportPolicy                  `json:"defaultemailreports"`
	DefaultStorageVaultRetention     RetentionPolicy                           `json:"defaultstoragevaultretention"`
	EnforceStorageVaultRetention     bool                                      `json:"enforcestoragevaultretention"`
	PreventProtectedItemRetention    bool                                      `json:"preventprotecteditemretention"`
	DefaultSources                   map[string]SourceConfig                   `json:"defaultsources"`
	DefaultSourcesBackupRules        map[string]BackupRuleConfig               `json:"defaultsourcesbackuprules"`
	DefaultSourcesWithOSRestriction  map[string]DefaultSourceWithOSRestriction `json:"defaultsourceswithosrestriction"`
	DefaultBackupRules               map[string]BackupRuleConfig               `json:"defaultbackuprules"`
	RandomDelaySecs                  uint64                                    `json:"randomdelaysecs,omitempty"`
}

type U2FSignResponse struct {
	ChallengeID string `json:"challengeid"`
	KeyHandle   string `json:"keyhandle"`
	Signature   string `json:"signature"`
	ClientData  string `json:"clientdata"`
}

type DiskDrive struct {
	ID           string      `json:"id"`
	DeviceName   string      `json:"devicename"`
	Caption      string      `json:"caption"`
	Model        string      `json:"model"`
	SerialNumber string      `json:"serialnumber"`
	Size         int64       `json:"size"`
	Partitions   []Partition `json:"partitions"`
	Flags        int64       `json:"flags"`
	Cylinders    int64       `json:"cylinders"`
	Heads        int64       `json:"heads"`
	Sectors      int64       `json:"sectors"`
	SectorSize   int64       `json:"sectorsize"`
}

type WindowsCodeSignProperties struct {
	WindowsCodeSignPKCS12FilePath       string `json:"windowscodesignpkcs12filepath"`
	WindowsCodeSignPKCS12PasswordFormat uint64 `json:"windowscodesignpkcs12passwordformat"`
	WindowsCodeSignPKCS12Password       string `json:"windowscodesignpkcs12password"`
	WindowsCodeSignPKCS11Engine         string `json:"windowscodesignpkcs11engine"`
	WindowsCodeSignPKCS11Module         string `json:"windowscodesignpkcs11module"`
	WindowsCodeSignPKCS11Certfile       string `json:"windowscodesignpkcs11certfile"`
	WindowsCodeSignPKCS11KeyID          string `json:"windowscodesignpkcs11keyid"`
	WindowsCodeSignPKCS11PasswordFormat uint64 `json:"windowscodesignpkcs11passwordformat"`
	WindowsCodeSignPKCS11Password       string `json:"windowscodesignpkcs11password"`
}

type BackupJobDetail struct {
	GUID                      string            `json:"guid"`
	Username                  string            `json:"username"`
	Classification            JobClassification `json:"classification"`
	Status                    JobStatus         `json:"status"`
	StartTime                 int64             `json:"starttime"`
	EndTime                   int64             `json:"endtime"`
	SourceGUID                string            `json:"sourceguid"`
	DestinationGUID           string            `json:"destinationguid"`
	DeviceID                  string            `json:"deviceid"`
	SnapshotID                string            `json:"snapshotid,omitempty"`
	ClientVersion             string            `json:"clientversion"`
	TotalDirectories          int64             `json:"totaldirectories"`
	TotalFiles                int64             `json:"totalfiles"`
	TotalSize                 int64             `json:"totalsize"`
	TotalChunks               int64             `json:"totalchunks"`
	UploadSize                int64             `json:"uploadsize"`
	DownloadSize              int64             `json:"downloadsize"`
	TotalVmCount              int64             `json:"totalvmcount,omitempty"`
	TotalMailsCount           int64             `json:"totalmailscount,omitempty"`
	TotalSitesCount           int64             `json:"totalsitescount,omitempty"`
	TotalAccountsCount        int64             `json:"totalaccountscount,omitempty"`
	TotalLicensedMailsCount   int64             `json:"totallicensedmailscount,omitempty"`
	TotalUnlicensedMailsCount int64             `json:"totalunlicensedmailscount,omitempty"`
	CancellationID            string            `json:"cancellationid,omitempty"`
	Progress                  BackupJobProgress `json:"progress,omitempty"`
	DestinationSizeStart      SizeMeasurement   `json:"destinationsizestart,omitempty"`
	DestinationSizeEnd        SizeMeasurement   `json:"destinationsizeend,omitempty"`
}

type DispatcherVaultSnapshotsResponse struct {
	Status    int             `json:"status"`
	Message   string          `json:"message"`
	Snapshots []VaultSnapshot `json:"snapshots"`
}

type UpdateCampaignStatusDeviceEntry struct {
	Username string       `json:"username"`
	DeviceID string       `json:"deviceid"`
	Status   UpdateStatus `json:"status"`
}

type RatelimitRule struct {
	MatchRegex     string `json:"matchregex"`
	BytesPerSecond uint64 `json:"bytespersecond"`
}

type ScheduleConfig struct {
	FrequencyType   uint64           `json:"frequencytype"`
	SecondsPast     uint64           `json:"secondspast"`
	Offset          int64            `json:"offset,omitempty"`
	RestrictRuntime bool             `json:"restrictruntime"`
	FromTime        HourSchedConfig  `json:"fromtime"`
	ToTime          HourSchedConfig  `json:"totime"`
	RestrictDays    bool             `json:"restrictdays"`
	DaysSelect      DaysOfWeekConfig `json:"daysselect"`
	RandomDelaySecs uint64           `json:"randomdelaysecs,omitempty"`
}

// This is the main data structure for a user's profile.
type UserProfileConfig struct {
	Username      string `json:"username"`
	AccountName   string `json:"accountname"`
	LocalTimezone string `json:"localtimezone"`
	LanguageCode  string `json:"languagecode"`
	// Tenant
	OrganizationID        string                             `json:"organizationid,omitempty"`
	Emails                []string                           `json:"emails"`
	OverrideEmailSettings map[string]UserCustomEmailSettings `json:"overrideemailsettings"`
	SendEmailReports      bool                               `json:"sendemailreports"`
	// Storage Vaults
	Destinations map[string]DestinationConfig `json:"destinations"`
	// Protected Items
	Sources                       map[string]SourceConfig     `json:"sources"`
	BackupRules                   map[string]BackupRuleConfig `json:"backuprules"`
	Devices                       map[string]DeviceConfig     `json:"devices"`
	IsSuspended                   bool                        `json:"issuspended"`
	AllProtectedItemsQuotaEnabled bool                        `json:"allprotecteditemsquotaenabled"`
	AllProtectedItemsQuotaBytes   int64                       `json:"allprotecteditemsquotabytes"`
	MaximumDevices                int64                       `json:"maximumdevices"`
	// If the PolicyID field is set to a non-empty string, the Comet Server will enforce the contents of the Policy field based on the matching server's policy. Otherwise if the PolicyID field is set to an empty string, the administrator may configure any custom values in the Policy field.
	PolicyID string     `json:"policyid"`
	Policy   UserPolicy `json:"policy"`
	// To change the user's password, use the AdminResetUserPassword API instead of accessing these fields directly. Otherwise, other encrypted fields in the user profile may become corrupted.
	PasswordFormat            int              `json:"passwordformat"`
	PasswordHash              string           `json:"passwordhash"`
	PasswordRecovery          string           `json:"passwordrecovery,omitempty"`
	AllowPasswordLogin        bool             `json:"allowpasswordlogin"`
	AllowPasswordAndTOTPLogin bool             `json:"allowpasswordandtotplogin"`
	TOTPKeyEncryptionFormat   int              `json:"totpkeyencryptionformat"`
	TOTPKey                   string           `json:"totpkey"`
	RequirePasswordChange     bool             `json:"requirepasswordchange"`
	CreateTime                int64            `json:"createtime"`
	CreationGUID              string           `json:"creationguid"`
	ServerConfig              UserServerConfig `json:"serverconfig,omitempty"`
}

type SelfBackupStatistics struct {
	CurrentRunStart int64 `json:"currentrunstart"`
	LastRunStart    int64 `json:"lastrunstart"`
	LastRunEnd      int64 `json:"lastrunend"`
	LastRunSuccess  bool  `json:"lastrunsuccess"`
	LastRunSize     int64 `json:"lastrunsize"`
}

type DestinationConfig struct {
	Description                      string                   `json:"description"`
	CreateTime                       int64                    `json:"createtime"`
	ModifyTime                       int64                    `json:"modifytime"`
	PreExec                          []string                 `json:"preexec"`
	ThawExec                         []string                 `json:"thawexec"`
	PostExec                         []string                 `json:"postexec"`
	DestinationType                  uint64                   `json:"destinationtype"`
	CometServer                      string                   `json:"cometserver"`
	CometBucket                      string                   `json:"cometbucket"`
	CometBucketKey                   string                   `json:"cometbucketkey"`
	S3Server                         string                   `json:"s3server"`
	S3UsesTLS                        bool                     `json:"s3usestls"`
	S3AccessKey                      string                   `json:"s3accesskey"`
	S3SecretKey                      string                   `json:"s3secretkey"`
	S3BucketName                     string                   `json:"s3bucketname"`
	S3Subdir                         string                   `json:"s3subdir"`
	S3UsesV2Signing                  bool                     `json:"s3usesv2signing"`
	SFTPServer                       string                   `json:"sftpserver"`
	SFTPUsername                     string                   `json:"sftpusername"`
	SFTPRemotePath                   string                   `json:"sftpremotepath"`
	SFTPAuthMode                     SftpAuthMode             `json:"sftpauthmode"`
	SFTPPassword                     string                   `json:"sftppassword"`
	SFTPPrivateKey                   string                   `json:"sftpprivatekey"`
	SFTPCustomAuth_UseKnownHostsFile bool                     `json:"sftpcustomauth_useknownhostsfile"`
	SFTPCustomAuth_KnownHostsFile    string                   `json:"sftpcustomauth_knownhostsfile"`
	FTPServer                        string                   `json:"ftpserver"`
	FTPUsername                      string                   `json:"ftpusername"`
	FTPPassword                      string                   `json:"ftppassword"`
	FTPBaseUseHomeDirectory          bool                     `json:"ftpbaseusehomedirectory"`
	FTPCustomBaseDirectory           string                   `json:"ftpcustombasedirectory"`
	FTPSMode                         FtpsModeType             `json:"ftpsmode"`
	FTPPort                          int                      `json:"ftpport"`
	FTPMaxConnections                int                      `json:"ftpmaxconnections"`
	FTPAcceptInvalidSSL              bool                     `json:"ftpacceptinvalidssl"`
	AZBAccountName                   string                   `json:"azbaccountname"`
	AZBAccountKey                    string                   `json:"azbaccountkey"`
	AZBContainer                     string                   `json:"azbcontainer"`
	AZBRealm                         string                   `json:"azbrealm"`
	AZBPrefix                        string                   `json:"azbprefix"`
	LocalcopyPath                    string                   `json:"localcopypath"`
	LocalcopyWinSMBUsername          string                   `json:"localcopywinsmbusername"`
	LocalcopyWinSMBPassword          string                   `json:"localcopywinsmbpassword"`
	LocalcopyWinSMBPasswordFormat    uint64                   `json:"localcopywinsmbpasswordformat"`
	Swift                            SwiftDestinationLocation `json:"swift"`
	B2                               B2DestinationLocation    `json:"b2"`
	SpanTargets                      []DestinationLocation    `json:"spantargets"`
	SpanUseStaticSlots               bool                     `json:"spanusestaticslots"`
	EncryptionKeyEncryptionMethod    uint64                   `json:"encryptionkeyencryptionmethod"`
	EncryptedEncryptionKey           string                   `json:"encryptedencryptionkey"`
	RepoInitTimestamp                int64                    `json:"repoinittimestamp"`
	StorageLimitEnabled              bool                     `json:"storagelimitenabled"`
	StorageLimitBytes                int64                    `json:"storagelimitbytes"`
	Statistics                       DestinationStatistics    `json:"statistics,omitempty"`
	DefaultRetention                 RetentionPolicy          `json:"defaultretention"`
	RebrandStorage                   bool                     `json:"rebrandstorage"`
}

type BackupJobAdvancedOptions struct {
	SkipAlreadyRunning    bool               `json:"skipalreadyrunning"`
	StopAfter             int64              `json:"stopafter"`
	LimitVaultSpeedBps    int64              `json:"limitvaultspeedbps"`
	ReduceDiskConcurrency bool               `json:"reducediskconcurrency"`
	UseOnDiskIndexes      bool               `json:"useondiskindexes"`
	AllowZeroFilesSuccess bool               `json:"allowzerofilessuccess"`
	AutoRetentionLevel    AutoRetentionLevel `json:"autoretentionlevel"`
}

type MySQLConnection struct {
	Host                   string `json:"host"`
	Port                   string `json:"port"`
	Username               string `json:"username"`
	Password               string `json:"password"`
	UseTLS                 bool   `json:"usetls"`
	TLSSkipVerify          bool   `json:"tlsskipverify"`
	TLSCustomServerCAPath  string `json:"tlscustomservercapath"`
	TLSCustomClientCrtPath string `json:"tlscustomclientcrtpath"`
	TLSCustomClientKeyPath string `json:"tlscustomclientkeypath"`
}

type StoredObject struct {
	Name       string `json:"name"`
	ModifyTime int64  `json:"mtime"`
	// One of the STOREDOBJECTTYPE_... constant values
	Type                string `json:"type"`
	Subtree             string `json:"subtree"`
	Size                uint64 `json:"size"`
	DisplayName         string `json:"dname,omitempty"`
	ItemClass           string `json:"itemclass,omitempty"`
	From                string `json:"from,omitempty"`
	To                  string `json:"to,omitempty"`
	ReceivedDateTime    int64  `json:"rtime,omitempty"`
	HasAttachments      bool   `json:"has_attachments,omitempty"`
	StartTime           int64  `json:"stime,omitempty"`
	EndTime             int64  `json:"etime,omitempty"`
	RecursiveCountKnown bool   `json:"r,omitempty"`
	RecursiveFiles      uint64 `json:"f,omitempty"`
	RecursiveBytes      uint64 `json:"b,omitempty"`
	RecursiveFolders    uint64 `json:"d,omitempty"`
}

type AdminAccountPropertiesResponse struct {
	OrganizationID string               `json:"organizationid"`
	Permissions    AdminUserPermissions `json:"permissions"`
	Security       AdminSecurityOptions `json:"security"`
}

type ConstellationStats struct {
	LastCheckStart        int64 `json:"lastcheckstart"`
	TotalChecksStarted    int64 `json:"totalchecksstarted"`
	TotalBucketsDeleted   int64 `json:"totalbucketsdeleted"`
	ChecksCurrentlyActive int64 `json:"checkscurrentlyactive"`
}

type PrivateBrandingProperties struct {
	BuildMode                           ClientBrandingBuildMode `json:"buildmode"`
	PathIcoFile                         string                  `json:"pathicofile"`
	PathIcnsFile                        string                  `json:"pathicnsfile"`
	PathMenuBarIcnsFile                 string                  `json:"pathmenubaricnsfile"`
	PathEulaRtf                         string                  `json:"patheulartf"`
	PathTilePng                         string                  `json:"pathtilepng"`
	PathHeaderImage                     string                  `json:"pathheaderimage"`
	PathAppIconImage                    string                  `json:"pathappiconimage"`
	PackageIdentifier                   string                  `json:"packageidentifier"`
	WindowsCodeSignPKCS12FilePath       string                  `json:"windowscodesignpkcs12filepath"`
	WindowsCodeSignPKCS12PasswordFormat uint64                  `json:"windowscodesignpkcs12passwordformat"`
	WindowsCodeSignPKCS12Password       string                  `json:"windowscodesignpkcs12password"`
	WindowsCodeSignPKCS11Engine         string                  `json:"windowscodesignpkcs11engine"`
	WindowsCodeSignPKCS11Module         string                  `json:"windowscodesignpkcs11module"`
	WindowsCodeSignPKCS11Certfile       string                  `json:"windowscodesignpkcs11certfile"`
	WindowsCodeSignPKCS11KeyID          string                  `json:"windowscodesignpkcs11keyid"`
	WindowsCodeSignPKCS11PasswordFormat uint64                  `json:"windowscodesignpkcs11passwordformat"`
	WindowsCodeSignPKCS11Password       string                  `json:"windowscodesignpkcs11password"`
	MacOSCodeSign                       MacOSCodeSignProperties `json:"macoscodesign"`
}

type Office365Credential struct {
	AppID    string `json:"appid"`
	TenantID string `json:"tenantid"`
	Secret   string `json:"secret"`
	AppCert  string `json:"appcert"`
	Region   string `json:"region"`
}

type ReplicatorStateAPIResponse struct {
	Description          string                 `json:"description"`
	RemoteServerID       string                 `json:"remoteserverid"`
	DisplayClass         ReplicatorDisplayClass `json:"displayclass"`
	ActiveWorkers        int32                  `json:"activeworkers"`
	TotalWorkers         int                    `json:"totalworkers"`
	State                ReplicatorState        `json:"state"`
	ItemsQueued          int                    `json:"itemsqueued"`
	BytesQueued          int64                  `json:"bytesqueued"`
	LastWorkerSubmitTime int64                  `json:"lastworkersubmittime"`
	CurrentTime          int64                  `json:"currenttime"`
	ItemsReplicated      int64                  `json:"itemsreplicated"`
	BytesReplicated      int64                  `json:"bytesreplicated"`
}

type SoftwareBuildRoleOptions struct {
	RoleEnabled                   bool `json:"roleenabled"`
	AllowUnauthenticatedDownloads bool `json:"allowunauthenticateddownloads"`
}

type SourceStatistics struct {
	LastBackupJob           BackupJobDetail `json:"lastbackupjob"`
	LastSuccessfulBackupJob BackupJobDetail `json:"lastsuccessfulbackupjob"`
}

type GetGroupPolicyResponse struct {
	Status     int         `json:"status"`
	Message    string      `json:"message"`
	Policy     GroupPolicy `json:"policy"`
	PolicyHash string      `json:"policyhash"`
}

type B2TransactionTotals struct {
	ClassA int64 `json:"classa"`
	ClassB int64 `json:"classb"`
	ClassC int64 `json:"classc"`
}

type DispatcherStoredObjectsResponse struct {
	Status        int            `json:"status"`
	Message       string         `json:"message"`
	StoredObjects []StoredObject `json:"storedobjects"`
}

type BrowseOffice365ObjectsResponse struct {
	Status  int                   `json:"status"`
	Message string                `json:"message"`
	Objects []Office365ObjectInfo `json:"objects"`
}

type BrowseOffice365ListVirtualAccountsResponse struct {
	Status  int                            `json:"status"`
	Message string                         `json:"message"`
	Objects []Office365MixedVirtualAccount `json:"objects"`
}

// This data structure describes which devices should receive a remote software upgrade. Both the target version criteria (UpgradeOlder/ReinstallCurrentVer/DowngradeNewer) and the target device criteria (ApplyDeviceFilter/DeviceFilter) must be met in order for the remote upgrade to be applied.
type UpdateCampaignOptions struct {
	Active              bool         `json:"active"`
	UpgradeOlder        bool         `json:"upgradeolder"`
	ReinstallCurrentVer bool         `json:"reinstallcurrentver"`
	DowngradeNewer      bool         `json:"downgradenewer"`
	ForceUpgradeRunning bool         `json:"forceupgraderunning"`
	ApplyDeviceFilter   bool         `json:"applydevicefilter"`
	DeviceFilter        SearchClause `json:"devicefilter"`
}

type BrandingProperties struct {
	ProductName                         string                  `json:"productname"`
	CompanyName                         string                  `json:"companyname"`
	HelpURL                             string                  `json:"helpurl"`
	HelpIsPopup                         bool                    `json:"helpispopup"`
	DefaultLoginServerURL               string                  `json:"defaultloginserverurl"`
	TileBackgroundColor                 string                  `json:"tilebackgroundcolor"`
	AccountRegisterURL                  string                  `json:"accountregisterurl"`
	HideBackgroundLogo                  bool                    `json:"hidebackgroundlogo"`
	BuildMode                           ClientBrandingBuildMode `json:"buildmode"`
	PathIcoFile                         string                  `json:"pathicofile"`
	PathIcnsFile                        string                  `json:"pathicnsfile"`
	PathMenuBarIcnsFile                 string                  `json:"pathmenubaricnsfile"`
	PathEulaRtf                         string                  `json:"patheulartf"`
	PathTilePng                         string                  `json:"pathtilepng"`
	PathHeaderImage                     string                  `json:"pathheaderimage"`
	PathAppIconImage                    string                  `json:"pathappiconimage"`
	PackageIdentifier                   string                  `json:"packageidentifier"`
	WindowsCodeSignPKCS12FilePath       string                  `json:"windowscodesignpkcs12filepath"`
	WindowsCodeSignPKCS12PasswordFormat uint64                  `json:"windowscodesignpkcs12passwordformat"`
	WindowsCodeSignPKCS12Password       string                  `json:"windowscodesignpkcs12password"`
	WindowsCodeSignPKCS11Engine         string                  `json:"windowscodesignpkcs11engine"`
	WindowsCodeSignPKCS11Module         string                  `json:"windowscodesignpkcs11module"`
	WindowsCodeSignPKCS11Certfile       string                  `json:"windowscodesignpkcs11certfile"`
	WindowsCodeSignPKCS11KeyID          string                  `json:"windowscodesignpkcs11keyid"`
	WindowsCodeSignPKCS11PasswordFormat uint64                  `json:"windowscodesignpkcs11passwordformat"`
	WindowsCodeSignPKCS11Password       string                  `json:"windowscodesignpkcs11password"`
	MacOSCodeSign                       MacOSCodeSignProperties `json:"macoscodesign"`
}

type RegisterOfficeApplicationBeginResponse struct {
	Continuation    string `json:"continuation"`
	VerificationURL string `json:"verificationurl"`
	UserCode        string `json:"usercode"`
}

type MSSQLConnection struct {
	Type         string `json:"type"`
	Username     string `json:"username"`
	Password     string `json:"password"`
	Hostname     string `json:"hostname"`
	InstanceName string `json:"instancename"`
	Method       string `json:"method"`
}

type WinSMBAuth struct {
	SharePath      string `json:"sharepath"`
	Username       string `json:"username"`
	Password       string `json:"password"`
	PasswordFormat uint64 `json:"passwordformat"`
}

type B2StorageExtraInfo struct {
	TotalTransactionsInTimeInterval map[int64]B2TransactionTotals `json:"totaltransactionsintimeinterval"`
}

type Partition struct {
	DeviceName                string   `json:"devicename"`
	Filesystem                string   `json:"filesystem"`
	VolumeName                string   `json:"volumename"`
	VolumeGuid                string   `json:"volumeguid"`
	VolumeSerial              string   `json:"volumeserial"`
	MountPoints               []string `json:"mountpoints"`
	ReadOffset                int64    `json:"readoffset"`
	Size                      int64    `json:"size"`
	UsedSize                  int64    `json:"usedsize"`
	Flags                     int64    `json:"flags"`
	BytesPerFilesystemCluster int64    `json:"bytesperfilesystemcluster"`
}

type WebAuthnSignResponse struct {
	ChallengeID    string `json:"challengeid"`
	CredentialJSON string `json:"credentialjson"`
}

type ExternalLDAPAuthenticationSourceSettings struct {
	Hostname         string                                   `json:"hostname"`
	Port             int                                      `json:"port"`
	SecurityMethod   LDAPSecurityMethod                       `json:"securitymethod"`
	AcceptInvalidSSL bool                                     `json:"acceptinvalidssl"`
	FallbackServers  []ExternalLDAPAuthenticationSourceServer `json:"fallbackservers"`
	BindUser         string                                   `json:"binduser"`
	BindPassword     string                                   `json:"bindpassword"`
	SearchDN         string                                   `json:"searchdn"`
	SearchFilter     string                                   `json:"searchfilter"`
}

type WebInterfaceBrandingProperties struct {
	BrandName    string `json:"brandname"`
	LogoImage    string `json:"logoimage"`
	TopColor     string `json:"topcolor"`
	Favicon      string `json:"favicon"`
	HideNewsArea bool   `json:"hidenewsarea"`
}

type DestinationLocation struct {
	DestinationType                  uint64                   `json:"destinationtype"`
	CometServer                      string                   `json:"cometserver"`
	CometBucket                      string                   `json:"cometbucket"`
	CometBucketKey                   string                   `json:"cometbucketkey"`
	S3Server                         string                   `json:"s3server"`
	S3UsesTLS                        bool                     `json:"s3usestls"`
	S3AccessKey                      string                   `json:"s3accesskey"`
	S3SecretKey                      string                   `json:"s3secretkey"`
	S3BucketName                     string                   `json:"s3bucketname"`
	S3Subdir                         string                   `json:"s3subdir"`
	S3UsesV2Signing                  bool                     `json:"s3usesv2signing"`
	SFTPServer                       string                   `json:"sftpserver"`
	SFTPUsername                     string                   `json:"sftpusername"`
	SFTPRemotePath                   string                   `json:"sftpremotepath"`
	SFTPAuthMode                     SftpAuthMode             `json:"sftpauthmode"`
	SFTPPassword                     string                   `json:"sftppassword"`
	SFTPPrivateKey                   string                   `json:"sftpprivatekey"`
	SFTPCustomAuth_UseKnownHostsFile bool                     `json:"sftpcustomauth_useknownhostsfile"`
	SFTPCustomAuth_KnownHostsFile    string                   `json:"sftpcustomauth_knownhostsfile"`
	FTPServer                        string                   `json:"ftpserver"`
	FTPUsername                      string                   `json:"ftpusername"`
	FTPPassword                      string                   `json:"ftppassword"`
	FTPBaseUseHomeDirectory          bool                     `json:"ftpbaseusehomedirectory"`
	FTPCustomBaseDirectory           string                   `json:"ftpcustombasedirectory"`
	FTPSMode                         FtpsModeType             `json:"ftpsmode"`
	FTPPort                          int                      `json:"ftpport"`
	FTPMaxConnections                int                      `json:"ftpmaxconnections"`
	FTPAcceptInvalidSSL              bool                     `json:"ftpacceptinvalidssl"`
	AZBAccountName                   string                   `json:"azbaccountname"`
	AZBAccountKey                    string                   `json:"azbaccountkey"`
	AZBContainer                     string                   `json:"azbcontainer"`
	AZBRealm                         string                   `json:"azbrealm"`
	AZBPrefix                        string                   `json:"azbprefix"`
	LocalcopyPath                    string                   `json:"localcopypath"`
	LocalcopyWinSMBUsername          string                   `json:"localcopywinsmbusername"`
	LocalcopyWinSMBPassword          string                   `json:"localcopywinsmbpassword"`
	LocalcopyWinSMBPasswordFormat    uint64                   `json:"localcopywinsmbpasswordformat"`
	Swift                            SwiftDestinationLocation `json:"swift"`
	B2                               B2DestinationLocation    `json:"b2"`
	SpanTargets                      []DestinationLocation    `json:"spantargets"`
	SpanUseStaticSlots               bool                     `json:"spanusestaticslots"`
}

type NewBucketDetail struct {
	NewBucketID  string `json:"newbucketid"`
	NewBucketKey string `json:"newbucketkey"`
}

type AdminResourceResponse struct {
	Status       int    `json:"status"`
	Message      string `json:"message"`
	ResourceHash string `json:"resourcehash"`
}

type SoftwareUpdateNewsResponse struct {
	LatestStable     string   `json:"latest_stable"`
	LatestPrerelease string   `json:"latest_prerelease"`
	DownloadsURL     string   `json:"downloads_url"`
	WhatsNew         []string `json:"updates_info"`
}

type UpdateCampaignProperties struct {
	Active              bool         `json:"active"`
	UpgradeOlder        bool         `json:"upgradeolder"`
	ReinstallCurrentVer bool         `json:"reinstallcurrentver"`
	DowngradeNewer      bool         `json:"downgradenewer"`
	ForceUpgradeRunning bool         `json:"forceupgraderunning"`
	ApplyDeviceFilter   bool         `json:"applydevicefilter"`
	DeviceFilter        SearchClause `json:"devicefilter"`
	StartTime           int64        `json:"starttime"`
	TargetVersion       string       `json:"targetversion"`
}

type RemoteServerAddress struct {
	Type          RemoteServerType                         `json:"type"`
	Description   string                                   `json:"description"`
	RemoteAddress string                                   `json:"remoteaddress,omitempty"`
	Username      string                                   `json:"username,omitempty"`
	Password      string                                   `json:"password,omitempty"`
	LDAP          ExternalLDAPAuthenticationSourceSettings `json:"ldap,omitempty"`
	B2            B2VirtualStorageRoleSettings             `json:"b2,omitempty"`
	Wasabi        WasabiVirtualStorageRoleSettings         `json:"wasabi,omitempty"`
	Custom        CustomRemoteBucketSettings               `json:"custom,omitempty"`
	S3            S3GenericVirtualStorageRole              `json:"s3,omitempty"`
	// Amazon AWS - Virtual Storage Role
	AWS AmazonAWSVirtualStorageRoleSettings `json:"aws,omitempty"`
}

type SFTPDestinationLocation struct {
	SFTPServer                       string       `json:"sftpserver"`
	SFTPUsername                     string       `json:"sftpusername"`
	SFTPRemotePath                   string       `json:"sftpremotepath"`
	SFTPAuthMode                     SftpAuthMode `json:"sftpauthmode"`
	SFTPPassword                     string       `json:"sftppassword"`
	SFTPPrivateKey                   string       `json:"sftpprivatekey"`
	SFTPCustomAuth_UseKnownHostsFile bool         `json:"sftpcustomauth_useknownhostsfile"`
	SFTPCustomAuth_KnownHostsFile    string       `json:"sftpcustomauth_knownhostsfile"`
}

type SwiftDestinationLocation struct {
	Username               string `json:"username,omitempty"`
	APIKey                 string `json:"apikey,omitempty"`
	Region                 string `json:"region,omitempty"`
	AuthURL                string `json:"authurl,omitempty"`
	Domain                 string `json:"domain,omitempty"`
	Tenant                 string `json:"tenant,omitempty"`
	TenantDomain           string `json:"tenantdomain,omitempty"`
	TenantID               string `json:"tenantid,omitempty"`
	TrustID                string `json:"trustid,omitempty"`
	AuthToken              string `json:"authtoken,omitempty"`
	Prefix                 string `json:"prefix,omitempty"`
	Container              string `json:"container,omitempty"`
	DefaultContainerPolicy string `json:"defaultcontainerpolicy,omitempty"`
}

type UserServerConfig struct {
	RandomDelaySecs uint64 `json:"randomdelaysecs,omitempty"`
}

type BrowseDiskDrivesResponse struct {
	Status  int         `json:"status"`
	Message string      `json:"message"`
	Disks   []DiskDrive `json:"disks"`
}

type BucketUsageInfo struct {
	ExistsOnServers []int          `json:"existsonservers"`
	InUseBy         []UserOnServer `json:"inuseby"`
}

type LocalStorageDirectory struct {
	Path string `json:"path"`
}

type SelfBackupTarget struct {
	Location            DestinationLocation `json:"location"`
	Schedule            []ScheduleConfig    `json:"schedule"`
	ScheduleTimezone    string              `json:"scheduletimezone"`
	RetentionPolicy     RetentionPolicy     `json:"retentionpolicy"`
	EncryptionKey       string              `json:"encryptionkey"`
	EncryptionKeyFormat uint64              `json:"encryptionkeyformat"`
	Compression         CompressMode        `json:"compression"`
	ExcludeJobsDB       bool                `json:"excludejobsdb"`
}

type SpannedDestinationLocation struct {
	SpanTargets        []DestinationLocation `json:"spantargets"`
	SpanUseStaticSlots bool                  `json:"spanusestaticslots"`
}

type DefaultSourceWithOSRestriction struct {
	SourceConfig SourceConfig               `json:"sourceconfig"`
	RestrictOS   DefaultSourceOSRestriction `json:"restrictos"`
}

type SessionOptions struct {
	ExpiredInSeconds uint64 `json:"expiredinseconds"`
}

type SourceBasicInfo struct {
	Description                  string                     `json:"description"`
	Size                         int64                      `json:"size"`
	OverrideDestinationRetention map[string]RetentionPolicy `json:"overridedestinationretention,omitempty"`
}

type ExtraFileExclusion struct {
	Exclude    string                          `json:"exclude"`
	Regex      bool                            `json:"regex"`
	RestrictOS ExtraFileExclusionOSRestriction `json:"restrictos"`
}

type AdminU2FRegistration struct {
	Description  string `json:"description"`
	RegisterTime int64  `json:"registertime"`
	Registration []byte `json:"registration"`
}

type ServerMetaVersionInfo struct {
	Version                                        string                 `json:"version"`
	VersionCodename                                string                 `json:"versioncodename"`
	StorageRole                                    bool                   `json:"storagerole"`
	AuthenticationRole                             bool                   `json:"authenticationrole"`
	SoftwareBuildRole                              bool                   `json:"softwarebuildrole"`
	ConstellationRole_Legacy                       bool                   `json:"overseerrole"`
	ConstellationRole                              bool                   `json:"constellationrole"`
	ExperimentalOptions                            []string               `json:"experimentaloptions,omitempty"`
	ServerStartTime                                int64                  `json:"serverstarttime"`
	ServerStartHash                                string                 `json:"serverstarthash"`
	CurrentTime                                    int64                  `json:"currenttime"`
	ServerLicenseHash                              string                 `json:"serverlicensehash"`
	LicenseValidUntil                              int64                  `json:"licensevaliduntil"`
	EmailsSentSuccessfully                         int64                  `json:"emailssentsuccessfully"`
	EmailsSentErrors                               int64                  `json:"emailssenterrors"`
	EmailsWaitingInQueue                           int64                  `json:"emailswaitinginqueue"`
	ScheduledEmailThreadCurrentState               int64                  `json:"scheduledemailthreadcurrentstate"`
	ScheduledEmailThreadLastCalculateDurationNanos int64                  `json:"scheduledemailthreadlastcalculatedurationnanos"`
	ScheduledEmailThreadWaitingUntil               int64                  `json:"scheduledemailthreadwaitinguntil"`
	ScheduledEmailThreadLastWakeTime               int64                  `json:"scheduledemailthreadlastwaketime"`
	ScheduledEmailThreadLastWakeSentEmails         bool                   `json:"scheduledemailthreadlastwakesentemails"`
	SelfBackup                                     []SelfBackupStatistics `json:"selfbackup"`
}

type WebAuthnPublicKeyCredentialRequestOptions struct {
	Challenge          []byte                           `json:"challenge"`
	Timeout            int                              `json:"timeout,omitempty"`
	RelyingPartyID     string                           `json:"rpid,omitempty"`
	AllowedCredentials []WebAuthnCredentialDescriptor   `json:"allowcredentials,omitempty"`
	UserVerification   string                           `json:"userverification,omitempty"`
	Extensions         WebAuthnAuthenticationExtensions `json:"extensions,omitempty"`
}

type RegisterOfficeApplicationCheckResponse struct {
	Continuation string              `json:"continuation"`
	Completed    bool                `json:"completed"`
	Error        string              `json:"error"`
	Result       Office365Credential `json:"result,omitempty"`
}

type Office365CustomSettingV2 struct {
	Organization        bool            `json:"organization"`
	BackupOptions       map[string]uint `json:"backupoptions,omitempty"`
	MemberBackupOptions map[string]uint `json:"memberbackupoptions,omitempty"`
}

type CreateGroupPolicyResponse struct {
	Status     int    `json:"status"`
	Message    string `json:"message"`
	PolicyHash string `json:"policyhash"`
}

type StatResult struct {
	Buckets        int64 `json:"buckets"`
	Users          int64 `json:"users"`
	Devices        int64 `json:"devices"`
	Boosters       int64 `json:"boosters"`
	NetworkDevices int64 `json:"networkdevices"`
}

type MacOSCodeSignProperties struct {
	Level                 MacOSCodesignLevel `json:"level"`
	SignLocally           bool               `json:"signlocally"`
	SSHServer             SSHConnection      `json:"sshserver"`
	CertificateName       string             `json:"certificatename"`
	AppCertificateName    string             `json:"appcertificatename"`
	AppleID               string             `json:"appleid"`
	AppleIDPass           string             `json:"appleidpass"`
	AppleIDPassFormat     uint64             `json:"appleidpassformat"`
	CertificateFile       string             `json:"certificatefile"`
	AppCertificateFile    string             `json:"appcertificatefile"`
	PfxFilePassword       string             `json:"pfxfilepassword"`
	PfxFilePasswordFormat uint64             `json:"pfxfilepasswordformat"`
	NotaryAPIIssuerID     string             `json:"notaryapiissuerid"`
	NotaryAPIKeyID        string             `json:"notaryapikeyid"`
	NotaryAPIKeyFile      string             `json:"notaryapikeyfile"`
}

// DEFAULT CLIENT STRUCT

// CometServerAPI is the base
type CometServerAPI struct {
	ServerURL string
}

// NewCometServerAPI constructs and returns an instance of CometServerAPI
func NewCometServerAPI(serverURL string) *CometServerAPI {
	return &CometServerAPI{serverURL: serverURL}
}

// Request is a convenience method wrapping a basic http request
func (this *CometServerAPI) Request(method, url string, body map[string]string) (*http.Response, error) {
	jsonBody, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}

	var buf *bytes.Buffer
	if body != "" {
		buf = bytes.NewBufferString(jsonBody)
	}

	req, err := http.NewRequest(strings.ToUpper(method), url, buf)
	if err != nil {
		return nil, err
	}

	return http.DefaultClient.Do(req)
}

// DEFAULT CLIENT METHODS

// Retrieve properties about the current admin account
// Some key parameters are obscured, but the obscured values are safely recognised by the corresponding AdminAccountSetProperties API.
//
// You must supply administrator authentication credentials to use this API.
func (this *CometServerAPI) AdminAccountProperties() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/account/properties", nil)
}

// Generate a new TOTP secret
// The secret is returned as a `data-uri` image of a QR code. The new secret is immediately applied to the current admin account.
//
// You must supply administrator authentication credentials to use this API.
func (this *CometServerAPI) AdminAccountRegenerateTotp() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/account/regenerate-totp", nil)
}

// Revoke a session key (log out)
//
// You must supply administrator authentication credentials to use this API.
func (this *CometServerAPI) AdminAccountSessionRevoke() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/account/session-revoke", nil)
}

// Generate a session key (log in)
//
// You must supply administrator authentication credentials to use this API.
// Params:
// SelfAddress <string>: (Optional) External URL of this server
func (this *CometServerAPI) AdminAccountSessionStart(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/account/session-start", data)
}

// Generate a session key for an end-user (log in as end-user)
//
// You must supply administrator authentication credentials to use this API.
// Params:
// TargetUser <string>: Target account username
func (this *CometServerAPI) AdminAccountSessionStartAsUser(TargetUser string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser

	return this.Request("POST", "/api/v1/admin/account/session-start-as-user", data)
}

// Update settings for your own admin account
// Updating your account password requires you to supply your current password.
// To set a new plaintext password, use a password format of 0 (PASSWORD_FORMAT_PLAINTEXT).
// This API does not currently allow you to modify your TOTP secret or IP whitelist.
//
// You must supply administrator authentication credentials to use this API.
// Params:
// Security <AdminSecurityOptions>: Updated account properties
func (this *CometServerAPI) AdminAccountSetProperties(Security AdminSecurityOptions) (*http.Response, error) {
	data := map[string]string{}
	data["Security"] = Security

	return this.Request("POST", "/api/v1/admin/account/set-properties", data)
}

// Register a new FIDO U2F token
// Browser support for U2F is ending in February 2022. WebAuthn is backwards
// compatible with U2F keys, and Comet will automatically migrate existing U2F keys
// to allow their use with the WebAuthn endpoints.
//
// You must supply administrator authentication credentials to use this API.
// Params:
// SelfAddress <string>: External URL of this server, used as U2F AppID and Facet
func (this *CometServerAPI) AdminAccountU2fRequestRegistrationChallenge(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	data["SelfAddress"] = SelfAddress

	return this.Request("POST", "/api/v1/admin/account/u2f/request-registration-challenge", data)
}

// Register a new FIDO U2F token
// Browser support for U2F is ending in February 2022. WebAuthn is backwards
// compatible with U2F keys, and Comet will automatically migrate existing U2F keys
// to allow their use with the WebAuthn endpoints.
//
// You must supply administrator authentication credentials to use this API.
// Params:
// U2FChallengeID <string>: Associated value from AdminAccountU2fRequestRegistrationChallenge API
// U2FClientData <string>: U2F response data supplied by hardware token
// U2FRegistrationData <string>: U2F response data supplied by hardware token
// U2FVersion <string>: U2F response data supplied by hardware token
// Description <string>: Optional description of the token
func (this *CometServerAPI) AdminAccountU2fSubmitChallengeResponse(U2FChallengeID string, U2FClientData string, U2FRegistrationData string, U2FVersion string, Description string) (*http.Response, error) {
	data := map[string]string{}
	data["U2FChallengeID"] = U2FChallengeID
	data["U2FClientData"] = U2FClientData
	data["U2FRegistrationData"] = U2FRegistrationData
	data["U2FVersion"] = U2FVersion
	data["Description"] = Description

	return this.Request("POST", "/api/v1/admin/account/u2f/submit-challenge-response", data)
}

// Validate the TOTP code before turning 2fa(TOTP) on
//
// You must supply administrator authentication credentials to use this API.
// Params:
// TOTPCode <string>: Six-digit code after scanning barcode image
func (this *CometServerAPI) AdminAccountValidateTotp(TOTPCode string) (*http.Response, error) {
	data := map[string]string{}
	data["TOTPCode"] = TOTPCode

	return this.Request("POST", "/api/v1/admin/account/validate-totp", data)
}

// Register a new FIDO2 WebAuthn token
//
// You must supply administrator authentication credentials to use this API.
// Params:
// SelfAddress <string>: External URL of this server, used as WebAuthn ID
func (this *CometServerAPI) AdminAccountWebauthnRequestRegistrationChallenge(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	data["SelfAddress"] = SelfAddress

	return this.Request("POST", "/api/v1/admin/account/webauthn/request-registration-challenge", data)
}

// Register a new FIDO2 WebAuthn token
//
// You must supply administrator authentication credentials to use this API.
// Params:
// SelfAddress <string>: External URL of this server, used as WebAuthn ID
// ChallengeID <string>: Associated value from AdminAccountWebAuthnRequestRegistrationChallenge API
// Credential <string>: JSON-encoded credential
func (this *CometServerAPI) AdminAccountWebauthnSubmitChallengeResponse(SelfAddress string, ChallengeID string, Credential string) (*http.Response, error) {
	data := map[string]string{}
	data["SelfAddress"] = SelfAddress
	data["ChallengeID"] = ChallengeID
	data["Credential"] = Credential

	return this.Request("POST", "/api/v1/admin/account/webauthn/submit-challenge-response", data)
}

// Add a new user account
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: New account username
// TargetPassword <string>: New account password
// StoreRecoveryCode <int>: (Optional) If set to 1, store and keep a password recovery code for the generated user (>= 18.3.9)
// RequirePasswordChange <int>: (Optional) If set to 1, require to reset password at the first login for the generated user (>= 20.3.4)
// TargetOrganization <string>: (Optional) If present, create the user account on behalf of another organization. Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)
func (this *CometServerAPI) AdminAddUser(TargetUser string, TargetPassword string, StoreRecoveryCode int, RequirePasswordChange int, TargetOrganization string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser
	data["TargetPassword"] = TargetPassword
	if StoreRecoveryCode != "" {
		data["StoreRecoveryCode"] = StoreRecoveryCode
	}
	if RequirePasswordChange != "" {
		data["RequirePasswordChange"] = RequirePasswordChange
	}
	if TargetOrganization != "" {
		data["TargetOrganization"] = TargetOrganization
	}

	return this.Request("POST", "/api/v1/admin/add-user", data)
}

// Add a new user account (with all information)
// This allows you to create a new account and set all its properties at once (e.g. during account replication). Developers creating a signup form may find it simpler to use the AdminAddUser and AdminGetUserProfile / AdminSetUserProfile APIs separately.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: New account username
// ProfileData <UserProfileConfig>: New account profile
// TargetOrganization <string>: (Optional) If present, create the user account on behalf of another organization. Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)
func (this *CometServerAPI) AdminAddUserFromProfile(TargetUser string, ProfileData UserProfileConfig, TargetOrganization string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser
	data["ProfileData"] = ProfileData
	if TargetOrganization != "" {
		data["TargetOrganization"] = TargetOrganization
	}

	return this.Request("POST", "/api/v1/admin/add-user-from-profile", data)
}

// Delete an administrator
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// Params:
// TargetUser <string>: the username of the admin to be deleted
func (this *CometServerAPI) AdminAdminUserDelete(TargetUser string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser

	return this.Request("POST", "/api/v1/admin/admin-user/delete", data)
}

// List administrators
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
func (this *CometServerAPI) AdminAdminUserList() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/admin-user/list", nil)
}

// Add a new administrator
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// Params:
// TargetUser <string>: the username for this new admin
// TargetPassword <string>: the password for this new admin user
// TargetOrgID <string>: (Optional) provide the organization ID for this user, it will default to the org of the authenticating user otherwise
func (this *CometServerAPI) AdminAdminUserNew(TargetUser string, TargetPassword string, TargetOrgID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser
	data["TargetPassword"] = TargetPassword
	if TargetOrgID != "" {
		data["TargetOrgID"] = TargetOrgID
	}

	return this.Request("POST", "/api/v1/admin/admin-user/new", data)
}

// List available software download platforms
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
func (this *CometServerAPI) AdminBrandingAvailablePlatforms() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/branding/available-platforms", nil)
}

// Download software
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// Platform <int>: The selected download platform, from the AdminBrandingAvailablePlatforms API
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometServerAPI) AdminBrandingGenerateClientByPlatform(Platform int, SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	data["Platform"] = Platform
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/branding/generate-client/by-platform", data)
}

// Download software (Linux Server .run)
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometServerAPI) AdminBrandingGenerateClientLinuxgeneric(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/branding/generate-client/linuxgeneric", data)
}

// Download software (macOS x86_64 pkg)
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometServerAPI) AdminBrandingGenerateClientMacosX8664(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/branding/generate-client/macos-x86_64", data)
}

// Download software (Synology SPK for DSM 6)
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometServerAPI) AdminBrandingGenerateClientSpkDsm6(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/branding/generate-client/spk-dsm6", data)
}

// Download software (Synology SPK for DSM 7)
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometServerAPI) AdminBrandingGenerateClientSpkDsm7(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/branding/generate-client/spk-dsm7", data)
}

// Check if a software download is available
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// Platform <int>: The selected download platform, from the AdminBrandingAvailablePlatforms API
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometServerAPI) AdminBrandingGenerateClientTest(Platform int, SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	data["Platform"] = Platform
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/branding/generate-client/test", data)
}

// Download software update (Windows AnyCPU exe)
// The exe endpoints are not recommended for end-users, as they may not be able to provide a codesigned installer if no custom codesigning certificate is present.
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometServerAPI) AdminBrandingGenerateClientWindowsAnycpuExe(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/branding/generate-client/windows-anycpu-exe", data)
}

// Download software (Windows AnyCPU zip)
// The zip endpoints are recommended for end-users, as they may be able to provide a codesigned installer even when no custom codesigning certificate is present.
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometServerAPI) AdminBrandingGenerateClientWindowsAnycpuZip(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/branding/generate-client/windows-anycpu-zip", data)
}

// Download software update (Windows x86_32 exe)
// The exe endpoints are not recommended for end-users, as they may not be able to provide a codesigned installer if no custom codesigning certificate is present.
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometServerAPI) AdminBrandingGenerateClientWindowsX8632Exe(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/branding/generate-client/windows-x86_32-exe", data)
}

// Download software (Windows x86_32 zip)
// The zip endpoints are recommended for end-users, as they may be able to provide a codesigned installer even when no custom codesigning certificate is present.
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometServerAPI) AdminBrandingGenerateClientWindowsX8632Zip(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/branding/generate-client/windows-x86_32-zip", data)
}

// Download software update (Windows x86_64 exe)
// The exe endpoints are not recommended for end-users, as they may not be able to provide a codesigned installer if no custom codesigning certificate is present.
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometServerAPI) AdminBrandingGenerateClientWindowsX8664Exe(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/branding/generate-client/windows-x86_64-exe", data)
}

// Download software (Windows x86_64 zip)
// The zip endpoints are recommended for end-users, as they may be able to provide a codesigned installer even when no custom codesigning certificate is present.
//
// This API requires administrator authentication credentials, unless the server is configured to allow unauthenticated software downloads.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts
func (this *CometServerAPI) AdminBrandingGenerateClientWindowsX8664Zip(SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/branding/generate-client/windows-x86_64-zip", data)
}

// Send an email bulletin to all users
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// Subject <string>: Bulletin subject line
// Content <string>: Bulletin message content
func (this *CometServerAPI) AdminBulletinSubmit(Subject string, Content string) (*http.Response, error) {
	data := map[string]string{}
	data["Subject"] = Subject
	data["Content"] = Content

	return this.Request("POST", "/api/v1/admin/bulletin/submit", data)
}

// Get Constellation bucket usage report (cached)
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// This API requires the Constellation Role to be enabled.
func (this *CometServerAPI) AdminConstellationLastReport() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/constellation/last-report", nil)
}

// Get Constellation bucket usage report (regenerate)
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// This API requires the Constellation Role to be enabled.
func (this *CometServerAPI) AdminConstellationNewReport() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/constellation/new-report", nil)
}

// Prune unused buckets
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// This API requires the Constellation Role to be enabled.
func (this *CometServerAPI) AdminConstellationPruneNow() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/constellation/prune-now", nil)
}

// Get Constellation status
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// This API requires the Constellation Role to be enabled.
func (this *CometServerAPI) AdminConstellationStatus() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/constellation/status", nil)
}

// Create token for silent installation
// Currently only supported for Windows & macOS only
// Provide the installation token to silently install the client on windows `install.exe /TOKEN=<installtoken>`
// Provide the installation token to silently install the client on Mac OS `sudo launchctl setenv BACKUP_APP_TOKEN "installtoken" && sudo /usr/sbin/installer -allowUntrusted -pkg "Comet Backup.pkg" -target /`
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Selected account username
// TargetPassword <string>: Selected account password
// Server <string>: (Optional) External URL of the authentication server that is different from the current server
func (this *CometServerAPI) AdminCreateInstallToken(TargetUser string, TargetPassword string, Server string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser
	data["TargetPassword"] = TargetPassword
	if Server != "" {
		data["Server"] = Server
	}

	return this.Request("POST", "/api/v1/admin/create-install-token", data)
}

// Delete user account
// This does not remove any storage buckets. Unused storage buckets will be cleaned up by the Constellation Role.
// Any stored data can not be decrypted without the user profile. Misuse can cause data loss!
// This also allows to uninstall software from active devices under the user account
// This also removes all job history for the user account.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Selected account username
// UninstallConfig <UninstallConfig>: (Optional) Uninstall software configuration (>= 20.3.5)
func (this *CometServerAPI) AdminDeleteUser(TargetUser string, UninstallConfig UninstallConfig) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser
	if UninstallConfig != "" {
		data["UninstallConfig"] = UninstallConfig
	}

	return this.Request("POST", "/api/v1/admin/delete-user", data)
}

// Disable user account 2FA(TOTP) authentication
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Selected account username
func (this *CometServerAPI) AdminDisableUserTotp(TargetUser string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser

	return this.Request("POST", "/api/v1/admin/disable-user-totp", data)
}

// Instruct a live connected device to apply retention rules now
// This command is understood by Comet Backup 17.6.9 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Destination <string>: The Storage Vault GUID
func (this *CometServerAPI) AdminDispatcherApplyRetentionRules(TargetID string, Destination string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Destination"] = Destination

	return this.Request("POST", "/api/v1/admin/dispatcher/apply-retention-rules", data)
}

// Instruct a live connected device to deeply verify Storage Vault content
// This command is understood by Comet Backup 18.8.2 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Destination <string>: The Storage Vault GUID
func (this *CometServerAPI) AdminDispatcherDeepverifyStorageVault(TargetID string, Destination string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Destination"] = Destination

	return this.Request("POST", "/api/v1/admin/dispatcher/deepverify-storage-vault", data)
}

// Instruct a live connected device to delete a stored snapshot
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// DestinationID <string>: The Storage Vault GUID
// SnapshotID <string>: The backup job snapshot ID to delete
func (this *CometServerAPI) AdminDispatcherDeleteSnapshot(TargetID string, DestinationID string, SnapshotID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["DestinationID"] = DestinationID
	data["SnapshotID"] = SnapshotID

	return this.Request("POST", "/api/v1/admin/dispatcher/delete-snapshot", data)
}

// Instruct a live connected device to delete multiple stored snapshots
// The target device must be running Comet 20.9.10 or later.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// DestinationID <string>: The Storage Vault GUID
// SnapshotIDs <[]string>: The backup job snapshot IDs to delete
func (this *CometServerAPI) AdminDispatcherDeleteSnapshots(TargetID string, DestinationID string, SnapshotIDs []string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["DestinationID"] = DestinationID
	data["SnapshotIDs"] = SnapshotIDs

	return this.Request("POST", "/api/v1/admin/dispatcher/delete-snapshots", data)
}

// Disconnect a live connected device
// The device will almost certainly attempt to reconnect.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
func (this *CometServerAPI) AdminDispatcherDropConnection(TargetID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID

	return this.Request("POST", "/api/v1/admin/dispatcher/drop-connection", data)
}

// Request HTML content of an email
// The remote device must have given consent for an MSP to browse their mail
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Snapshot <string>: where the email belongs to
// Destination <string>: The Storage Vault ID
// Path <string>: of the email to view
func (this *CometServerAPI) AdminDispatcherEmailPreview(TargetID string, Snapshot string, Destination string, Path string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Snapshot"] = Snapshot
	data["Destination"] = Destination
	data["Path"] = Path

	return this.Request("POST", "/api/v1/admin/dispatcher/email-preview", data)
}

// Instruct a live connected device to import settings from an installed product
// This command is understood by Comet Backup 17.12.0 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// ImportSourceID <string>: The selected import source, as found by the AdminDispatcherRequestImportSources API
func (this *CometServerAPI) AdminDispatcherImportApply(TargetID string, ImportSourceID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["ImportSourceID"] = ImportSourceID

	return this.Request("POST", "/api/v1/admin/dispatcher/import-apply", data)
}

// Instruct a live connected device to disconnect
// The device will terminate its live-connection process and will not reconnect.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
func (this *CometServerAPI) AdminDispatcherKillProcess(TargetID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID

	return this.Request("POST", "/api/v1/admin/dispatcher/kill-process", data)
}

// List live connected devices
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// UserNameFilter <string>: (Optional) User name filter string
func (this *CometServerAPI) AdminDispatcherListActive(UserNameFilter string) (*http.Response, error) {
	data := map[string]string{}
	if UserNameFilter != "" {
		data["UserNameFilter"] = UserNameFilter
	}

	return this.Request("POST", "/api/v1/admin/dispatcher/list-active", data)
}

// Request a list of Office365 Resources (groups, sites, teams groups and users)
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Credentials <Office365Credential>: The Office365 account credential
func (this *CometServerAPI) AdminDispatcherOffice365ListVirtualAccounts(TargetID string, Credentials Office365Credential) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Credentials"] = Credentials

	return this.Request("POST", "/api/v1/admin/dispatcher/office365-list-virtual-accounts", data)
}

// Test the connection to the storage bucket
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// ExtraData <DestinationLocation>: The destination location settings
func (this *CometServerAPI) AdminDispatcherPingDestination(TargetID string, ExtraData DestinationLocation) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["ExtraData"] = ExtraData

	return this.Request("POST", "/api/v1/admin/dispatcher/ping-destination", data)
}

// Instruct a live connected device to refresh their profile
// This command is understood by Comet Backup 17.12.0 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
func (this *CometServerAPI) AdminDispatcherRefetchProfile(TargetID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID

	return this.Request("POST", "/api/v1/admin/dispatcher/refetch-profile", data)
}

// Begin the process of registering a new Azure AD application that can access Office 365 for backup
// After calling this API, you should supply the login details to the end-user, and then begin polling the AdminDispatcherRegisterOfficeApplicationCheck with the supplied "Continuation" parameter to check on the registration process.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// EmailAddress <string>: The email address of the Azure AD administrator
func (this *CometServerAPI) AdminDispatcherRegisterOfficeApplicationBegin(TargetID string, EmailAddress string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["EmailAddress"] = EmailAddress

	return this.Request("POST", "/api/v1/admin/dispatcher/register-office-application/begin", data)
}

// Check the process of registering a new Azure AD application that can access Office 365 for backup
// You should begin the process by calling AdminDispatcherRegisterOfficeApplicationBegin and asking the end-user to complete the Azure authentication steps.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Continuation <string>: The ID returned from the AdminDispatcherRegisterOfficeApplicationBegin endpoint
func (this *CometServerAPI) AdminDispatcherRegisterOfficeApplicationCheck(TargetID string, Continuation string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Continuation"] = Continuation

	return this.Request("POST", "/api/v1/admin/dispatcher/register-office-application/check", data)
}

// Instruct a live connected device to rebuild Storage Vault indexes now
// This command is understood by Comet Backup 18.6.9 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Destination <string>: The Storage Vault GUID
func (this *CometServerAPI) AdminDispatcherReindexStorageVault(TargetID string, Destination string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Destination"] = Destination

	return this.Request("POST", "/api/v1/admin/dispatcher/reindex-storage-vault", data)
}

// Request a list of physical disk drive information from a live connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
func (this *CometServerAPI) AdminDispatcherRequestBrowseDiskDrives(TargetID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID

	return this.Request("POST", "/api/v1/admin/dispatcher/request-browse-disk-drives", data)
}

// Request a list of Exchange EDB databases from a live connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
func (this *CometServerAPI) AdminDispatcherRequestBrowseExchangeEdb(TargetID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID

	return this.Request("POST", "/api/v1/admin/dispatcher/request-browse-exchange-edb", data)
}

// Request a list of Hyper-V virtual machines from a live connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
func (this *CometServerAPI) AdminDispatcherRequestBrowseHyperv(TargetID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID

	return this.Request("POST", "/api/v1/admin/dispatcher/request-browse-hyperv", data)
}

// Request a list of tables in MongoDB database
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Credentials <MongoDBConnection>: The Mongo database authentication settings
func (this *CometServerAPI) AdminDispatcherRequestBrowseMongodb(TargetID string, Credentials MongoDBConnection) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Credentials"] = Credentials

	return this.Request("POST", "/api/v1/admin/dispatcher/request-browse-mongodb", data)
}

// Request a list of tables in MSSQL database
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Credentials <MSSQLConnection>: The MSSQL database authentication settings
func (this *CometServerAPI) AdminDispatcherRequestBrowseMssql(TargetID string, Credentials MSSQLConnection) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Credentials"] = Credentials

	return this.Request("POST", "/api/v1/admin/dispatcher/request-browse-mssql", data)
}

// Request a list of tables in MySQL database
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Credentials <MySQLConnection>: The MySQL database authentication settings
func (this *CometServerAPI) AdminDispatcherRequestBrowseMysql(TargetID string, Credentials MySQLConnection) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Credentials"] = Credentials

	return this.Request("POST", "/api/v1/admin/dispatcher/request-browse-mysql", data)
}

// Request a list of installed VSS Writers (Application-Aware Writers) from a live connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
func (this *CometServerAPI) AdminDispatcherRequestBrowseVssAaw(TargetID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID

	return this.Request("POST", "/api/v1/admin/dispatcher/request-browse-vss-aaw", data)
}

// Request a list of filesystem objects from a live connected device
// The device must have granted the administrator permission to view its filenames.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Path <string>: (Optional) Browse objects inside this path. If empty or not present, returns the top-level device paths
func (this *CometServerAPI) AdminDispatcherRequestFilesystemObjects(TargetID string, Path string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	if Path != "" {
		data["Path"] = Path
	}

	return this.Request("POST", "/api/v1/admin/dispatcher/request-filesystem-objects", data)
}

// Request a list of import sources from a live connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
func (this *CometServerAPI) AdminDispatcherRequestImportSources(TargetID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID

	return this.Request("POST", "/api/v1/admin/dispatcher/request-import-sources", data)
}

// Request a list of Office365 mailbox accounts
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Credentials <Office365Credential>: The Office365 account credential
func (this *CometServerAPI) AdminDispatcherRequestOffice365Accounts(TargetID string, Credentials Office365Credential) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Credentials"] = Credentials

	return this.Request("POST", "/api/v1/admin/dispatcher/request-office365-accounts", data)
}

// Request a list of Office365 sites
// The remote device must have given consent for an MSP to browse their files.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Credentials <Office365Credential>: The Office365 account credential
func (this *CometServerAPI) AdminDispatcherRequestOffice365Sites(TargetID string, Credentials Office365Credential) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Credentials"] = Credentials

	return this.Request("POST", "/api/v1/admin/dispatcher/request-office365-sites", data)
}

// Request a list of stored objects inside an existing backup job
// The remote device must have given consent for an MSP to browse their files.
// To service this request, the remote device must connect to the Storage Vault and load index data. There may be a small delay. If the remote device is running Comet 20.12.0 or later, the necessary index data is cached when this API is first called, for 15 minutes after the last repeated call. This can improve performance for interactively browsing an entire tree of stored objects.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Destination <string>: The Storage Vault ID
// SnapshotID <string>: The selected backup job snapshot
// TreeID <string>: (Optional) Browse objects inside subdirectory of backup snapshot. If it is for VMDK single file restore, it should be the disk image's subtree ID.
// Options <VMDKSnapshotViewOptions>: (Optional) Request a list of stored objects in vmdk file
func (this *CometServerAPI) AdminDispatcherRequestStoredObjects(TargetID string, Destination string, SnapshotID string, TreeID string, Options VMDKSnapshotViewOptions) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Destination"] = Destination
	data["SnapshotID"] = SnapshotID
	if TreeID != "" {
		data["TreeID"] = TreeID
	}
	if Options != "" {
		data["Options"] = Options
	}

	return this.Request("POST", "/api/v1/admin/dispatcher/request-stored-objects", data)
}

// Request a list of Storage Vault snapshots from a live connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Destination <string>: The Storage Vault ID
func (this *CometServerAPI) AdminDispatcherRequestVaultSnapshots(TargetID string, Destination string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Destination"] = Destination

	return this.Request("POST", "/api/v1/admin/dispatcher/request-vault-snapshots", data)
}

// Request a Disk Image snapshot with the windiskbrowse-style from a live connected device
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Destination <string>: The Storage Vault ID
// SnapshotID <string>: The Snapshot ID
func (this *CometServerAPI) AdminDispatcherRequestWindiskSnapshot(TargetID string, Destination string, SnapshotID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Destination"] = Destination
	data["SnapshotID"] = SnapshotID

	return this.Request("POST", "/api/v1/admin/dispatcher/request-windisk-snapshot", data)
}

// Instruct a live connected device to run a scheduled backup
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// BackupRule <string>: The schedule GUID
func (this *CometServerAPI) AdminDispatcherRunBackup(TargetID string, BackupRule string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["BackupRule"] = BackupRule

	return this.Request("POST", "/api/v1/admin/dispatcher/run-backup", data)
}

// Instruct a live connected device to run a backup
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Source <string>: The Protected Item GUID
// Destination <string>: The Storage Vault GUID
// Options <BackupJobAdvancedOptions>: (Optional) Extra job parameters (>= 19.3.6)
func (this *CometServerAPI) AdminDispatcherRunBackupCustom(TargetID string, Source string, Destination string, Options BackupJobAdvancedOptions) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Source"] = Source
	data["Destination"] = Destination
	if Options != "" {
		data["Options"] = Options
	}

	return this.Request("POST", "/api/v1/admin/dispatcher/run-backup-custom", data)
}

// Instruct a live connected device to perform a local restore
// This command is understood by Comet Backup 17.9.3 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Path <string>: The local path to restore to
// Source <string>: The Protected Item ID
// Destination <string>: The Storage Vault ID
// Snapshot <string>: (Optional) If present, restore a specific snapshot. Otherwise, restore the latest snapshot for the selected Protected Item + Storage Vault pair
// Paths <[]string>: (Optional) If present, restore these paths only. Otherwise, restore all data (>= 19.3.0)
func (this *CometServerAPI) AdminDispatcherRunRestore(TargetID string, Path string, Source string, Destination string, Snapshot string, Paths []string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Path"] = Path
	data["Source"] = Source
	data["Destination"] = Destination
	if Snapshot != "" {
		data["Snapshot"] = Snapshot
	}
	if Paths != "" {
		data["Paths"] = Paths
	}

	return this.Request("POST", "/api/v1/admin/dispatcher/run-restore", data)
}

// Instruct a live connected device to perform a local restore
// This command is understood by Comet Backup 18.6.0 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Source <string>: The Protected Item ID
// Destination <string>: The Storage Vault ID
// Options <RestoreJobAdvancedOptions>: Restore targets
// Snapshot <string>: (Optional) If present, restore a specific snapshot. Otherwise, restore the latest snapshot for the selected Protected Item + Storage Vault pair
// Paths <[]string>: (Optional) If present, restore these paths only. Otherwise, restore all data
func (this *CometServerAPI) AdminDispatcherRunRestoreCustom(TargetID string, Source string, Destination string, Options RestoreJobAdvancedOptions, Snapshot string, Paths []string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Source"] = Source
	data["Destination"] = Destination
	data["Options"] = Options
	if Snapshot != "" {
		data["Snapshot"] = Snapshot
	}
	if Paths != "" {
		data["Paths"] = Paths
	}

	return this.Request("POST", "/api/v1/admin/dispatcher/run-restore-custom", data)
}

// Instruct a live connected device to self-uninstall the software
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// RemoveConfigFile <bool>: Determine if the config.dat file will be deleted at the same time
func (this *CometServerAPI) AdminDispatcherUninstallSoftware(TargetID string, RemoveConfigFile bool) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["RemoveConfigFile"] = RemoveConfigFile

	return this.Request("POST", "/api/v1/admin/dispatcher/uninstall-software", data)
}

// Instruct a live connected device to remove lock files from a Storage Vault
// Misuse can cause data loss!
// This command is understood by Comet Backup 17.9.4 and newer.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// Destination <string>: The Storage Vault GUID
func (this *CometServerAPI) AdminDispatcherUnlock(TargetID string, Destination string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["Destination"] = Destination

	return this.Request("POST", "/api/v1/admin/dispatcher/unlock", data)
}

// Instruct a live connected device to update its login server URL
// The device will attempt to connect to the new Auth Role Comet Server using its current username and password. If the test connection succeeds, the device migrates its saved connection settings and live connections to the new server. If the device is not registered on the new URL, or if the credentials are incorrect, the device remains on the current Auth Role server.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// NewURL <string>: The new external URL of this server
func (this *CometServerAPI) AdminDispatcherUpdateLoginUrl(TargetID string, NewURL string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	data["NewURL"] = NewURL

	return this.Request("POST", "/api/v1/admin/dispatcher/update-login-url", data)
}

// Instruct a live connected device to download a software update
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// This API requires the Software Build Role to be enabled.
// Params:
// TargetID <string>: The live connection GUID
// SelfAddress <string>: (Optional) The external URL of this server, used to resolve conflicts (>= 19.3.11)
func (this *CometServerAPI) AdminDispatcherUpdateSoftware(TargetID string, SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetID"] = TargetID
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/dispatcher/update-software", data)
}

// Get the report log entries for a single job, in plaintext format
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// JobID <string>: Selected job ID
func (this *CometServerAPI) AdminGetJobLog(JobID string) (*http.Response, error) {
	data := map[string]string{}
	data["JobID"] = JobID

	return this.Request("POST", "/api/v1/admin/get-job-log", data)
}

// Get the report log entries for a single job
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// JobID <string>: Selected job ID
func (this *CometServerAPI) AdminGetJobLogEntries(JobID string) (*http.Response, error) {
	data := map[string]string{}
	data["JobID"] = JobID

	return this.Request("POST", "/api/v1/admin/get-job-log-entries", data)
}

// Get properties of a single job
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// JobID <string>: Selected job ID
func (this *CometServerAPI) AdminGetJobProperties(JobID string) (*http.Response, error) {
	data := map[string]string{}
	data["JobID"] = JobID

	return this.Request("POST", "/api/v1/admin/get-job-properties", data)
}

// Get jobs (All)
// The jobs are returned in an unspecified order.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
func (this *CometServerAPI) AdminGetJobsAll() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/get-jobs-all", nil)
}

// Get jobs (for custom search)
// The jobs are returned in an unspecified order.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// Query <SearchClause>: (No description available)
func (this *CometServerAPI) AdminGetJobsForCustomSearch(Query SearchClause) (*http.Response, error) {
	data := map[string]string{}
	data["Query"] = Query

	return this.Request("POST", "/api/v1/admin/get-jobs-for-custom-search", data)
}

// Get jobs (for date range)
// The jobs are returned in an unspecified order.
//
// If the `Start` parameter is later than `End`, they will be swapped.
//
// This API will return all jobs that either started or ended within the supplied range.
//
// Incomplete jobs have an end time of `0`. You can use this API to find only incomplete jobs by setting both `Start` and `End` to `0`.
//
// Prior to Comet Server 22.6.0, additional Incomplete jobs may have been returned if you specified non-zero arguments for both `Start` and `End`.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// Start <int>: Timestamp (Unix)
// End <int>: Timestamp (Unix)
func (this *CometServerAPI) AdminGetJobsForDateRange(Start int, End int) (*http.Response, error) {
	data := map[string]string{}
	data["Start"] = Start
	data["End"] = End

	return this.Request("POST", "/api/v1/admin/get-jobs-for-date-range", data)
}

// Get jobs (for user)
// The jobs are returned in an unspecified order.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Selected username
func (this *CometServerAPI) AdminGetJobsForUser(TargetUser string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser

	return this.Request("POST", "/api/v1/admin/get-jobs-for-user", data)
}

// Get jobs (Recent and incomplete)
// The jobs are returned in an unspecified order.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
func (this *CometServerAPI) AdminGetJobsRecent() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/get-jobs-recent", nil)
}

// Get user account profile
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Selected account username
func (this *CometServerAPI) AdminGetUserProfile(TargetUser string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser

	return this.Request("POST", "/api/v1/admin/get-user-profile", data)
}

// Get user account profile (atomic)
// The resulting hash parameter can be passed to the corresponding update API, to atomically ensure that no changes occur between get/set operations.
// The hash format is not publicly documented and may change in a future server version. Use server APIs to retrieve current hash values.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Selected account username
func (this *CometServerAPI) AdminGetUserProfileAndHash(TargetUser string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser

	return this.Request("POST", "/api/v1/admin/get-user-profile-and-hash", data)
}

// Get user account profile (hash)
// The profile hash can be used to determine if a user account profile has changed.
// The hash format is not publicly documented and may change in a future server version. Use server APIs to retrieve current hash values.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Selected account username
func (this *CometServerAPI) AdminGetUserProfileHash(TargetUser string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser

	return this.Request("POST", "/api/v1/admin/get-user-profile-hash", data)
}

// Cancel a running job
// A request is sent to the live-connected device, asking it to cancel the operation. This may fail if there is no live-connection.
// Only jobs from Comet 18.3.5 or newer can be cancelled. A job can only be cancelled if it has a non-empty CancellationID field in its properties.
// If the device is running Comet 21.9.5 or later, this API will wait up to ten seconds for a confirmation from the client.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Username
// JobID <string>: Job ID
func (this *CometServerAPI) AdminJobCancel(TargetUser string, JobID string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser
	data["JobID"] = JobID

	return this.Request("POST", "/api/v1/admin/job/cancel", data)
}

// List all user accounts
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
func (this *CometServerAPI) AdminListUsers() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/list-users", nil)
}

// List all user account profiles
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
func (this *CometServerAPI) AdminListUsersFull() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/list-users-full", nil)
}

// Get Branding configuration
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
func (this *CometServerAPI) AdminMetaBrandingConfigGet() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/meta/branding-config/get", nil)
}

// Set Branding configuration
// Note that file resources must be provided using a resource URI I.E `"resource://05ba0b90ee66bda433169581188aba8d29faa938f9464cccd651a02fdf2e5b57"`. See AdminMetaResourceNew for the API documentation to create new file resources.
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// Params:
// BrandingConfig <BrandingOptions>: Updated configuration content
func (this *CometServerAPI) AdminMetaBrandingConfigSet(BrandingConfig BrandingOptions) (*http.Response, error) {
	data := map[string]string{}
	data["BrandingConfig"] = BrandingConfig

	return this.Request("POST", "/api/v1/admin/meta/branding-config/set", data)
}

// Get Software Build Role configuration
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
func (this *CometServerAPI) AdminMetaBuildConfigGet() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/meta/build-config/get", nil)
}

// Set Build Role configuration
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// Params:
// SoftwareBuildRoleConfig <SoftwareBuildRoleOptions>: Updated configuration content
func (this *CometServerAPI) AdminMetaBuildConfigSet(SoftwareBuildRoleConfig SoftwareBuildRoleOptions) (*http.Response, error) {
	data := map[string]string{}
	data["SoftwareBuildRoleConfig"] = SoftwareBuildRoleConfig

	return this.Request("POST", "/api/v1/admin/meta/build-config/set", data)
}

// Get log files
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
func (this *CometServerAPI) AdminMetaListAvailableLogDays() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/meta/list-available-log-days", nil)
}

// Get a ZIP file of all of the server's log files
// On non-Windows platforms, log content uses LF line endings. On Windows, Comet changed from LF to CRLF line endings in 18.3.2.
// This API does not automatically convert line endings; around the 18.3.2 timeframe, log content may even contain mixed line-endings.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
func (this *CometServerAPI) AdminMetaReadAllLogs() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/meta/read-all-logs", nil)
}

// Get log file content
// On non-Windows platforms, log content uses LF line endings. On Windows, Comet changed from LF to CRLF line endings in 18.3.2.
// This API does not automatically convert line endings; around the 18.3.2 timeframe, log content may even contain mixed line-endings.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// Params:
// Log <int>: A log day, selected from the options returned by the Get Log Files API
func (this *CometServerAPI) AdminMetaReadLogs(Log int) (*http.Response, error) {
	data := map[string]string{}
	data["Log"] = Log

	return this.Request("POST", "/api/v1/admin/meta/read-logs", data)
}

// Get Requesting Remote Storage Vault Config
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
func (this *CometServerAPI) AdminMetaRemoteStorageVaultGet() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/meta/remote-storage-vault/get", nil)
}

// Set Storage template vault options
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// Params:
// RemoteStorageOptions <[]RemoteStorageOption>: Updated configuration content
func (this *CometServerAPI) AdminMetaRemoteStorageVaultSet(RemoteStorageOptions []RemoteStorageOption) (*http.Response, error) {
	data := map[string]string{}
	data["RemoteStorageOptions"] = RemoteStorageOptions

	return this.Request("POST", "/api/v1/admin/meta/remote-storage-vault/set", data)
}

// Get a resource file
// Resources are used to upload files within the server configuration.
//
// You must supply administrator authentication credentials to use this API.
// Params:
// Hash <string>: The resource identifier
func (this *CometServerAPI) AdminMetaResourceGet(Hash string) (*http.Response, error) {
	data := map[string]string{}
	data["Hash"] = Hash

	return this.Request("POST", "/api/v1/admin/meta/resource/get", data)
}

// Upload a resource file
// Resources are used to upload files within the server configuration.
// The resulting resource ID is autogenerated.
// The lifespan of an uploaded resource is undefined. Resources may be deleted automatically, but it should remain available until the next call to AdminMetaServerConfigSet, and will remain available for as long as it is referenced by the server configuration.
//
// You must supply administrator authentication credentials to use this API.
// Params:
// upload <string>: The uploaded file contents, as a multipart/form-data part.
func (this *CometServerAPI) AdminMetaResourceNew(upload string) (*http.Response, error) {
	data := map[string]string{}
	data["upload"] = upload

	return this.Request("POST", "/api/v1/admin/meta/resource/new", data)
}

// Restart server
// The Comet Server process will exit. The service manager should restart the server automatically.
//
// Prior to 18.9.2, this API terminated the server immediately without returning a response. In 18.9.2 and later, it returns a successful response before shutting down.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// Access to this API may be prevented on a per-administrator basis.
func (this *CometServerAPI) AdminMetaRestartService() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/meta/restart-service", nil)
}

// Send a test email message
// This allows the Comet Server web interface to support testing different email credentials during setup.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// Access to this API may be prevented on a per-administrator basis.
// Params:
// EmailOptions <EmailOptions>: Updated configuration content
// Recipient <string>: Target email address to send test email
func (this *CometServerAPI) AdminMetaSendTestEmail(EmailOptions EmailOptions, Recipient string) (*http.Response, error) {
	data := map[string]string{}
	data["EmailOptions"] = EmailOptions
	data["Recipient"] = Recipient

	return this.Request("POST", "/api/v1/admin/meta/send-test-email", data)
}

// Get server configuration
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
func (this *CometServerAPI) AdminMetaServerConfigGet() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/meta/server-config/get", nil)
}

// List the available network interfaces on the PC running Comet Server
// Any IPv6 addresses are listed in compressed form without square-brackets.
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
func (this *CometServerAPI) AdminMetaServerConfigNetworkInterfaces() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/meta/server-config/network-interfaces", nil)
}

// Set server configuration
// The Comet Server process will exit. The service manager should restart the server automatically.
//
// Prior to 18.9.2, this API terminated the server immediately without returning a response. In 18.9.2 and later, it returns a successful response before shutting down.
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// Params:
// Config <ServerConfigOptions>: Updated configuration content
func (this *CometServerAPI) AdminMetaServerConfigSet(Config ServerConfigOptions) (*http.Response, error) {
	data := map[string]string{}
	data["Config"] = Config

	return this.Request("POST", "/api/v1/admin/meta/server-config/set", data)
}

// Shut down server
// The Comet Server process will exit.
//
// Prior to 18.9.2, this API terminated the server immediately without returning a response. In 18.9.2 and later, it returns a successful response before shutting down.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// Access to this API may be prevented on a per-administrator basis.
func (this *CometServerAPI) AdminMetaShutdownService() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/meta/shutdown-service", nil)
}

// Get software update news from the software provider
//
// You must supply administrator authentication credentials to use this API.
func (this *CometServerAPI) AdminMetaSoftwareUpdateNews() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/meta/software-update-news", nil)
}

// Get Comet Server historical statistics
// The returned key-value map is not necessarily ordered. Client-side code should sort the result before display.
//
// You must supply administrator authentication credentials to use this API.
// Params:
// Simple <bool>: Remove redundant statistics
func (this *CometServerAPI) AdminMetaStats(Simple bool) (*http.Response, error) {
	data := map[string]string{}
	data["Simple"] = Simple

	return this.Request("POST", "/api/v1/admin/meta/stats", data)
}

// Get server properties
// Retrieve the version number and basic properties about the server.
//
// You must supply administrator authentication credentials to use this API.
func (this *CometServerAPI) AdminMetaVersion() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/meta/version", nil)
}

// Get the server webhook configuration
//
// You must supply administrator authentication credentials to use this API.
func (this *CometServerAPI) AdminMetaWebhookOptionsGet() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/meta/webhook-options/get", nil)
}

// Update the server webhook configuration
// Calling this endpoint will interrupt any messages currently queued for existing webhook destinations.
//
// You must supply administrator authentication credentials to use this API.
// Params:
// WebhookOptions <map[string]WebhookOption>: The replacement webhook target options.
func (this *CometServerAPI) AdminMetaWebhookOptionsSet(WebhookOptions map[string]WebhookOption) (*http.Response, error) {
	data := map[string]string{}
	data["WebhookOptions"] = WebhookOptions

	return this.Request("POST", "/api/v1/admin/meta/webhook-options/set", data)
}

// Get News entries (Admin)
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
func (this *CometServerAPI) AdminNewsGetAll() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/news/get-all", nil)
}

// Remove news item
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// NewsItem <string>: Selected news item GUID
func (this *CometServerAPI) AdminNewsRemove(NewsItem string) (*http.Response, error) {
	data := map[string]string{}
	data["NewsItem"] = NewsItem

	return this.Request("POST", "/api/v1/admin/news/remove", data)
}

// Submit news item
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// NewsContent <string>: Content of news item
func (this *CometServerAPI) AdminNewsSubmit(NewsContent string) (*http.Response, error) {
	data := map[string]string{}
	data["NewsContent"] = NewsContent

	return this.Request("POST", "/api/v1/admin/news/submit", data)
}

// Delete an organization and all related users
//
// Prior to Comet 22.6.0, this API was documented as returning the OrganizationResponse type. However, it always has returned only a CometAPIResponseMessage.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// Params:
// OrganizationID <string>: (Optional) (No description available)
// UninstallConfig <UninstallConfig>: (Optional) Uninstall software configuration
func (this *CometServerAPI) AdminOrganizationDelete(OrganizationID string, UninstallConfig UninstallConfig) (*http.Response, error) {
	data := map[string]string{}
	if OrganizationID != "" {
		data["OrganizationID"] = OrganizationID
	}
	if UninstallConfig != "" {
		data["UninstallConfig"] = UninstallConfig
	}

	return this.Request("POST", "/api/v1/admin/organization/delete", data)
}

// List Organizations
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
func (this *CometServerAPI) AdminOrganizationList() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/organization/list", nil)
}

// Create or Update an Organization
//
// Prior to Comet 22.6.0, the 'ID' and 'Organization' fields were not present in the response.
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// Params:
// OrganizationID <string>: (Optional) (No description available)
// Organization <Organization>: (Optional) (No description available)
func (this *CometServerAPI) AdminOrganizationSet(OrganizationID string, Organization Organization) (*http.Response, error) {
	data := map[string]string{}
	if OrganizationID != "" {
		data["OrganizationID"] = OrganizationID
	}
	if Organization != "" {
		data["Organization"] = Organization
	}

	return this.Request("POST", "/api/v1/admin/organization/set", data)
}

// Delete an existing policy object
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// PolicyID <string>: The policy ID to update or create
func (this *CometServerAPI) AdminPoliciesDelete(PolicyID string) (*http.Response, error) {
	data := map[string]string{}
	data["PolicyID"] = PolicyID

	return this.Request("POST", "/api/v1/admin/policies/delete", data)
}

// Retrieve a single policy object
// A hash is also returned, to allow atomic modification operations.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// PolicyID <string>: The policy ID to retrieve
func (this *CometServerAPI) AdminPoliciesGet(PolicyID string) (*http.Response, error) {
	data := map[string]string{}
	data["PolicyID"] = PolicyID

	return this.Request("POST", "/api/v1/admin/policies/get", data)
}

// List all policy object names
// For the top-level organization, the API result includes all policies for all organizations, unless the TargetOrganization parameter is present.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetOrganization <string>: (Optional) If present, list the policies belonging to another organization. Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)
func (this *CometServerAPI) AdminPoliciesList(TargetOrganization string) (*http.Response, error) {
	data := map[string]string{}
	if TargetOrganization != "" {
		data["TargetOrganization"] = TargetOrganization
	}

	return this.Request("POST", "/api/v1/admin/policies/list", data)
}

// Get all policy objects
// For the top-level organization, the API result includes all policies for all organizations, unless the TargetOrganization parameter is present.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetOrganization <string>: (Optional) If present, list the policies belonging to another organization. Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)
func (this *CometServerAPI) AdminPoliciesListFull(TargetOrganization string) (*http.Response, error) {
	data := map[string]string{}
	if TargetOrganization != "" {
		data["TargetOrganization"] = TargetOrganization
	}

	return this.Request("POST", "/api/v1/admin/policies/list-full", data)
}

// Create a new policy object
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// Policy <GroupPolicy>: The policy data
func (this *CometServerAPI) AdminPoliciesNew(Policy GroupPolicy) (*http.Response, error) {
	data := map[string]string{}
	data["Policy"] = Policy

	return this.Request("POST", "/api/v1/admin/policies/new", data)
}

// Update an existing policy object
// An optional hash may be used, to ensure the modification was atomic.
// This API can also be used to create a new policy object with a specific hash.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// PolicyID <string>: The policy ID to update or create
// Policy <GroupPolicy>: The policy data
// CheckPolicyHash <string>: (Optional) An atomic verification hash as supplied by the AdminPoliciesGet API
func (this *CometServerAPI) AdminPoliciesSet(PolicyID string, Policy GroupPolicy, CheckPolicyHash string) (*http.Response, error) {
	data := map[string]string{}
	data["PolicyID"] = PolicyID
	data["Policy"] = Policy
	if CheckPolicyHash != "" {
		data["CheckPolicyHash"] = CheckPolicyHash
	}

	return this.Request("POST", "/api/v1/admin/policies/set", data)
}

// Preview an email report for a customer
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Selected account username
// EmailReportConfig <EmailReportConfig>: Email report configuration to preview
// EmailAddress <string>: (Optional) Email address that may be included in the report body (>= 20.3.3)
func (this *CometServerAPI) AdminPreviewUserEmailReport(TargetUser string, EmailReportConfig EmailReportConfig, EmailAddress string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser
	data["EmailReportConfig"] = EmailReportConfig
	if EmailAddress != "" {
		data["EmailAddress"] = EmailAddress
	}

	return this.Request("POST", "/api/v1/admin/preview-user-email-report", data)
}

// Get Replication status
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
func (this *CometServerAPI) AdminReplicationState() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/replication/state", nil)
}

// Request a new Storage Vault on behalf of a user
// This action does not respect the "Prevent creating new Storage Vaults (via Request)" policy setting. New Storage Vaults can be requested regardless of the policy setting.
// Prior to Comet 19.8.0, the response type was CometAPIResponseMessage (i.e. no DestinationID field in response).
// The StorageProvider must exist for the target user account's organization.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: The user to receive the new Storage Vault
// StorageProvider <string>: ID for the storage template destination
// SelfAddress <string>: (Optional) The external URL for this server. Used to resolve conflicts
func (this *CometServerAPI) AdminRequestStorageVault(TargetUser string, StorageProvider string, SelfAddress string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser
	data["StorageProvider"] = StorageProvider
	if SelfAddress != "" {
		data["SelfAddress"] = SelfAddress
	} else {
		data["SelfAddress"] = this.ServerURL
	}

	return this.Request("POST", "/api/v1/admin/request-storage-vault", data)
}

// Get the available options for Requesting a Storage Vault
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetOrganization <string>: (Optional) If present, list the storage template options belonging to another organization. Only allowed for administrator accounts in the top-level organization. (>= 22.3.7)
func (this *CometServerAPI) AdminRequestStorageVaultProviders(TargetOrganization string) (*http.Response, error) {
	data := map[string]string{}
	if TargetOrganization != "" {
		data["TargetOrganization"] = TargetOrganization
	}

	return this.Request("POST", "/api/v1/admin/request-storage-vault-providers", data)
}

// Reset user account password
// The user account must have a recovery code present. A new replacement recovery code will be generated automatically.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Selected account username
// NewPassword <string>: New account password
// OldPassword <string>: Old account password (optional)
func (this *CometServerAPI) AdminResetUserPassword(TargetUser string, NewPassword string, OldPassword string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser
	data["NewPassword"] = NewPassword
	data["OldPassword"] = OldPassword

	return this.Request("POST", "/api/v1/admin/reset-user-password", data)
}

// Revoke device from user account
// It's possible to simply remove the Device section from the user's profile, however, using this dedicated API will also gracefully handle live connections.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Selected account username
// TargetDevice <string>: Selected Device ID
func (this *CometServerAPI) AdminRevokeDevice(TargetUser string, TargetDevice string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser
	data["TargetDevice"] = TargetDevice

	return this.Request("POST", "/api/v1/admin/revoke-device", data)
}

// Modify user account profile
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Selected account username
// ProfileData <UserProfileConfig>: Modified user profile
func (this *CometServerAPI) AdminSetUserProfile(TargetUser string, ProfileData UserProfileConfig) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser
	data["ProfileData"] = ProfileData

	return this.Request("POST", "/api/v1/admin/set-user-profile", data)
}

// Modify user account profile (atomic)
// The hash parameter can be determined from the corresponding API, to atomically ensure that no changes occur between get/set operations.
// The hash format is not publicly documented and may change in a future server version. Use server APIs to retrieve current hash values.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Auth Role to be enabled.
// Params:
// TargetUser <string>: Selected account username
// ProfileData <UserProfileConfig>: Modified user profile
// RequireHash <string>: Previous hash parameter
func (this *CometServerAPI) AdminSetUserProfileHash(TargetUser string, ProfileData UserProfileConfig, RequireHash string) (*http.Response, error) {
	data := map[string]string{}
	data["TargetUser"] = TargetUser
	data["ProfileData"] = ProfileData
	data["RequireHash"] = RequireHash

	return this.Request("POST", "/api/v1/admin/set-user-profile-hash", data)
}

// Retrieve properties for a single bucket
// This API can also be used to refresh the size measurement for a single bucket by passing a valid AfterTimestamp parameter.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Storage Role to be enabled.
// Params:
// BucketID <string>: Bucket ID
// AfterTimestamp <int>: (Optional) Allow a stale size measurement if it is at least as new as the supplied Unix timestamp. Timestamps in the future may produce a result clamped down to the Comet Server's current time. If not present, the size measurement may be arbitrarily stale.
func (this *CometServerAPI) AdminStorageBucketProperties(BucketID string, AfterTimestamp int) (*http.Response, error) {
	data := map[string]string{}
	data["BucketID"] = BucketID
	if AfterTimestamp != "" {
		data["AfterTimestamp"] = AfterTimestamp
	}

	return this.Request("POST", "/api/v1/admin/storage/bucket-properties", data)
}

// Delete a bucket
// All data will be removed from the server. Misuse can cause data loss!
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Storage Role to be enabled.
// Params:
// BucketID <string>: Selected bucket name
func (this *CometServerAPI) AdminStorageDeleteBucket(BucketID string) (*http.Response, error) {
	data := map[string]string{}
	data["BucketID"] = BucketID

	return this.Request("POST", "/api/v1/admin/storage/delete-bucket", data)
}

// Retrieve available space metrics
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API requires the Storage Role to be enabled.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// Params:
// BucketID <string>: (Optional) (This parameter is not used)
func (this *CometServerAPI) AdminStorageFreeSpace(BucketID string) (*http.Response, error) {
	data := map[string]string{}
	if BucketID != "" {
		data["BucketID"] = BucketID
	}

	return this.Request("POST", "/api/v1/admin/storage/free-space", data)
}

// List all buckets
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Storage Role to be enabled.
func (this *CometServerAPI) AdminStorageListBuckets() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/storage/list-buckets", nil)
}

// Ping a storage destination
//
// You must supply administrator authentication credentials to use this API.
// Access to this API may be prevented on a per-administrator basis.
// This API requires the Storage Role to be enabled.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// Params:
// ExtraData <DestinationLocation>: The destination location settings
func (this *CometServerAPI) AdminStoragePingDestination(ExtraData DestinationLocation) (*http.Response, error) {
	data := map[string]string{}
	data["ExtraData"] = ExtraData

	return this.Request("POST", "/api/v1/admin/storage/ping-destination", data)
}

// Create a new bucket
// Leave the Set* parameters blank to generate a bucket with random credentials, or, supply a pre-hashed password for zero-knowledge operations.
// Any auto-generated credentials are returned in the response message.
//
// You must supply administrator authentication credentials to use this API.
// This API requires the Storage Role to be enabled.
// Params:
// SetBucketValue <string>: (Optional) Bucket ID
// SetKeyHashFormat <string>: (Optional) Bucket key hashing format
// SetKeyHashValue <string>: (Optional) Bucket key hash
// SetOrganizationID <string>: (Optional) Target organization ID (>= 20.9.0)
func (this *CometServerAPI) AdminStorageRegisterBucket(SetBucketValue string, SetKeyHashFormat string, SetKeyHashValue string, SetOrganizationID string) (*http.Response, error) {
	data := map[string]string{}
	if SetBucketValue != "" {
		data["SetBucketValue"] = SetBucketValue
	}
	if SetKeyHashFormat != "" {
		data["SetKeyHashFormat"] = SetKeyHashFormat
	}
	if SetKeyHashValue != "" {
		data["SetKeyHashValue"] = SetKeyHashValue
	}
	if SetOrganizationID != "" {
		data["SetOrganizationID"] = SetOrganizationID
	}

	return this.Request("POST", "/api/v1/admin/storage/register-bucket", data)
}

// Start a new software update campaign
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
// Params:
// Options <UpdateCampaignOptions>: Configure targets for the software update campaign
func (this *CometServerAPI) AdminUpdateCampaignStart(Options UpdateCampaignOptions) (*http.Response, error) {
	data := map[string]string{}
	data["Options"] = Options

	return this.Request("POST", "/api/v1/admin/update-campaign/start", data)
}

// Get current campaign status
//
// You must supply administrator authentication credentials to use this API.
// This API is only available for administrator accounts in the top-level Organization, not in any other Organization.
// This API requires the Software Build Role to be enabled.
// This API requires the Auth Role to be enabled.
func (this *CometServerAPI) AdminUpdateCampaignStatus() (*http.Response, error) {
	return this.Request("POST", "/api/v1/admin/update-campaign/status", nil)
}

// Retreve basic information about this Comet Server
func (this *CometServerAPI) BrandingProps() (*http.Response, error) {
	return this.Request("GET", "/gen/branding.props", nil)
}

// Generate a session key (log in)
// This hybrid API allows you to log in to the Comet Server as either an administrator or end-user account.
// This API behaves like either AdminAccountSessionStart or UserWebSessionStart, depending on what the supplied credentials were valid for.
func (this *CometServerAPI) HybridSessionStart() (*http.Response, error) {
	return this.Request("POST", "/api/v1/hybrid/session/start", nil)
}

// Revoke a session key (log out)
//
// You must supply user authentication credentials to use this API, and the user account must be authorized for web access.
// This API requires the Auth Role to be enabled.
func (this *CometServerAPI) UserWebSessionRevoke() (*http.Response, error) {
	return this.Request("POST", "/api/v1/user/web/session/revoke", nil)
}

// Generate a session key (log in)
//
// You must supply user authentication credentials to use this API, and the user account must be authorized for web access.
// This API requires the Auth Role to be enabled.
func (this *CometServerAPI) UserWebSessionStart() (*http.Response, error) {
	return this.Request("POST", "/api/v1/user/web/session/start", nil)
}
